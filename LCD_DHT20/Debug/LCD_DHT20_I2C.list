
LCD_DHT20_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008390  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  080084a0  080084a0  000184a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800892c  0800892c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800892c  0800892c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800892c  0800892c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008930  08008930  00018930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  200001e0  08008b14  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08008b14  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cd3  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028dd  00000000  00000000  00030edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000337c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00034870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ed7  00000000  00000000  00035818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d48  00000000  00000000  0004f6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e741  00000000  00000000  00063437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000576c  00000000  00000000  000f1bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008488 	.word	0x08008488

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008488 	.word	0x08008488

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <Get_command>:
#include "control.h"




void Get_command(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	if(current_index_read != current_index_write ) {
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <Get_command+0x40>)
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <Get_command+0x44>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d014      	beq.n	8000f7e <Get_command+0x3a>
			  Command_parser_fsm();
 8000f54:	f000 f854 	bl	8001000 <Command_parser_fsm>
			  current_index_read++;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <Get_command+0x40>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <Get_command+0x40>)
 8000f62:	701a      	strb	r2, [r3, #0]
			  if(current_index_read == MAX_BUFFER_SIZE) current_index_read = 0;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <Get_command+0x40>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b1e      	cmp	r3, #30
 8000f6a:	d102      	bne.n	8000f72 <Get_command+0x2e>
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <Get_command+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
			  data_flag--;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <Get_command+0x48>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <Get_command+0x48>)
 8000f7c:	701a      	strb	r2, [r3, #0]
		  }
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002d4 	.word	0x200002d4
 8000f88:	200002d3 	.word	0x200002d3
 8000f8c:	200002d2 	.word	0x200002d2

08000f90 <HAL_UART_RxCpltCallback>:
//Uart Control functions in here
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_UART_RxCpltCallback+0x58>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d11e      	bne.n	8000fe0 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Receive_IT(&huart2 , &data , 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4911      	ldr	r1, [pc, #68]	; (8000fec <HAL_UART_RxCpltCallback+0x5c>)
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <HAL_UART_RxCpltCallback+0x60>)
 8000fa8:	f003 ff55 	bl	8004e56 <HAL_UART_Receive_IT>
			buffer_uart[current_index_write] = data;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_UART_RxCpltCallback+0x64>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_RxCpltCallback+0x5c>)
 8000fb4:	7819      	ldrb	r1, [r3, #0]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_UART_RxCpltCallback+0x68>)
 8000fb8:	5499      	strb	r1, [r3, r2]
//			HAL_UART_Transmit(&huart2 , &buffer_uart[current_index_write] , 1, 100);
			current_index_write++;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_UART_RxCpltCallback+0x64>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_UART_RxCpltCallback+0x64>)
 8000fc4:	701a      	strb	r2, [r3, #0]
			data_flag++;
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_UART_RxCpltCallback+0x6c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_UART_RxCpltCallback+0x6c>)
 8000fd0:	701a      	strb	r2, [r3, #0]
			if(current_index_write == MAX_BUFFER_SIZE) current_index_write = 0;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_UART_RxCpltCallback+0x64>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b1e      	cmp	r3, #30
 8000fd8:	d102      	bne.n	8000fe0 <HAL_UART_RxCpltCallback+0x50>
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_UART_RxCpltCallback+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]


	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	200002d1 	.word	0x200002d1
 8000ff0:	2000028c 	.word	0x2000028c
 8000ff4:	200002d3 	.word	0x200002d3
 8000ff8:	200002d8 	.word	0x200002d8
 8000ffc:	200002d2 	.word	0x200002d2

08001000 <Command_parser_fsm>:

void Command_parser_fsm(){
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
		switch(command_parser_state){
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <Command_parser_fsm+0xf0>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d86c      	bhi.n	80010e6 <Command_parser_fsm+0xe6>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <Command_parser_fsm+0x14>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001029 	.word	0x08001029
 8001018:	0800103f 	.word	0x0800103f
 800101c:	08001081 	.word	0x08001081
 8001020:	0800109d 	.word	0x0800109d
 8001024:	080010b9 	.word	0x080010b9
			case IDLE:
				if(buffer_uart[current_index_read] == (uint8_t) '!')  {
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <Command_parser_fsm+0xf4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <Command_parser_fsm+0xf8>)
 8001030:	5c9b      	ldrb	r3, [r3, r2]
 8001032:	2b21      	cmp	r3, #33	; 0x21
 8001034:	d14e      	bne.n	80010d4 <Command_parser_fsm+0xd4>
					command_parser_state = GET_START;
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <Command_parser_fsm+0xf0>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800103c:	e04a      	b.n	80010d4 <Command_parser_fsm+0xd4>
			case GET_START:
				if(buffer_uart[current_index_read]  == (uint8_t) 'C'){
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <Command_parser_fsm+0xf4>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <Command_parser_fsm+0xf8>)
 8001046:	5c9b      	ldrb	r3, [r3, r2]
 8001048:	2b43      	cmp	r3, #67	; 0x43
 800104a:	d103      	bne.n	8001054 <Command_parser_fsm+0x54>
					command_parser_state = GET_C;
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <Command_parser_fsm+0xf0>)
 800104e:	2202      	movs	r2, #2
 8001050:	701a      	strb	r2, [r3, #0]
					command_parser_state = GET_R;
				}
				else if(buffer_uart[current_index_read]  == (uint8_t) 'A') {
					command_parser_state = GET_A;
				}
				break;
 8001052:	e041      	b.n	80010d8 <Command_parser_fsm+0xd8>
				else if(buffer_uart[current_index_read]  == (uint8_t) 'R') {
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <Command_parser_fsm+0xf4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <Command_parser_fsm+0xf8>)
 800105c:	5c9b      	ldrb	r3, [r3, r2]
 800105e:	2b52      	cmp	r3, #82	; 0x52
 8001060:	d103      	bne.n	800106a <Command_parser_fsm+0x6a>
					command_parser_state = GET_R;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <Command_parser_fsm+0xf0>)
 8001064:	2203      	movs	r2, #3
 8001066:	701a      	strb	r2, [r3, #0]
				break;
 8001068:	e036      	b.n	80010d8 <Command_parser_fsm+0xd8>
				else if(buffer_uart[current_index_read]  == (uint8_t) 'A') {
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <Command_parser_fsm+0xf4>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <Command_parser_fsm+0xf8>)
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	2b41      	cmp	r3, #65	; 0x41
 8001076:	d12f      	bne.n	80010d8 <Command_parser_fsm+0xd8>
					command_parser_state = GET_A;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <Command_parser_fsm+0xf0>)
 800107a:	2204      	movs	r2, #4
 800107c:	701a      	strb	r2, [r3, #0]
				break;
 800107e:	e02b      	b.n	80010d8 <Command_parser_fsm+0xd8>

			case GET_C:
				if(buffer_uart[current_index_read]  == (uint8_t) '#') {
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <Command_parser_fsm+0xf4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <Command_parser_fsm+0xf8>)
 8001088:	5c9b      	ldrb	r3, [r3, r2]
 800108a:	2b23      	cmp	r3, #35	; 0x23
 800108c:	d126      	bne.n	80010dc <Command_parser_fsm+0xdc>
					isCapture_flag = 1;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <Command_parser_fsm+0xfc>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
					command_parser_state =IDLE;
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <Command_parser_fsm+0xf0>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
				}
				break;
 800109a:	e01f      	b.n	80010dc <Command_parser_fsm+0xdc>

			case GET_R:
				if(buffer_uart[current_index_read] == (uint8_t) '#') {
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <Command_parser_fsm+0xf4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <Command_parser_fsm+0xf8>)
 80010a4:	5c9b      	ldrb	r3, [r3, r2]
 80010a6:	2b23      	cmp	r3, #35	; 0x23
 80010a8:	d11a      	bne.n	80010e0 <Command_parser_fsm+0xe0>
					isReset_flag = 1;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <Command_parser_fsm+0x100>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
					command_parser_state =IDLE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <Command_parser_fsm+0xf0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010b6:	e013      	b.n	80010e0 <Command_parser_fsm+0xe0>
			case GET_A:
				if(buffer_uart[current_index_read] == (uint8_t) '#') {
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <Command_parser_fsm+0xf4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <Command_parser_fsm+0xf8>)
 80010c0:	5c9b      	ldrb	r3, [r3, r2]
 80010c2:	2b23      	cmp	r3, #35	; 0x23
 80010c4:	d10e      	bne.n	80010e4 <Command_parser_fsm+0xe4>
					isAuto_flag = 1;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <Command_parser_fsm+0x104>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
					command_parser_state =IDLE;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <Command_parser_fsm+0xf0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
				}
				break;
 80010d2:	e007      	b.n	80010e4 <Command_parser_fsm+0xe4>
				break;
 80010d4:	bf00      	nop
 80010d6:	e006      	b.n	80010e6 <Command_parser_fsm+0xe6>
				break;
 80010d8:	bf00      	nop
 80010da:	e004      	b.n	80010e6 <Command_parser_fsm+0xe6>
				break;
 80010dc:	bf00      	nop
 80010de:	e002      	b.n	80010e6 <Command_parser_fsm+0xe6>
				break;
 80010e0:	bf00      	nop
 80010e2:	e000      	b.n	80010e6 <Command_parser_fsm+0xe6>
				break;
 80010e4:	bf00      	nop

		}
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200002d0 	.word	0x200002d0
 80010f4:	200002d4 	.word	0x200002d4
 80010f8:	200002d8 	.word	0x200002d8
 80010fc:	20000320 	.word	0x20000320
 8001100:	20000322 	.word	0x20000322
 8001104:	20000321 	.word	0x20000321

08001108 <DHT20_I2C_Delay>:
 *  Created on: May 9, 2023
 *      Author: NHAN
 */

#include "dht20.h"
static void DHT20_I2C_Delay(uint16_t time){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4618      	mov	r0, r3
 8001116:	f001 f997 	bl	8002448 <HAL_Delay>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <DHT20_I2C_Init>:
void DHT20_I2C_Init( DHT20_I2C_DEVICE* DHT20,I2C_HandleTypeDef* hi2c ,uint8_t address){
 8001122:	b580      	push	{r7, lr}
 8001124:	b088      	sub	sp, #32
 8001126:	af02      	add	r7, sp, #8
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	4613      	mov	r3, r2
 800112e:	71fb      	strb	r3, [r7, #7]
	DHT20_I2C_Delay(150);
 8001130:	2096      	movs	r0, #150	; 0x96
 8001132:	f7ff ffe9 	bl	8001108 <DHT20_I2C_Delay>
	DHT20->hi2c = hi2c;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	601a      	str	r2, [r3, #0]
	DHT20->address = address;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	711a      	strb	r2, [r3, #4]
	uint8_t dataBuffer[4];
	dataBuffer[0] = 0x70;
 8001142:	2370      	movs	r3, #112	; 0x70
 8001144:	753b      	strb	r3, [r7, #20]
	dataBuffer[1] = 0xA8;
 8001146:	23a8      	movs	r3, #168	; 0xa8
 8001148:	757b      	strb	r3, [r7, #21]
	dataBuffer[2] = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	75bb      	strb	r3, [r7, #22]
	dataBuffer[3] = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(DHT20->hi2c , DHT20->address<<1 | DHT20_Write, dataBuffer, sizeof(dataBuffer) , 100);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	b29b      	uxth	r3, r3
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	b299      	uxth	r1, r3
 8001160:	f107 0214 	add.w	r2, r7, #20
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2304      	movs	r3, #4
 800116a:	f001 fe17 	bl	8002d9c <HAL_I2C_Master_Transmit>
	DHT20_I2C_Delay(10);
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff ffca 	bl	8001108 <DHT20_I2C_Delay>
	dataBuffer[0] = 0x70;
 8001174:	2370      	movs	r3, #112	; 0x70
 8001176:	753b      	strb	r3, [r7, #20]
	dataBuffer[1] = 0xBE;
 8001178:	23be      	movs	r3, #190	; 0xbe
 800117a:	757b      	strb	r3, [r7, #21]
	dataBuffer[2] = 0x08;
 800117c:	2308      	movs	r3, #8
 800117e:	75bb      	strb	r3, [r7, #22]
	dataBuffer[3] = 0x00;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(DHT20->hi2c , DHT20->address<<1 | DHT20_Write, dataBuffer, sizeof(dataBuffer) , 100);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	b29b      	uxth	r3, r3
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	b299      	uxth	r1, r3
 8001192:	f107 0214 	add.w	r2, r7, #20
 8001196:	2364      	movs	r3, #100	; 0x64
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2304      	movs	r3, #4
 800119c:	f001 fdfe 	bl	8002d9c <HAL_I2C_Master_Transmit>
	DHT20_I2C_Delay(10);
 80011a0:	200a      	movs	r0, #10
 80011a2:	f7ff ffb1 	bl	8001108 <DHT20_I2C_Delay>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <DHT20_I2C_TriggerMeasurement>:
	HAL_I2C_Master_Transmit(DHT20->hi2c,  DHT20->address<<1 | DHT20_Write, &dataBuffer, 1, 100);
	HAL_I2C_Master_Receive(DHT20->hi2c,  DHT20->address<<1 | DHT20_READ, &status, 1, 100);
	return status;
}

void DHT20_I2C_TriggerMeasurement(DHT20_I2C_DEVICE* DHT20){
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af02      	add	r7, sp, #8
 80011b4:	6078      	str	r0, [r7, #4]
	uint8_t dataBuffer[4];
	dataBuffer[0] = 0x70;
 80011b6:	2370      	movs	r3, #112	; 0x70
 80011b8:	733b      	strb	r3, [r7, #12]
	dataBuffer[1] = 0xAC;
 80011ba:	23ac      	movs	r3, #172	; 0xac
 80011bc:	737b      	strb	r3, [r7, #13]
	dataBuffer[2] = 0x33;
 80011be:	2333      	movs	r3, #51	; 0x33
 80011c0:	73bb      	strb	r3, [r7, #14]
	dataBuffer[3] = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(DHT20->hi2c , DHT20->address<<1  | DHT20_Write, dataBuffer, sizeof(dataBuffer) , 100);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	b299      	uxth	r1, r3
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2304      	movs	r3, #4
 80011de:	f001 fddd 	bl	8002d9c <HAL_I2C_Master_Transmit>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <DHT20_I2C_Read>:

void DHT20_I2C_Read(DHT20_I2C_DEVICE* DHT20, float* temp, float* humi){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	uint8_t   dataBuffer[7] ={0};
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2100      	movs	r1, #0
 8001202:	460a      	mov	r2, r1
 8001204:	801a      	strh	r2, [r3, #0]
 8001206:	460a      	mov	r2, r1
 8001208:	709a      	strb	r2, [r3, #2]
	uint32_t temp_data = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
	uint32_t humi_data = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
	// send request to Dht20 in order to trigger measurement
	DHT20_I2C_TriggerMeasurement(DHT20);
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f7ff ffcb 	bl	80011ae <DHT20_I2C_TriggerMeasurement>
	DHT20_I2C_Delay(80);
 8001218:	2050      	movs	r0, #80	; 0x50
 800121a:	f7ff ff75 	bl	8001108 <DHT20_I2C_Delay>
	// if(status == 0x80 it means dht20 is complete measurement)

	HAL_I2C_Master_Receive(DHT20->hi2c,  DHT20->address<<1 | DHT20_READ, dataBuffer,sizeof(dataBuffer)  , 100);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	791b      	ldrb	r3, [r3, #4]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b21b      	sxth	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b21b      	sxth	r3, r3
 8001230:	b299      	uxth	r1, r3
 8001232:	f107 0210 	add.w	r2, r7, #16
 8001236:	2364      	movs	r3, #100	; 0x64
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2307      	movs	r3, #7
 800123c:	f001 feac 	bl	8002f98 <HAL_I2C_Master_Receive>

	// get bytes of humi
	humi_data = (humi_data | dataBuffer[1]) << 8;
 8001240:	7c7b      	ldrb	r3, [r7, #17]
 8001242:	461a      	mov	r2, r3
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	61bb      	str	r3, [r7, #24]
	humi_data = (humi_data | dataBuffer[2]) << 8;
 800124c:	7cbb      	ldrb	r3, [r7, #18]
 800124e:	461a      	mov	r2, r3
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	61bb      	str	r3, [r7, #24]
	humi_data = (humi_data | dataBuffer[3]) >> 4;
 8001258:	7cfb      	ldrb	r3, [r7, #19]
 800125a:	461a      	mov	r2, r3
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	61bb      	str	r3, [r7, #24]
	//get bytes of data
	temp_data = (temp_data | dataBuffer[3]) << 8;
 8001264:	7cfb      	ldrb	r3, [r7, #19]
 8001266:	461a      	mov	r2, r3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	4313      	orrs	r3, r2
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	61fb      	str	r3, [r7, #28]
	temp_data = (temp_data | dataBuffer[4]) << 8;
 8001270:	7d3b      	ldrb	r3, [r7, #20]
 8001272:	461a      	mov	r2, r3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4313      	orrs	r3, r2
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	61fb      	str	r3, [r7, #28]
	temp_data = (temp_data | dataBuffer[5]);
 800127c:	7d7b      	ldrb	r3, [r7, #21]
 800127e:	461a      	mov	r2, r3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	4313      	orrs	r3, r2
 8001284:	61fb      	str	r3, [r7, #28]
	temp_data = temp_data & 0x000FFFFF;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800128c:	61fb      	str	r3, [r7, #28]

	*temp = (float) temp_data*200/1024/1024 - 50;
 800128e:	69f8      	ldr	r0, [r7, #28]
 8001290:	f7ff fcb0 	bl	8000bf4 <__aeabi_ui2f>
 8001294:	4603      	mov	r3, r0
 8001296:	491a      	ldr	r1, [pc, #104]	; (8001300 <DHT20_I2C_Read+0x114>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd03 	bl	8000ca4 <__aeabi_fmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdb1 	bl	8000e0c <__aeabi_fdiv>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fdab 	bl	8000e0c <__aeabi_fdiv>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4912      	ldr	r1, [pc, #72]	; (8001304 <DHT20_I2C_Read+0x118>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fbe8 	bl	8000a90 <__aeabi_fsub>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	601a      	str	r2, [r3, #0]
	*humi = (float) humi_data*100/1024/1024;
 80012c8:	69b8      	ldr	r0, [r7, #24]
 80012ca:	f7ff fc93 	bl	8000bf4 <__aeabi_ui2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	490d      	ldr	r1, [pc, #52]	; (8001308 <DHT20_I2C_Read+0x11c>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fce6 	bl	8000ca4 <__aeabi_fmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fd94 	bl	8000e0c <__aeabi_fdiv>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fd8e 	bl	8000e0c <__aeabi_fdiv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	43480000 	.word	0x43480000
 8001304:	42480000 	.word	0x42480000
 8001308:	42c80000 	.word	0x42c80000

0800130c <Scan_Address_Device>:
 *      Author: NHAN
 */

#include "fsm_system.h"
//Read temp and humi function in here
void Scan_Address_Device(I2C_HandleTypeDef* hi2c){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2 , (uint8_t*)&sending , sprintf(sending,"scanning address device . . . \n")) ;
 8001314:	4919      	ldr	r1, [pc, #100]	; (800137c <Scan_Address_Device+0x70>)
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <Scan_Address_Device+0x74>)
 8001318:	f004 fe3e 	bl	8005f98 <siprintf>
 800131c:	4603      	mov	r3, r0
 800131e:	b29b      	uxth	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4917      	ldr	r1, [pc, #92]	; (8001380 <Scan_Address_Device+0x74>)
 8001324:	4817      	ldr	r0, [pc, #92]	; (8001384 <Scan_Address_Device+0x78>)
 8001326:	f003 fd52 	bl	8004dce <HAL_UART_Transmit_IT>
	for(uint8_t index = 0; index < 128; ++index){
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e01b      	b.n	8001368 <Scan_Address_Device+0x5c>
		if(HAL_I2C_IsDeviceReady(hi2c, index << 1, 1, 100)==HAL_OK){
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	b29b      	uxth	r3, r3
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	b299      	uxth	r1, r3
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	2201      	movs	r2, #1
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f002 f88b 	bl	8003458 <HAL_I2C_IsDeviceReady>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10c      	bne.n	8001362 <Scan_Address_Device+0x56>
			HAL_UART_Transmit_IT(&huart2 , (uint8_t*)&sending , sprintf(sending,"Address device is: %x \n",index)) ;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	461a      	mov	r2, r3
 800134c:	490e      	ldr	r1, [pc, #56]	; (8001388 <Scan_Address_Device+0x7c>)
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <Scan_Address_Device+0x74>)
 8001350:	f004 fe22 	bl	8005f98 <siprintf>
 8001354:	4603      	mov	r3, r0
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4909      	ldr	r1, [pc, #36]	; (8001380 <Scan_Address_Device+0x74>)
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <Scan_Address_Device+0x78>)
 800135e:	f003 fd36 	bl	8004dce <HAL_UART_Transmit_IT>
	for(uint8_t index = 0; index < 128; ++index){
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3301      	adds	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dadf      	bge.n	8001330 <Scan_Address_Device+0x24>
		}
	}
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	080084a0 	.word	0x080084a0
 8001380:	200002f8 	.word	0x200002f8
 8001384:	2000028c 	.word	0x2000028c
 8001388:	080084c0 	.word	0x080084c0

0800138c <Display_temp_humi>:

void Display_temp_humi(){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af02      	add	r7, sp, #8
	LCD_I2C_Clear(&LCD);
 8001392:	481a      	ldr	r0, [pc, #104]	; (80013fc <Display_temp_humi+0x70>)
 8001394:	f000 fa28 	bl	80017e8 <LCD_I2C_Clear>
	DHT20_I2C_Read(&DHT20, &temperature, &humidity);
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <Display_temp_humi+0x74>)
 800139a:	491a      	ldr	r1, [pc, #104]	; (8001404 <Display_temp_humi+0x78>)
 800139c:	481a      	ldr	r0, [pc, #104]	; (8001408 <Display_temp_humi+0x7c>)
 800139e:	f7ff ff25 	bl	80011ec <DHT20_I2C_Read>
	sprintf(line1,"Temp: %.2f%cC",temperature,0xDF);
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <Display_temp_humi+0x78>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f83e 	bl	8000428 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	21df      	movs	r1, #223	; 0xdf
 80013b2:	9100      	str	r1, [sp, #0]
 80013b4:	4915      	ldr	r1, [pc, #84]	; (800140c <Display_temp_humi+0x80>)
 80013b6:	4816      	ldr	r0, [pc, #88]	; (8001410 <Display_temp_humi+0x84>)
 80013b8:	f004 fdee 	bl	8005f98 <siprintf>
	sprintf(line2,"Humi: %.2f%%",humidity);
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <Display_temp_humi+0x74>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f831 	bl	8000428 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4912      	ldr	r1, [pc, #72]	; (8001414 <Display_temp_humi+0x88>)
 80013cc:	4812      	ldr	r0, [pc, #72]	; (8001418 <Display_temp_humi+0x8c>)
 80013ce:	f004 fde3 	bl	8005f98 <siprintf>
	LCD_I2C_SetCursor(&LCD, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <Display_temp_humi+0x70>)
 80013d8:	f000 f9d1 	bl	800177e <LCD_I2C_SetCursor>
	LCD_I2C_WriteString(&LCD, line1);
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <Display_temp_humi+0x84>)
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <Display_temp_humi+0x70>)
 80013e0:	f000 fa22 	bl	8001828 <LCD_I2C_WriteString>
	LCD_I2C_SetCursor(&LCD, 0, 1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2100      	movs	r1, #0
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <Display_temp_humi+0x70>)
 80013ea:	f000 f9c8 	bl	800177e <LCD_I2C_SetCursor>
	LCD_I2C_WriteString(&LCD, line2);
 80013ee:	490a      	ldr	r1, [pc, #40]	; (8001418 <Display_temp_humi+0x8c>)
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <Display_temp_humi+0x70>)
 80013f2:	f000 fa19 	bl	8001828 <LCD_I2C_WriteString>
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000250 	.word	0x20000250
 8001400:	20000268 	.word	0x20000268
 8001404:	20000264 	.word	0x20000264
 8001408:	2000025c 	.word	0x2000025c
 800140c:	080084d8 	.word	0x080084d8
 8001410:	2000026c 	.word	0x2000026c
 8001414:	080084e8 	.word	0x080084e8
 8001418:	2000027c 	.word	0x2000027c

0800141c <Init_system>:


// fsm of overall system
void Init_system(){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af02      	add	r7, sp, #8
	LCD_I2C_Init(&LCD, &hi2c1,0x4E, 16, 2);
 8001422:	2302      	movs	r3, #2
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2310      	movs	r3, #16
 8001428:	224e      	movs	r2, #78	; 0x4e
 800142a:	4910      	ldr	r1, [pc, #64]	; (800146c <Init_system+0x50>)
 800142c:	4810      	ldr	r0, [pc, #64]	; (8001470 <Init_system+0x54>)
 800142e:	f000 f924 	bl	800167a <LCD_I2C_Init>
	DHT20_I2C_Init(&DHT20, &hi2c1, 0x38);
 8001432:	2238      	movs	r2, #56	; 0x38
 8001434:	490d      	ldr	r1, [pc, #52]	; (800146c <Init_system+0x50>)
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <Init_system+0x58>)
 8001438:	f7ff fe73 	bl	8001122 <DHT20_I2C_Init>
	LCD_I2C_SetCursor(&LCD, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <Init_system+0x54>)
 8001442:	f000 f99c 	bl	800177e <LCD_I2C_SetCursor>
	LCD_I2C_WriteString(&LCD, "SYSTEM BOOSTING ...");
 8001446:	490c      	ldr	r1, [pc, #48]	; (8001478 <Init_system+0x5c>)
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <Init_system+0x54>)
 800144a:	f000 f9ed 	bl	8001828 <LCD_I2C_WriteString>
	command_parser_state = IDLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <Init_system+0x60>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
//	system_state = SYSTEM_INIT;
	temperature = 0;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <Init_system+0x64>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
	humidity = 0;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <Init_system+0x68>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200001fc 	.word	0x200001fc
 8001470:	20000250 	.word	0x20000250
 8001474:	2000025c 	.word	0x2000025c
 8001478:	080084f8 	.word	0x080084f8
 800147c:	200002d0 	.word	0x200002d0
 8001480:	20000264 	.word	0x20000264
 8001484:	20000268 	.word	0x20000268

08001488 <fsm_system>:





void fsm_system(){
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af02      	add	r7, sp, #8
	switch(system_state){
 800148e:	4b40      	ldr	r3, [pc, #256]	; (8001590 <fsm_system+0x108>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d058      	beq.n	8001548 <fsm_system+0xc0>
 8001496:	2b0c      	cmp	r3, #12
 8001498:	dc72      	bgt.n	8001580 <fsm_system+0xf8>
 800149a:	2b0a      	cmp	r3, #10
 800149c:	d002      	beq.n	80014a4 <fsm_system+0x1c>
 800149e:	2b0b      	cmp	r3, #11
 80014a0:	d012      	beq.n	80014c8 <fsm_system+0x40>
				system_state =SYSTEM_INIT;
			}
			// change  state
			break;
		default:
			break;
 80014a2:	e06d      	b.n	8001580 <fsm_system+0xf8>
			Scheduler_Add_Task(&scheduler, Init_system, 0, 0);
 80014a4:	2300      	movs	r3, #0
 80014a6:	2200      	movs	r2, #0
 80014a8:	493a      	ldr	r1, [pc, #232]	; (8001594 <fsm_system+0x10c>)
 80014aa:	483b      	ldr	r0, [pc, #236]	; (8001598 <fsm_system+0x110>)
 80014ac:	f000 fb7a 	bl	8001ba4 <Scheduler_Add_Task>
			Scheduler_Add_Task(&scheduler, Display_temp_humi,5000,5000);
 80014b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4938      	ldr	r1, [pc, #224]	; (800159c <fsm_system+0x114>)
 80014ba:	4837      	ldr	r0, [pc, #220]	; (8001598 <fsm_system+0x110>)
 80014bc:	f000 fb72 	bl	8001ba4 <Scheduler_Add_Task>
			system_state = AUTO;
 80014c0:	4b33      	ldr	r3, [pc, #204]	; (8001590 <fsm_system+0x108>)
 80014c2:	220b      	movs	r2, #11
 80014c4:	701a      	strb	r2, [r3, #0]
			break;
 80014c6:	e060      	b.n	800158a <fsm_system+0x102>
			if(isCapture_flag) {
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <fsm_system+0x118>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d029      	beq.n	8001524 <fsm_system+0x9c>
				isCapture_flag = 0;
 80014d0:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <fsm_system+0x118>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
				Scheduler_Delete_Task(&scheduler, scheduler.CurrentSize - 1);
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <fsm_system+0x110>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	4619      	mov	r1, r3
 80014de:	482e      	ldr	r0, [pc, #184]	; (8001598 <fsm_system+0x110>)
 80014e0:	f000 fc6e 	bl	8001dc0 <Scheduler_Delete_Task>
				HAL_UART_Transmit_IT(&huart2 , (uint8_t*)&sending , sprintf(sending,"!Temp: %.2f, Humi: %.2f# \n",temperature,humidity) );
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <fsm_system+0x11c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe ff9d 	bl	8000428 <__aeabi_f2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <fsm_system+0x120>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ff96 	bl	8000428 <__aeabi_f2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	e9cd 2300 	strd	r2, r3, [sp]
 8001504:	4622      	mov	r2, r4
 8001506:	462b      	mov	r3, r5
 8001508:	4928      	ldr	r1, [pc, #160]	; (80015ac <fsm_system+0x124>)
 800150a:	4829      	ldr	r0, [pc, #164]	; (80015b0 <fsm_system+0x128>)
 800150c:	f004 fd44 	bl	8005f98 <siprintf>
 8001510:	4603      	mov	r3, r0
 8001512:	b29b      	uxth	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4926      	ldr	r1, [pc, #152]	; (80015b0 <fsm_system+0x128>)
 8001518:	4826      	ldr	r0, [pc, #152]	; (80015b4 <fsm_system+0x12c>)
 800151a:	f003 fc58 	bl	8004dce <HAL_UART_Transmit_IT>
				system_state = CAPTURE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <fsm_system+0x108>)
 8001520:	220c      	movs	r2, #12
 8001522:	701a      	strb	r2, [r3, #0]
			if(isReset_flag){
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <fsm_system+0x130>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d02b      	beq.n	8001584 <fsm_system+0xfc>
				isReset_flag = 0;
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <fsm_system+0x130>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
				Scheduler_Delete_Task(&scheduler, scheduler.CurrentSize - 1);
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <fsm_system+0x110>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	4619      	mov	r1, r3
 800153a:	4817      	ldr	r0, [pc, #92]	; (8001598 <fsm_system+0x110>)
 800153c:	f000 fc40 	bl	8001dc0 <Scheduler_Delete_Task>
				system_state =SYSTEM_INIT;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <fsm_system+0x108>)
 8001542:	220a      	movs	r2, #10
 8001544:	701a      	strb	r2, [r3, #0]
			break;
 8001546:	e01d      	b.n	8001584 <fsm_system+0xfc>
			if(isAuto_flag){
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <fsm_system+0x134>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00c      	beq.n	800156a <fsm_system+0xe2>
				isAuto_flag = 0;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <fsm_system+0x134>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
				Scheduler_Add_Task(&scheduler, Display_temp_humi,0,5000);
 8001556:	f241 3388 	movw	r3, #5000	; 0x1388
 800155a:	2200      	movs	r2, #0
 800155c:	490f      	ldr	r1, [pc, #60]	; (800159c <fsm_system+0x114>)
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <fsm_system+0x110>)
 8001560:	f000 fb20 	bl	8001ba4 <Scheduler_Add_Task>
				system_state = AUTO;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <fsm_system+0x108>)
 8001566:	220b      	movs	r2, #11
 8001568:	701a      	strb	r2, [r3, #0]
			if(isReset_flag){
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <fsm_system+0x130>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <fsm_system+0x100>
				isReset_flag = 0;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <fsm_system+0x130>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
				system_state =SYSTEM_INIT;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <fsm_system+0x108>)
 800157a:	220a      	movs	r2, #10
 800157c:	701a      	strb	r2, [r3, #0]
			break;
 800157e:	e003      	b.n	8001588 <fsm_system+0x100>
			break;
 8001580:	bf00      	nop
 8001582:	e002      	b.n	800158a <fsm_system+0x102>
			break;
 8001584:	bf00      	nop
 8001586:	e000      	b.n	800158a <fsm_system+0x102>
			break;
 8001588:	bf00      	nop
	}
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	20000000 	.word	0x20000000
 8001594:	0800141d 	.word	0x0800141d
 8001598:	20000324 	.word	0x20000324
 800159c:	0800138d 	.word	0x0800138d
 80015a0:	20000320 	.word	0x20000320
 80015a4:	20000264 	.word	0x20000264
 80015a8:	20000268 	.word	0x20000268
 80015ac:	0800850c 	.word	0x0800850c
 80015b0:	200002f8 	.word	0x200002f8
 80015b4:	2000028c 	.word	0x2000028c
 80015b8:	20000322 	.word	0x20000322
 80015bc:	20000321 	.word	0x20000321

080015c0 <LCD_I2C_Delay>:
 */


#include "lcd_i2c.h"
//#include "main.h"
static void LCD_I2C_Delay(uint16_t time){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 ff3b 	bl	8002448 <HAL_Delay>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <LCD_I2C_Write>:

static void LCD_I2C_Write(  LCD_I2C_DEVICE* LCD, uint8_t data, uint8_t mode){
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af02      	add	r7, sp, #8
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70fb      	strb	r3, [r7, #3]
 80015e6:	4613      	mov	r3, r2
 80015e8:	70bb      	strb	r3, [r7, #2]
	uint8_t dataUpper = data & 0xF0;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f023 030f 	bic.w	r3, r3, #15
 80015f0:	73fb      	strb	r3, [r7, #15]
	uint8_t dataLower = (data<<4) & 0xF0;
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	73bb      	strb	r3, [r7, #14]
	uint8_t dataBuffer[4];
	if( LCD->backLight)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7adb      	ldrb	r3, [r3, #11]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <LCD_I2C_Write+0x36>
	{
		dataUpper |= LCD_BACKLIGHT;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	73fb      	strb	r3, [r7, #15]
		dataLower |= LCD_BACKLIGHT;
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	73bb      	strb	r3, [r7, #14]
	}
	if(mode == LCD_DATA)
 8001610:	78bb      	ldrb	r3, [r7, #2]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <LCD_I2C_Write+0x4e>
	{
		dataUpper |= LCD_RS;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
		dataLower |= LCD_RS;
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	73bb      	strb	r3, [r7, #14]
 8001626:	e00a      	b.n	800163e <LCD_I2C_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 8001628:	78bb      	ldrb	r3, [r7, #2]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d107      	bne.n	800163e <LCD_I2C_Write+0x64>
	{
		dataUpper &= ~LCD_RS;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
		dataLower &= ~LCD_RS;
 8001636:	7bbb      	ldrb	r3, [r7, #14]
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	73bb      	strb	r3, [r7, #14]
	}
	//send 4 bit upper
	dataBuffer[0] = dataUpper | LCD_EN ; 				//set EN bit =1;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	b2db      	uxtb	r3, r3
 8001646:	723b      	strb	r3, [r7, #8]
//	LCD_I2C_Delay(1);
	dataBuffer[1] =dataUpper ;	// set EN bit = 0
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	727b      	strb	r3, [r7, #9]

	//send 4 bit lower
	dataBuffer[2] = dataLower | LCD_EN;					//set EN bit =1;
 800164c:	7bbb      	ldrb	r3, [r7, #14]
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	b2db      	uxtb	r3, r3
 8001654:	72bb      	strb	r3, [r7, #10]
//	LCD_I2C_Delay(1);
	dataBuffer[3] = dataLower;								//set EN bit =0;
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->hi2c, LCD->address,(uint8_t*) dataBuffer, sizeof(dataBuffer), 100);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	b299      	uxth	r1, r3
 8001664:	f107 0208 	add.w	r2, r7, #8
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2304      	movs	r3, #4
 800166e:	f001 fb95 	bl	8002d9c <HAL_I2C_Master_Transmit>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <LCD_I2C_Init>:
void LCD_I2C_Init(LCD_I2C_DEVICE* LCD, I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t colums, uint8_t rows){
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	4611      	mov	r1, r2
 8001686:	461a      	mov	r2, r3
 8001688:	460b      	mov	r3, r1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
	LCD->hi2c 			= hi2c;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	601a      	str	r2, [r3, #0]
	LCD->address 		= address;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	711a      	strb	r2, [r3, #4]
	LCD->colums 		= colums;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	79ba      	ldrb	r2, [r7, #6]
 80016a0:	715a      	strb	r2, [r3, #5]
	LCD->rows 			= rows;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	7e3a      	ldrb	r2, [r7, #24]
 80016a6:	719a      	strb	r2, [r3, #6]
	// set LCD to 4bit mode, display 2 line, cell is 5x8 dots
	LCD->functionSet 	= LCD_FUNCTION_SET | LCD_4BITMODE |	LCD_2LINE | LCD_5x8DOTS;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2228      	movs	r2, #40	; 0x28
 80016ac:	729a      	strb	r2, [r3, #10]
	LCD->entryMode 		= LCD_ENTRY_MODE_SET	| LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DECREMENT;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2206      	movs	r2, #6
 80016b2:	71da      	strb	r2, [r3, #7]
	//set LCD to display on, cursor off , blink off
	LCD->displayCtrl		= LCD_DISPLAY_CONTROL | LCD_DISPLAY_ON	| LCD_CURSOR_OFF | LCD_BLINK_OFF;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	220c      	movs	r2, #12
 80016b8:	721a      	strb	r2, [r3, #8]
	LCD->cursorShift		= LCD_CURSOR_SHIFT	| LCD_CURSOR_MOVE	| LCD_MOVE_RIGHT;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2214      	movs	r2, #20
 80016be:	725a      	strb	r2, [r3, #9]
	LCD->backLight 		= LCD_BACKLIGHT;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2208      	movs	r2, #8
 80016c4:	72da      	strb	r2, [r3, #11]

		LCD_I2C_Delay(50);
 80016c6:	2032      	movs	r0, #50	; 0x32
 80016c8:	f7ff ff7a 	bl	80015c0 <LCD_I2C_Delay>

		LCD_I2C_Write(LCD, 0x33, LCD_COMMAND);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2133      	movs	r1, #51	; 0x33
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff ff82 	bl	80015da <LCD_I2C_Write>
	//	CLCD_Delay(5);
		LCD_I2C_Write(LCD, 0x33, LCD_COMMAND);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2133      	movs	r1, #51	; 0x33
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff ff7d 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 80016e0:	2005      	movs	r0, #5
 80016e2:	f7ff ff6d 	bl	80015c0 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, 0x32, LCD_COMMAND);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2132      	movs	r1, #50	; 0x32
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff ff75 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 80016f0:	2005      	movs	r0, #5
 80016f2:	f7ff ff65 	bl	80015c0 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, 0x20, LCD_COMMAND);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2120      	movs	r1, #32
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f7ff ff6d 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 8001700:	2005      	movs	r0, #5
 8001702:	f7ff ff5d 	bl	80015c0 <LCD_I2C_Delay>

		LCD_I2C_Write(LCD, LCD->entryMode, LCD_COMMAND);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	79db      	ldrb	r3, [r3, #7]
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff ff63 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(2);
 8001714:	2002      	movs	r0, #2
 8001716:	f7ff ff53 	bl	80015c0 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, LCD->displayCtrl, LCD_COMMAND);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	7a1b      	ldrb	r3, [r3, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f7ff ff59 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(2);
 8001728:	2002      	movs	r0, #2
 800172a:	f7ff ff49 	bl	80015c0 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, LCD->cursorShift, LCD_COMMAND);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	7a5b      	ldrb	r3, [r3, #9]
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff ff4f 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(2);
 800173c:	2002      	movs	r0, #2
 800173e:	f7ff ff3f 	bl	80015c0 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, LCD->functionSet, LCD_COMMAND);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	7a9b      	ldrb	r3, [r3, #10]
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7ff ff45 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(2);
 8001750:	2002      	movs	r0, #2
 8001752:	f7ff ff35 	bl	80015c0 <LCD_I2C_Delay>

		LCD_I2C_Write(LCD, LCD_CLEAR_DISPLAY, LCD_COMMAND);
 8001756:	2200      	movs	r2, #0
 8001758:	2101      	movs	r1, #1
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff ff3d 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 8001760:	2005      	movs	r0, #5
 8001762:	f7ff ff2d 	bl	80015c0 <LCD_I2C_Delay>
		LCD_I2C_Write(LCD, LCD_RETURN_HOME, LCD_COMMAND);
 8001766:	2200      	movs	r2, #0
 8001768:	2102      	movs	r1, #2
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff ff35 	bl	80015da <LCD_I2C_Write>
		LCD_I2C_Delay(5);
 8001770:	2005      	movs	r0, #5
 8001772:	f7ff ff25 	bl	80015c0 <LCD_I2C_Delay>

}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <LCD_I2C_SetCursor>:



 void LCD_I2C_SetCursor(LCD_I2C_DEVICE* LCD, uint8_t Xpos, uint8_t Ypos){
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	4613      	mov	r3, r2
 800178c:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
	// if x position is greater than colums number so set position is (col-1);
	if(Xpos >= LCD->colums)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	795b      	ldrb	r3, [r3, #5]
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	429a      	cmp	r2, r3
 800179a:	d303      	bcc.n	80017a4 <LCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->colums - 1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	795b      	ldrb	r3, [r3, #5]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	70fb      	strb	r3, [r7, #3]
	}
	// if x position is greater than rows number so set position is (row-1);
	if(Ypos >= LCD->rows)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	799b      	ldrb	r3, [r3, #6]
 80017a8:	78ba      	ldrb	r2, [r7, #2]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d303      	bcc.n	80017b6 <LCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->rows -1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	799b      	ldrb	r3, [r3, #6]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	70bb      	strb	r3, [r7, #2]
	}
	// assign DRAM_ADDRESS to address of cell(row 1: 0x00 -> 0x0F, row2 : 0x40 -> 0x4F) in LCD
	if(Ypos == 0)
 80017b6:	78bb      	ldrb	r3, [r7, #2]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <LCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e005      	b.n	80017ce <LCD_I2C_SetCursor+0x50>
	}
	else if(Ypos == 1)
 80017c2:	78bb      	ldrb	r3, [r7, #2]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <LCD_I2C_SetCursor+0x50>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	3340      	adds	r3, #64	; 0x40
 80017cc:	73fb      	strb	r3, [r7, #15]
	}


	LCD_I2C_Write(LCD,  LCD_SET_DDRAM_ADDR | DRAM_ADDRESS, LCD_COMMAND);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fefd 	bl	80015da <LCD_I2C_Write>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <LCD_I2C_Clear>:
void LCD_I2C_Clear(LCD_I2C_DEVICE* LCD){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	LCD_I2C_Write(LCD, LCD_CLEAR_DISPLAY, LCD_COMMAND);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2101      	movs	r1, #1
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fef0 	bl	80015da <LCD_I2C_Write>
	LCD_I2C_Delay(5);
 80017fa:	2005      	movs	r0, #5
 80017fc:	f7ff fee0 	bl	80015c0 <LCD_I2C_Delay>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <LCD_I2C_WriteChar>:
void LCD_I2C_Return_Home(LCD_I2C_DEVICE* LCD){
	LCD_I2C_Write(LCD, LCD_RETURN_HOME, LCD_COMMAND);
	LCD_I2C_Delay(5);
}
void LCD_I2C_WriteChar(  LCD_I2C_DEVICE* LCD,char character){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
	LCD_I2C_Write(LCD, character, LCD_DATA);
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fedd 	bl	80015da <LCD_I2C_Write>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <LCD_I2C_WriteString>:

void LCD_I2C_WriteString( LCD_I2C_DEVICE* LCD, char *String){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	while(*String)   LCD_I2C_WriteChar(LCD, *String++);
 8001832:	e007      	b.n	8001844 <LCD_I2C_WriteString+0x1c>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	603a      	str	r2, [r7, #0]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffe2 	bl	8001808 <LCD_I2C_WriteChar>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f3      	bne.n	8001834 <LCD_I2C_WriteString+0xc>
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f000 fd92 	bl	8002384 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001860:	f000 f836 	bl	80018d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001864:	f000 f914 	bl	8001a90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001868:	f000 f86e 	bl	8001948 <MX_I2C1_Init>
  MX_TIM2_Init();
 800186c:	f000 f89a 	bl	80019a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001870:	f000 f8e4 	bl	8001a3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8001874:	480f      	ldr	r0, [pc, #60]	; (80018b4 <main+0x5c>)
 8001876:	f002 feb3 	bl	80045e0 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2 , &data , 1) ;
 800187a:	2201      	movs	r2, #1
 800187c:	490e      	ldr	r1, [pc, #56]	; (80018b8 <main+0x60>)
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <main+0x64>)
 8001880:	f003 fae9 	bl	8004e56 <HAL_UART_Receive_IT>
	//creat scheduler with tick = 10ms
	Scheduler_Init(&scheduler, 10);
 8001884:	210a      	movs	r1, #10
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <main+0x68>)
 8001888:	f000 f937 	bl	8001afa <Scheduler_Init>
	Scan_Address_Device(&hi2c1);
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <main+0x6c>)
 800188e:	f7ff fd3d 	bl	800130c <Scan_Address_Device>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	Scheduler_Add_Task(&scheduler, fsm_system, 0, 10);
 8001892:	230a      	movs	r3, #10
 8001894:	2200      	movs	r2, #0
 8001896:	490c      	ldr	r1, [pc, #48]	; (80018c8 <main+0x70>)
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <main+0x68>)
 800189a:	f000 f983 	bl	8001ba4 <Scheduler_Add_Task>
	Scheduler_Add_Task(&scheduler, Get_command, 0, 10);
 800189e:	230a      	movs	r3, #10
 80018a0:	2200      	movs	r2, #0
 80018a2:	490a      	ldr	r1, [pc, #40]	; (80018cc <main+0x74>)
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <main+0x68>)
 80018a6:	f000 f97d 	bl	8001ba4 <Scheduler_Add_Task>
  while (1)
  {


	  Scheduler_Dispatch_Task(&scheduler);
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <main+0x68>)
 80018ac:	f000 fa3a 	bl	8001d24 <Scheduler_Dispatch_Task>
 80018b0:	e7fb      	b.n	80018aa <main+0x52>
 80018b2:	bf00      	nop
 80018b4:	20000650 	.word	0x20000650
 80018b8:	200002d1 	.word	0x200002d1
 80018bc:	2000028c 	.word	0x2000028c
 80018c0:	20000324 	.word	0x20000324
 80018c4:	200001fc 	.word	0x200001fc
 80018c8:	08001489 	.word	0x08001489
 80018cc:	08000f45 	.word	0x08000f45

080018d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b090      	sub	sp, #64	; 0x40
 80018d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d6:	f107 0318 	add.w	r3, r7, #24
 80018da:	2228      	movs	r2, #40	; 0x28
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 fef2 	bl	80056c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f6:	2301      	movs	r3, #1
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018fa:	2310      	movs	r3, #16
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fa00 	bl	8003d0c <HAL_RCC_OscConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001912:	f000 f8ed 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001916:	230f      	movs	r3, #15
 8001918:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fc6e 	bl	8004210 <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800193a:	f000 f8d9 	bl	8001af0 <Error_Handler>
  }
}
 800193e:	bf00      	nop
 8001940:	3740      	adds	r7, #64	; 0x40
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_I2C1_Init+0x54>)
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <MX_I2C1_Init+0x58>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 5000;
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <MX_I2C1_Init+0x54>)
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_I2C1_Init+0x54>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_I2C1_Init+0x54>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <MX_I2C1_Init+0x54>)
 8001968:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_I2C1_Init+0x54>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_I2C1_Init+0x54>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_I2C1_Init+0x54>)
 800197c:	2200      	movs	r2, #0
 800197e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_I2C1_Init+0x54>)
 8001982:	2200      	movs	r2, #0
 8001984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_I2C1_Init+0x54>)
 8001988:	f001 f8c4 	bl	8002b14 <HAL_I2C_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001992:	f000 f8ad 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200001fc 	.word	0x200001fc
 80019a0:	40005400 	.word	0x40005400

080019a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MX_TIM2_Init+0x94>)
 80019c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_TIM2_Init+0x94>)
 80019ca:	220a      	movs	r2, #10
 80019cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_TIM2_Init+0x94>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_TIM2_Init+0x94>)
 80019d6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_TIM2_Init+0x94>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <MX_TIM2_Init+0x94>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <MX_TIM2_Init+0x94>)
 80019ea:	f002 fda9 	bl	8004540 <HAL_TIM_Base_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019f4:	f000 f87c 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <MX_TIM2_Init+0x94>)
 8001a06:	f002 ff45 	bl	8004894 <HAL_TIM_ConfigClockSource>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a10:	f000 f86e 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_TIM2_Init+0x94>)
 8001a22:	f003 f917 	bl	8004c54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a2c:	f000 f860 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000650 	.word	0x20000650

08001a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <MX_USART2_UART_Init+0x50>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_USART2_UART_Init+0x4c>)
 8001a74:	f003 f95e 	bl	8004d34 <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a7e:	f000 f837 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000028c 	.word	0x2000028c
 8001a8c:	40004400 	.word	0x40004400

08001a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_GPIO_Init+0x40>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <MX_GPIO_Init+0x40>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6193      	str	r3, [r2, #24]
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_GPIO_Init+0x40>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_GPIO_Init+0x40>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <MX_GPIO_Init+0x40>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <MX_GPIO_Init+0x40>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	Scheduler_Update(&scheduler);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001ade:	f000 f8b9 	bl	8001c54 <Scheduler_Update>

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000324 	.word	0x20000324

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>

08001afa <Scheduler_Init>:

#include "scheduler.h"



void Scheduler_Init(Scheduler* scheduler,uint32_t Tick){
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
    scheduler->CurrentSize = 0;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
    scheduler->Tick = Tick;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	601a      	str	r2, [r3, #0]
    scheduler->Error = NORMAL;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
    // init an array with 0;
    for(int i = 0; i < MAX_TASK; ++i){
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e039      	b.n	8001b92 <Scheduler_Init+0x98>
        scheduler->Tasks[scheduler->CurrentSize].pfunction = 0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3308      	adds	r3, #8
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
		scheduler->Tasks[scheduler->CurrentSize].Delay = 0;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	330c      	adds	r3, #12
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
		scheduler->Tasks[scheduler->CurrentSize].Period = 0;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3310      	adds	r3, #16
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
		scheduler->Tasks[scheduler->CurrentSize].Run = 0;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3314      	adds	r3, #20
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		scheduler->Tasks[scheduler->CurrentSize].Task_ID = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	3318      	adds	r3, #24
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < MAX_TASK; ++i){
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b27      	cmp	r3, #39	; 0x27
 8001b96:	ddc2      	ble.n	8001b1e <Scheduler_Init+0x24>
    }

}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <Scheduler_Add_Task>:
uint32_t Scheduler_Add_Task(Scheduler* scheduler,void (*pfunction)(),uint32_t delay, uint32_t period){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
    // add in normal
    if(scheduler->CurrentSize < MAX_TASK){
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b27      	cmp	r3, #39	; 0x27
 8001bb8:	d840      	bhi.n	8001c3c <Scheduler_Add_Task+0x98>
        //assign new task to CurrentSize position;
        //we increase CurrentSize to 1;
		scheduler->Tasks[scheduler->CurrentSize].pfunction = pfunction;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	68f9      	ldr	r1, [r7, #12]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	3308      	adds	r3, #8
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	601a      	str	r2, [r3, #0]
		scheduler->Tasks[scheduler->CurrentSize].Delay = delay;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	330c      	adds	r3, #12
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]
		scheduler->Tasks[scheduler->CurrentSize].Period = period;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3310      	adds	r3, #16
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]
		scheduler->Tasks[scheduler->CurrentSize].Run = 0;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3314      	adds	r3, #20
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
		scheduler->Tasks[scheduler->CurrentSize].Task_ID = scheduler->CurrentSize;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4403      	add	r3, r0
 8001c26:	3318      	adds	r3, #24
 8001c28:	6019      	str	r1, [r3, #0]
		scheduler->CurrentSize++;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]
		return scheduler->Error;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8001c3a:	e006      	b.n	8001c4a <Scheduler_Add_Task+0xa6>
	}
    //overflow
    // get error
	else{
		scheduler->Error = ERROR_SCHEDULER_TOO_MANY_TASK;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
		return scheduler->Error;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
	}
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <Scheduler_Update>:


//callback after each Tick (s)
void Scheduler_Update(Scheduler* scheduler){
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    for(int index = 0 ; index  < scheduler->CurrentSize ; ++index){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e055      	b.n	8001d0e <Scheduler_Update+0xba>
		if(scheduler->Tasks[index].Delay > 0){
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	330c      	adds	r3, #12
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <Scheduler_Update+0x50>
			scheduler->Tasks[index].Delay -= scheduler->Tick;
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	330c      	adds	r3, #12
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1ad1      	subs	r1, r2, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4403      	add	r3, r0
 8001c9e:	330c      	adds	r3, #12
 8001ca0:	6019      	str	r1, [r3, #0]
 8001ca2:	e031      	b.n	8001d08 <Scheduler_Update+0xb4>
		}
		else{
			scheduler->Tasks[index].Run += 1;
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3314      	adds	r3, #20
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	b2d8      	uxtb	r0, r3
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3314      	adds	r3, #20
 8001cca:	4602      	mov	r2, r0
 8001ccc:	701a      	strb	r2, [r3, #0]
			if(scheduler->Tasks[index].Period > 0){
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3310      	adds	r3, #16
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d011      	beq.n	8001d08 <Scheduler_Update+0xb4>
				scheduler->Tasks[index].Delay = scheduler->Tasks[index].Period;
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3310      	adds	r3, #16
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4403      	add	r3, r0
 8001d04:	330c      	adds	r3, #12
 8001d06:	6019      	str	r1, [r3, #0]
    for(int index = 0 ; index  < scheduler->CurrentSize ; ++index){
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8a4      	bhi.n	8001c62 <Scheduler_Update+0xe>
			}
		}
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <Scheduler_Dispatch_Task>:


// this function place in while(1), execute the function which need to run(Run = 1); delete task has period = 0 after this task completely run.
void Scheduler_Dispatch_Task(Scheduler* scheduler){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
    for(int index = 0 ; index  < scheduler->CurrentSize; ++index){
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e03c      	b.n	8001dac <Scheduler_Dispatch_Task+0x88>
		if(scheduler->Tasks[index].Run >0){
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3314      	adds	r3, #20
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d02e      	beq.n	8001da6 <Scheduler_Dispatch_Task+0x82>
			(*scheduler->Tasks[index].pfunction)();
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3308      	adds	r3, #8
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4798      	blx	r3
			scheduler->Tasks[index].Run -= 1;
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b2d8      	uxtb	r0, r3
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	3314      	adds	r3, #20
 8001d82:	4602      	mov	r2, r0
 8001d84:	701a      	strb	r2, [r3, #0]
			if(scheduler->Tasks[index].Period == 0){
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	3310      	adds	r3, #16
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <Scheduler_Dispatch_Task+0x82>
				Scheduler_Delete_Task(scheduler,index);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f80d 	bl	8001dc0 <Scheduler_Delete_Task>
    for(int index = 0 ; index  < scheduler->CurrentSize; ++index){
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d8bd      	bhi.n	8001d32 <Scheduler_Dispatch_Task+0xe>
			}
		}
	}
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <Scheduler_Delete_Task>:

uint32_t Scheduler_Delete_Task(Scheduler* scheduler, uint32_t task_ID){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    // scheduler had no task to delete or the position ,which need to be deleted, is over the CurrentSize
    if(task_ID >= scheduler->CurrentSize || scheduler->CurrentSize <= 0){
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d203      	bcs.n	8001ddc <Scheduler_Delete_Task+0x1c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <Scheduler_Delete_Task+0x2c>
		scheduler->Error = ERROR_NO_TASK_TO_DELETE ;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
		return scheduler->Error;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8001dea:	e0a6      	b.n	8001f3a <Scheduler_Delete_Task+0x17a>
	}
    //delete this task
	else{
			for(int index = task_ID ; index < scheduler->CurrentSize - 1; ++index){
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e059      	b.n	8001ea6 <Scheduler_Delete_Task+0xe6>
				scheduler->Tasks[index].pfunction = scheduler->Tasks[index + 1].pfunction;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	3308      	adds	r3, #8
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4403      	add	r3, r0
 8001e14:	3308      	adds	r3, #8
 8001e16:	6019      	str	r1, [r3, #0]
				scheduler->Tasks[index].Delay = scheduler->Tasks[index + 1].Delay;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	330c      	adds	r3, #12
 8001e2a:	6819      	ldr	r1, [r3, #0]
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4403      	add	r3, r0
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	6019      	str	r1, [r3, #0]
				scheduler->Tasks[index].Period = scheduler->Tasks[index + 1].Period;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3310      	adds	r3, #16
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4403      	add	r3, r0
 8001e60:	3310      	adds	r3, #16
 8001e62:	6019      	str	r1, [r3, #0]
				scheduler->Tasks[index].Run = scheduler->Tasks[index + 1].Run;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	3314      	adds	r3, #20
 8001e76:	7818      	ldrb	r0, [r3, #0]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	3314      	adds	r3, #20
 8001e88:	4602      	mov	r2, r0
 8001e8a:	701a      	strb	r2, [r3, #0]
				scheduler->Tasks[index].Task_ID = index;
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4403      	add	r3, r0
 8001e9c:	3318      	adds	r3, #24
 8001e9e:	6019      	str	r1, [r3, #0]
			for(int index = task_ID ; index < scheduler->CurrentSize - 1; ++index){
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d89f      	bhi.n	8001df2 <Scheduler_Delete_Task+0x32>
			}
			scheduler->Tasks[scheduler->CurrentSize - 1].pfunction =0x0000;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	1e5a      	subs	r2, r3, #1
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
			scheduler->Tasks[scheduler->CurrentSize - 1].Delay = 0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	330c      	adds	r3, #12
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
			scheduler->Tasks[scheduler->CurrentSize - 1].Period = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	1e5a      	subs	r2, r3, #1
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
			scheduler->Tasks[scheduler->CurrentSize - 1].Run = 0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	1e5a      	subs	r2, r3, #1
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3314      	adds	r3, #20
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
			scheduler->Tasks[scheduler->CurrentSize - 1].Task_ID = 0;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	1e5a      	subs	r2, r3, #1
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3318      	adds	r3, #24
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
			scheduler->CurrentSize--;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	605a      	str	r2, [r3, #4]
		return scheduler->Error;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
	}
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6193      	str	r3, [r2, #24]
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_MspInit+0x5c>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_MspInit+0x60>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_MspInit+0x60>)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_I2C_MspInit+0x90>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d132      	bne.n	800202e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_I2C_MspInit+0x94>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_I2C_MspInit+0x94>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_I2C_MspInit+0x94>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fe0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe6:	2312      	movs	r3, #18
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4812      	ldr	r0, [pc, #72]	; (8002040 <HAL_I2C_MspInit+0x98>)
 8001ff6:	f000 fc09 	bl	800280c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_I2C_MspInit+0x9c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_I2C_MspInit+0x9c>)
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_I2C_MspInit+0x94>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_I2C_MspInit+0x94>)
 800201c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002020:	61d3      	str	r3, [r2, #28]
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_I2C_MspInit+0x94>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40005400 	.word	0x40005400
 800203c:	40021000 	.word	0x40021000
 8002040:	40010c00 	.word	0x40010c00
 8002044:	40010000 	.word	0x40010000

08002048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d113      	bne.n	8002082 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_TIM_Base_MspInit+0x44>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_TIM_Base_MspInit+0x44>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_TIM_Base_MspInit+0x44>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	201c      	movs	r0, #28
 8002078:	f000 fae1 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800207c:	201c      	movs	r0, #28
 800207e:	f000 fafa 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_UART_MspInit+0x98>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d137      	bne.n	8002120 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ba:	61d3      	str	r3, [r2, #28]
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020e0:	2304      	movs	r3, #4
 80020e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4619      	mov	r1, r3
 80020f2:	480f      	ldr	r0, [pc, #60]	; (8002130 <HAL_UART_MspInit+0xa0>)
 80020f4:	f000 fb8a 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020f8:	2308      	movs	r3, #8
 80020fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	4809      	ldr	r0, [pc, #36]	; (8002130 <HAL_UART_MspInit+0xa0>)
 800210c:	f000 fb7e 	bl	800280c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	2026      	movs	r0, #38	; 0x26
 8002116:	f000 fa92 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800211a:	2026      	movs	r0, #38	; 0x26
 800211c:	f000 faab 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002120:	bf00      	nop
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40004400 	.word	0x40004400
 800212c:	40021000 	.word	0x40021000
 8002130:	40010800 	.word	0x40010800

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <NMI_Handler+0x4>

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <UsageFault_Handler+0x4>

08002152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217a:	f000 f949 	bl	8002410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <TIM2_IRQHandler+0x10>)
 800218a:	f002 fa7b 	bl	8004684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000650 	.word	0x20000650

08002198 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <USART2_IRQHandler+0x10>)
 800219e:	f002 fe8b 	bl	8004eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000028c 	.word	0x2000028c

080021ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <_kill>:

int _kill(int pid, int sig)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021c4:	f003 fa56 	bl	8005674 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2216      	movs	r2, #22
 80021cc:	601a      	str	r2, [r3, #0]
  return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_exit>:

void _exit (int status)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e2:	f04f 31ff 	mov.w	r1, #4294967295
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffe7 	bl	80021ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ec:	e7fe      	b.n	80021ec <_exit+0x12>

080021ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e00a      	b.n	8002216 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002200:	f3af 8000 	nop.w
 8002204:	4601      	mov	r1, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	60ba      	str	r2, [r7, #8]
 800220c:	b2ca      	uxtb	r2, r1
 800220e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	dbf0      	blt.n	8002200 <_read+0x12>
  }

  return len;
 800221e:	687b      	ldr	r3, [r7, #4]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e009      	b.n	800224e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	60ba      	str	r2, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	dbf1      	blt.n	800223a <_write+0x12>
  }
  return len;
 8002256:	687b      	ldr	r3, [r7, #4]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_close>:

int _close(int file)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002286:	605a      	str	r2, [r3, #4]
  return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <_isatty>:

int _isatty(int file)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f003 f9c0 	bl	8005674 <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20005000 	.word	0x20005000
 8002320:	00000400 	.word	0x00000400
 8002324:	20000698 	.word	0x20000698
 8002328:	200006b0 	.word	0x200006b0

0800232c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800233a:	490d      	ldr	r1, [pc, #52]	; (8002370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002350:	4c0a      	ldr	r4, [pc, #40]	; (800237c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800235e:	f7ff ffe5 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f003 f98d 	bl	8005680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002366:	f7ff fa77 	bl	8001858 <main>
  bx lr
 800236a:	4770      	bx	lr
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002374:	08008934 	.word	0x08008934
  ldr r2, =_sbss
 8002378:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800237c:	200006b0 	.word	0x200006b0

08002380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC1_2_IRQHandler>
	...

08002384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_Init+0x28>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_Init+0x28>)
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002394:	2003      	movs	r0, #3
 8002396:	f000 f947 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239a:	200f      	movs	r0, #15
 800239c:	f000 f808 	bl	80023b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a0:	f7ff fdd0 	bl	8001f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40022000 	.word	0x40022000

080023b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_InitTick+0x54>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_InitTick+0x58>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 f95f 	bl	8002692 <HAL_SYSTICK_Config>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e00e      	b.n	80023fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b0f      	cmp	r3, #15
 80023e2:	d80a      	bhi.n	80023fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e4:	2200      	movs	r2, #0
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f000 f927 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f0:	4a06      	ldr	r2, [pc, #24]	; (800240c <HAL_InitTick+0x5c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000004 	.word	0x20000004
 8002408:	2000000c 	.word	0x2000000c
 800240c:	20000008 	.word	0x20000008

08002410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_IncTick+0x1c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_IncTick+0x20>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4413      	add	r3, r2
 8002420:	4a03      	ldr	r2, [pc, #12]	; (8002430 <HAL_IncTick+0x20>)
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	2000000c 	.word	0x2000000c
 8002430:	2000069c 	.word	0x2000069c

08002434 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b02      	ldr	r3, [pc, #8]	; (8002444 <HAL_GetTick+0x10>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	2000069c 	.word	0x2000069c

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff fff0 	bl	8002434 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_Delay+0x44>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800246e:	bf00      	nop
 8002470:	f7ff ffe0 	bl	8002434 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000000c 	.word	0x2000000c

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4906      	ldr	r1, [pc, #24]	; (8002528 <__NVIC_EnableIRQ+0x34>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff90 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff2d 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff42 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff90 	bl	8002580 <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5f 	bl	800252c <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff35 	bl	80024f4 <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d008      	beq.n	80026d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2204      	movs	r2, #4
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e020      	b.n	8002714 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020e 	bic.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
	...

08002720 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002732:	2b02      	cmp	r3, #2
 8002734:	d005      	beq.n	8002742 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2204      	movs	r2, #4
 800273a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e051      	b.n	80027e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 020e 	bic.w	r2, r2, #14
 8002750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_DMA_Abort_IT+0xd0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d029      	beq.n	80027c0 <HAL_DMA_Abort_IT+0xa0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <HAL_DMA_Abort_IT+0xd4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d022      	beq.n	80027bc <HAL_DMA_Abort_IT+0x9c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_DMA_Abort_IT+0xd8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d01a      	beq.n	80027b6 <HAL_DMA_Abort_IT+0x96>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_DMA_Abort_IT+0xdc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d012      	beq.n	80027b0 <HAL_DMA_Abort_IT+0x90>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_DMA_Abort_IT+0xe0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00a      	beq.n	80027aa <HAL_DMA_Abort_IT+0x8a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_DMA_Abort_IT+0xe4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d102      	bne.n	80027a4 <HAL_DMA_Abort_IT+0x84>
 800279e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027a2:	e00e      	b.n	80027c2 <HAL_DMA_Abort_IT+0xa2>
 80027a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a8:	e00b      	b.n	80027c2 <HAL_DMA_Abort_IT+0xa2>
 80027aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ae:	e008      	b.n	80027c2 <HAL_DMA_Abort_IT+0xa2>
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	e005      	b.n	80027c2 <HAL_DMA_Abort_IT+0xa2>
 80027b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ba:	e002      	b.n	80027c2 <HAL_DMA_Abort_IT+0xa2>
 80027bc:	2310      	movs	r3, #16
 80027be:	e000      	b.n	80027c2 <HAL_DMA_Abort_IT+0xa2>
 80027c0:	2301      	movs	r3, #1
 80027c2:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_DMA_Abort_IT+0xe8>)
 80027c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
    } 
  }
  return status;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40020008 	.word	0x40020008
 80027f4:	4002001c 	.word	0x4002001c
 80027f8:	40020030 	.word	0x40020030
 80027fc:	40020044 	.word	0x40020044
 8002800:	40020058 	.word	0x40020058
 8002804:	4002006c 	.word	0x4002006c
 8002808:	40020000 	.word	0x40020000

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b08b      	sub	sp, #44	; 0x2c
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281e:	e169      	b.n	8002af4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002820:	2201      	movs	r2, #1
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 8158 	bne.w	8002aee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a9a      	ldr	r2, [pc, #616]	; (8002aac <HAL_GPIO_Init+0x2a0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d05e      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002848:	4a98      	ldr	r2, [pc, #608]	; (8002aac <HAL_GPIO_Init+0x2a0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d875      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800284e:	4a98      	ldr	r2, [pc, #608]	; (8002ab0 <HAL_GPIO_Init+0x2a4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d058      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002854:	4a96      	ldr	r2, [pc, #600]	; (8002ab0 <HAL_GPIO_Init+0x2a4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d86f      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800285a:	4a96      	ldr	r2, [pc, #600]	; (8002ab4 <HAL_GPIO_Init+0x2a8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d052      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002860:	4a94      	ldr	r2, [pc, #592]	; (8002ab4 <HAL_GPIO_Init+0x2a8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d869      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002866:	4a94      	ldr	r2, [pc, #592]	; (8002ab8 <HAL_GPIO_Init+0x2ac>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d04c      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 800286c:	4a92      	ldr	r2, [pc, #584]	; (8002ab8 <HAL_GPIO_Init+0x2ac>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d863      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002872:	4a92      	ldr	r2, [pc, #584]	; (8002abc <HAL_GPIO_Init+0x2b0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d046      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002878:	4a90      	ldr	r2, [pc, #576]	; (8002abc <HAL_GPIO_Init+0x2b0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d85d      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800287e:	2b12      	cmp	r3, #18
 8002880:	d82a      	bhi.n	80028d8 <HAL_GPIO_Init+0xcc>
 8002882:	2b12      	cmp	r3, #18
 8002884:	d859      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002886:	a201      	add	r2, pc, #4	; (adr r2, 800288c <HAL_GPIO_Init+0x80>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	08002907 	.word	0x08002907
 8002890:	080028e1 	.word	0x080028e1
 8002894:	080028f3 	.word	0x080028f3
 8002898:	08002935 	.word	0x08002935
 800289c:	0800293b 	.word	0x0800293b
 80028a0:	0800293b 	.word	0x0800293b
 80028a4:	0800293b 	.word	0x0800293b
 80028a8:	0800293b 	.word	0x0800293b
 80028ac:	0800293b 	.word	0x0800293b
 80028b0:	0800293b 	.word	0x0800293b
 80028b4:	0800293b 	.word	0x0800293b
 80028b8:	0800293b 	.word	0x0800293b
 80028bc:	0800293b 	.word	0x0800293b
 80028c0:	0800293b 	.word	0x0800293b
 80028c4:	0800293b 	.word	0x0800293b
 80028c8:	0800293b 	.word	0x0800293b
 80028cc:	0800293b 	.word	0x0800293b
 80028d0:	080028e9 	.word	0x080028e9
 80028d4:	080028fd 	.word	0x080028fd
 80028d8:	4a79      	ldr	r2, [pc, #484]	; (8002ac0 <HAL_GPIO_Init+0x2b4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028de:	e02c      	b.n	800293a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e029      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	3304      	adds	r3, #4
 80028ee:	623b      	str	r3, [r7, #32]
          break;
 80028f0:	e024      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	3308      	adds	r3, #8
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e01f      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	330c      	adds	r3, #12
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e01a      	b.n	800293c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800290e:	2304      	movs	r3, #4
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e013      	b.n	800293c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800291c:	2308      	movs	r3, #8
 800291e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	611a      	str	r2, [r3, #16]
          break;
 8002926:	e009      	b.n	800293c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002928:	2308      	movs	r3, #8
 800292a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	615a      	str	r2, [r3, #20]
          break;
 8002932:	e003      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x130>
          break;
 800293a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2bff      	cmp	r3, #255	; 0xff
 8002940:	d801      	bhi.n	8002946 <HAL_GPIO_Init+0x13a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	e001      	b.n	800294a <HAL_GPIO_Init+0x13e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	d802      	bhi.n	8002958 <HAL_GPIO_Init+0x14c>
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x152>
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	3b08      	subs	r3, #8
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	210f      	movs	r1, #15
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	401a      	ands	r2, r3
 8002970:	6a39      	ldr	r1, [r7, #32]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	431a      	orrs	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80b1 	beq.w	8002aee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800298c:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_GPIO_Init+0x2b8>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a4c      	ldr	r2, [pc, #304]	; (8002ac4 <HAL_GPIO_Init+0x2b8>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_GPIO_Init+0x2b8>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a4:	4a48      	ldr	r2, [pc, #288]	; (8002ac8 <HAL_GPIO_Init+0x2bc>)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a40      	ldr	r2, [pc, #256]	; (8002acc <HAL_GPIO_Init+0x2c0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d013      	beq.n	80029f8 <HAL_GPIO_Init+0x1ec>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3f      	ldr	r2, [pc, #252]	; (8002ad0 <HAL_GPIO_Init+0x2c4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00d      	beq.n	80029f4 <HAL_GPIO_Init+0x1e8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a3e      	ldr	r2, [pc, #248]	; (8002ad4 <HAL_GPIO_Init+0x2c8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a3d      	ldr	r2, [pc, #244]	; (8002ad8 <HAL_GPIO_Init+0x2cc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_GPIO_Init+0x1e0>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e006      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029ec:	2304      	movs	r3, #4
 80029ee:	e004      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f8:	2300      	movs	r3, #0
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	f002 0203 	and.w	r2, r2, #3
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	4093      	lsls	r3, r2
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a0a:	492f      	ldr	r1, [pc, #188]	; (8002ac8 <HAL_GPIO_Init+0x2bc>)
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d006      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	492c      	ldr	r1, [pc, #176]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a32:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	4928      	ldr	r1, [pc, #160]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4922      	ldr	r1, [pc, #136]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	491e      	ldr	r1, [pc, #120]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	4918      	ldr	r1, [pc, #96]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	4914      	ldr	r1, [pc, #80]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d021      	beq.n	8002ae0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	490e      	ldr	r1, [pc, #56]	; (8002adc <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
 8002aa8:	e021      	b.n	8002aee <HAL_GPIO_Init+0x2e2>
 8002aaa:	bf00      	nop
 8002aac:	10320000 	.word	0x10320000
 8002ab0:	10310000 	.word	0x10310000
 8002ab4:	10220000 	.word	0x10220000
 8002ab8:	10210000 	.word	0x10210000
 8002abc:	10120000 	.word	0x10120000
 8002ac0:	10110000 	.word	0x10110000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40010800 	.word	0x40010800
 8002ad0:	40010c00 	.word	0x40010c00
 8002ad4:	40011000 	.word	0x40011000
 8002ad8:	40011400 	.word	0x40011400
 8002adc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_GPIO_Init+0x304>)
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	4909      	ldr	r1, [pc, #36]	; (8002b10 <HAL_GPIO_Init+0x304>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f47f ae8e 	bne.w	8002820 <HAL_GPIO_Init+0x14>
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	372c      	adds	r7, #44	; 0x2c
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e12b      	b.n	8002d7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff fa34 	bl	8001fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2224      	movs	r2, #36	; 0x24
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b78:	f001 fc9c 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8002b7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4a81      	ldr	r2, [pc, #516]	; (8002d88 <HAL_I2C_Init+0x274>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d807      	bhi.n	8002b98 <HAL_I2C_Init+0x84>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a80      	ldr	r2, [pc, #512]	; (8002d8c <HAL_I2C_Init+0x278>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	bf94      	ite	ls
 8002b90:	2301      	movls	r3, #1
 8002b92:	2300      	movhi	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e006      	b.n	8002ba6 <HAL_I2C_Init+0x92>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a7d      	ldr	r2, [pc, #500]	; (8002d90 <HAL_I2C_Init+0x27c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	bf94      	ite	ls
 8002ba0:	2301      	movls	r3, #1
 8002ba2:	2300      	movhi	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0e7      	b.n	8002d7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a78      	ldr	r2, [pc, #480]	; (8002d94 <HAL_I2C_Init+0x280>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9b      	lsrs	r3, r3, #18
 8002bb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <HAL_I2C_Init+0x274>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d802      	bhi.n	8002be8 <HAL_I2C_Init+0xd4>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3301      	adds	r3, #1
 8002be6:	e009      	b.n	8002bfc <HAL_I2C_Init+0xe8>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	4a69      	ldr	r2, [pc, #420]	; (8002d98 <HAL_I2C_Init+0x284>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	495c      	ldr	r1, [pc, #368]	; (8002d88 <HAL_I2C_Init+0x274>)
 8002c18:	428b      	cmp	r3, r1
 8002c1a:	d819      	bhi.n	8002c50 <HAL_I2C_Init+0x13c>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e59      	subs	r1, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c2a:	1c59      	adds	r1, r3, #1
 8002c2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c30:	400b      	ands	r3, r1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_I2C_Init+0x138>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e59      	subs	r1, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4a:	e051      	b.n	8002cf0 <HAL_I2C_Init+0x1dc>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	e04f      	b.n	8002cf0 <HAL_I2C_Init+0x1dc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d111      	bne.n	8002c7c <HAL_I2C_Init+0x168>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1e58      	subs	r0, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	440b      	add	r3, r1
 8002c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e012      	b.n	8002ca2 <HAL_I2C_Init+0x18e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e58      	subs	r0, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	0099      	lsls	r1, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Init+0x196>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e022      	b.n	8002cf0 <HAL_I2C_Init+0x1dc>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_I2C_Init+0x1bc>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1e58      	subs	r0, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6859      	ldr	r1, [r3, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	440b      	add	r3, r1
 8002cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cce:	e00f      	b.n	8002cf0 <HAL_I2C_Init+0x1dc>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e58      	subs	r0, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	0099      	lsls	r1, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	6809      	ldr	r1, [r1, #0]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6911      	ldr	r1, [r2, #16]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68d2      	ldr	r2, [r2, #12]
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	000186a0 	.word	0x000186a0
 8002d8c:	001e847f 	.word	0x001e847f
 8002d90:	003d08ff 	.word	0x003d08ff
 8002d94:	431bde83 	.word	0x431bde83
 8002d98:	10624dd3 	.word	0x10624dd3

08002d9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	461a      	mov	r2, r3
 8002da8:	460b      	mov	r3, r1
 8002daa:	817b      	strh	r3, [r7, #10]
 8002dac:	4613      	mov	r3, r2
 8002dae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff fb40 	bl	8002434 <HAL_GetTick>
 8002db4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	f040 80e0 	bne.w	8002f84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2319      	movs	r3, #25
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4970      	ldr	r1, [pc, #448]	; (8002f90 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fdc0 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e0d3      	b.n	8002f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_I2C_Master_Transmit+0x50>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0cc      	b.n	8002f86 <HAL_I2C_Master_Transmit+0x1ea>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d007      	beq.n	8002e12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2221      	movs	r2, #33	; 0x21
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	893a      	ldrh	r2, [r7, #8]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a50      	ldr	r2, [pc, #320]	; (8002f94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	6a3a      	ldr	r2, [r7, #32]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fc2a 	bl	80036b4 <I2C_MasterRequestWrite>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e08d      	b.n	8002f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e80:	e066      	b.n	8002f50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	6a39      	ldr	r1, [r7, #32]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fe3a 	bl	8003b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00d      	beq.n	8002eae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d107      	bne.n	8002eaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e06b      	b.n	8002f86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d11b      	bne.n	8002f24 <HAL_I2C_Master_Transmit+0x188>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d017      	beq.n	8002f24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	781a      	ldrb	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	6a39      	ldr	r1, [r7, #32]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fe2a 	bl	8003b82 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00d      	beq.n	8002f50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d107      	bne.n	8002f4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e01a      	b.n	8002f86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d194      	bne.n	8002e82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	00100002 	.word	0x00100002
 8002f94:	ffff0000 	.word	0xffff0000

08002f98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	817b      	strh	r3, [r7, #10]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7ff fa40 	bl	8002434 <HAL_GetTick>
 8002fb4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	f040 823f 	bne.w	8003442 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2319      	movs	r3, #25
 8002fca:	2201      	movs	r2, #1
 8002fcc:	497f      	ldr	r1, [pc, #508]	; (80031cc <HAL_I2C_Master_Receive+0x234>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fcc0 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e232      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2C_Master_Receive+0x54>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e22b      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d007      	beq.n	8003012 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003020:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2222      	movs	r2, #34	; 0x22
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2210      	movs	r2, #16
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	893a      	ldrh	r2, [r7, #8]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a5f      	ldr	r2, [pc, #380]	; (80031d0 <HAL_I2C_Master_Receive+0x238>)
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fbac 	bl	80037b8 <I2C_MasterRequestRead>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1ec      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	d113      	bne.n	800309a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e1c0      	b.n	800341c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d11e      	bne.n	80030e0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030b2:	b672      	cpsid	i
}
 80030b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030dc:	b662      	cpsie	i
}
 80030de:	e035      	b.n	800314c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d11e      	bne.n	8003126 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
}
 80030fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003120:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003122:	b662      	cpsie	i
}
 8003124:	e012      	b.n	800314c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800314c:	e166      	b.n	800341c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	2b03      	cmp	r3, #3
 8003154:	f200 811f 	bhi.w	8003396 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b01      	cmp	r3, #1
 800315e:	d123      	bne.n	80031a8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fd4d 	bl	8003c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e167      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031a6:	e139      	b.n	800341c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d152      	bne.n	8003256 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	2200      	movs	r2, #0
 80031b8:	4906      	ldr	r1, [pc, #24]	; (80031d4 <HAL_I2C_Master_Receive+0x23c>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fbca 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e13c      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
 80031ca:	bf00      	nop
 80031cc:	00100002 	.word	0x00100002
 80031d0:	ffff0000 	.word	0xffff0000
 80031d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800321e:	b662      	cpsie	i
}
 8003220:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003254:	e0e2      	b.n	800341c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	2200      	movs	r2, #0
 800325e:	497b      	ldr	r1, [pc, #492]	; (800344c <HAL_I2C_Master_Receive+0x4b4>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fb77 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0e9      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003280:	b672      	cpsid	i
}
 8003282:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032b6:	4b66      	ldr	r3, [pc, #408]	; (8003450 <HAL_I2C_Master_Receive+0x4b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	08db      	lsrs	r3, r3, #3
 80032bc:	4a65      	ldr	r2, [pc, #404]	; (8003454 <HAL_I2C_Master_Receive+0x4bc>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0a1a      	lsrs	r2, r3, #8
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00da      	lsls	r2, r3, #3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d118      	bne.n	800330e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80032fe:	b662      	cpsie	i
}
 8003300:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e09a      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d1d9      	bne.n	80032d0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800335e:	b662      	cpsie	i
}
 8003360:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003394:	e042      	b.n	800341c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fc32 	bl	8003c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e04c      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d118      	bne.n	800341c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	f47f ae94 	bne.w	800314e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3728      	adds	r7, #40	; 0x28
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	00010004 	.word	0x00010004
 8003450:	20000004 	.word	0x20000004
 8003454:	14f8b589 	.word	0x14f8b589

08003458 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	460b      	mov	r3, r1
 8003466:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7fe ffe4 	bl	8002434 <HAL_GetTick>
 800346c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b20      	cmp	r3, #32
 800347c:	f040 8111 	bne.w	80036a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2319      	movs	r3, #25
 8003486:	2201      	movs	r2, #1
 8003488:	4988      	ldr	r1, [pc, #544]	; (80036ac <HAL_I2C_IsDeviceReady+0x254>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fa62 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
 8003498:	e104      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_I2C_IsDeviceReady+0x50>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0fd      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x24c>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d007      	beq.n	80034ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2224      	movs	r2, #36	; 0x24
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a70      	ldr	r2, [pc, #448]	; (80036b0 <HAL_I2C_IsDeviceReady+0x258>)
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003500:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fa20 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003528:	d103      	bne.n	8003532 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0b6      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003544:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003546:	f7fe ff75 	bl	8002434 <HAL_GetTick>
 800354a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800357a:	e025      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800357c:	f7fe ff5a 	bl	8002434 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d302      	bcc.n	8003592 <HAL_I2C_IsDeviceReady+0x13a>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	22a0      	movs	r2, #160	; 0xa0
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2ba0      	cmp	r3, #160	; 0xa0
 80035d2:	d005      	beq.n	80035e0 <HAL_I2C_IsDeviceReady+0x188>
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_I2C_IsDeviceReady+0x188>
 80035da:	7dbb      	ldrb	r3, [r7, #22]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0cd      	beq.n	800357c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d129      	bne.n	800364a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003604:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2319      	movs	r3, #25
 8003622:	2201      	movs	r2, #1
 8003624:	4921      	ldr	r1, [pc, #132]	; (80036ac <HAL_I2C_IsDeviceReady+0x254>)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f994 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e036      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e02c      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003658:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003662:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	2319      	movs	r3, #25
 800366a:	2201      	movs	r2, #1
 800366c:	490f      	ldr	r1, [pc, #60]	; (80036ac <HAL_I2C_IsDeviceReady+0x254>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f970 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e012      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	3301      	adds	r3, #1
 8003682:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	f4ff af32 	bcc.w	80034f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	00100002 	.word	0x00100002
 80036b0:	ffff0000 	.word	0xffff0000

080036b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	460b      	mov	r3, r1
 80036c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d006      	beq.n	80036de <I2C_MasterRequestWrite+0x2a>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d003      	beq.n	80036de <I2C_MasterRequestWrite+0x2a>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036dc:	d108      	bne.n	80036f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e00b      	b.n	8003708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	2b12      	cmp	r3, #18
 80036f6:	d107      	bne.n	8003708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f91d 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372e:	d103      	bne.n	8003738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e035      	b.n	80037a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003744:	d108      	bne.n	8003758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003746:	897b      	ldrh	r3, [r7, #10]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003754:	611a      	str	r2, [r3, #16]
 8003756:	e01b      	b.n	8003790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003758:	897b      	ldrh	r3, [r7, #10]
 800375a:	11db      	asrs	r3, r3, #7
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 0306 	and.w	r3, r3, #6
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f063 030f 	orn	r3, r3, #15
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <I2C_MasterRequestWrite+0xfc>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f943 	bl	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e010      	b.n	80037a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003786:	897b      	ldrh	r3, [r7, #10]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4907      	ldr	r1, [pc, #28]	; (80037b4 <I2C_MasterRequestWrite+0x100>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f933 	bl	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	00010008 	.word	0x00010008
 80037b4:	00010002 	.word	0x00010002

080037b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	460b      	mov	r3, r1
 80037c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d006      	beq.n	80037f2 <I2C_MasterRequestRead+0x3a>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d003      	beq.n	80037f2 <I2C_MasterRequestRead+0x3a>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f0:	d108      	bne.n	8003804 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e00b      	b.n	800381c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	2b11      	cmp	r3, #17
 800380a:	d107      	bne.n	800381c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f893 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003842:	d103      	bne.n	800384c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e079      	b.n	8003944 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003858:	d108      	bne.n	800386c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800385a:	897b      	ldrh	r3, [r7, #10]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	611a      	str	r2, [r3, #16]
 800386a:	e05f      	b.n	800392c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800386c:	897b      	ldrh	r3, [r7, #10]
 800386e:	11db      	asrs	r3, r3, #7
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 0306 	and.w	r3, r3, #6
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f063 030f 	orn	r3, r3, #15
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4930      	ldr	r1, [pc, #192]	; (800394c <I2C_MasterRequestRead+0x194>)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f8b9 	bl	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e054      	b.n	8003944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800389a:	897b      	ldrh	r3, [r7, #10]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4929      	ldr	r1, [pc, #164]	; (8003950 <I2C_MasterRequestRead+0x198>)
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f8a9 	bl	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e044      	b.n	8003944 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f831 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003906:	d103      	bne.n	8003910 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e017      	b.n	8003944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003914:	897b      	ldrh	r3, [r7, #10]
 8003916:	11db      	asrs	r3, r3, #7
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 0306 	and.w	r3, r3, #6
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f063 030e 	orn	r3, r3, #14
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4907      	ldr	r1, [pc, #28]	; (8003950 <I2C_MasterRequestRead+0x198>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f865 	bl	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	00010008 	.word	0x00010008
 8003950:	00010002 	.word	0x00010002

08003954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003964:	e025      	b.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d021      	beq.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fe fd61 	bl	8002434 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d116      	bne.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e023      	b.n	80039fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10d      	bne.n	80039d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	43da      	mvns	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4013      	ands	r3, r2
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	e00c      	b.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	43da      	mvns	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4013      	ands	r3, r2
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d0b6      	beq.n	8003966 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a10:	e051      	b.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a20:	d123      	bne.n	8003a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f043 0204 	orr.w	r2, r3, #4
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e046      	b.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d021      	beq.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7fe fcdf 	bl	8002434 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d116      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e020      	b.n	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10c      	bne.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	e00b      	b.n	8003af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d18d      	bne.n	8003a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b0c:	e02d      	b.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8ce 	bl	8003cb0 <I2C_IsAcknowledgeFailed>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e02d      	b.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d021      	beq.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fe fc85 	bl	8002434 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d116      	bne.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e007      	b.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d1ca      	bne.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b8e:	e02d      	b.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f88d 	bl	8003cb0 <I2C_IsAcknowledgeFailed>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e02d      	b.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d021      	beq.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba8:	f7fe fc44 	bl	8002434 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d302      	bcc.n	8003bbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d116      	bne.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e007      	b.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d1ca      	bne.n	8003b90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c10:	e042      	b.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d119      	bne.n	8003c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0210 	mvn.w	r2, #16
 8003c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e029      	b.n	8003ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7fe fbee 	bl	8002434 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d1b5      	bne.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc6:	d11b      	bne.n	8003d00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e272      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8087 	beq.w	8003e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d2c:	4b92      	ldr	r3, [pc, #584]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d00c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d38:	4b8f      	ldr	r3, [pc, #572]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d112      	bne.n	8003d6a <HAL_RCC_OscConfig+0x5e>
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d50:	d10b      	bne.n	8003d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d52:	4b89      	ldr	r3, [pc, #548]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d06c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x12c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d168      	bne.n	8003e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e24c      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x76>
 8003d74:	4b80      	ldr	r3, [pc, #512]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7f      	ldr	r2, [pc, #508]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e02e      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d8a:	4b7b      	ldr	r3, [pc, #492]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7a      	ldr	r2, [pc, #488]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b78      	ldr	r3, [pc, #480]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a77      	ldr	r2, [pc, #476]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e01d      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xbc>
 8003dae:	4b72      	ldr	r3, [pc, #456]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a71      	ldr	r2, [pc, #452]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6e      	ldr	r2, [pc, #440]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003dc8:	4b6b      	ldr	r3, [pc, #428]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b68      	ldr	r3, [pc, #416]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a67      	ldr	r2, [pc, #412]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d013      	beq.n	8003e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fe fb24 	bl	8002434 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fe fb20 	bl	8002434 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e200      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	4b5d      	ldr	r3, [pc, #372]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0xe4>
 8003e0e:	e014      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe fb10 	bl	8002434 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e18:	f7fe fb0c 	bl	8002434 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	; 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1ec      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x10c>
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d063      	beq.n	8003f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e46:	4b4c      	ldr	r3, [pc, #304]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e52:	4b49      	ldr	r3, [pc, #292]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d11c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x18c>
 8003e5e:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d116      	bne.n	8003e98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_RCC_OscConfig+0x176>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e1c0      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4939      	ldr	r1, [pc, #228]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	e03a      	b.n	8003f0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <HAL_RCC_OscConfig+0x270>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe fac5 	bl	8002434 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eae:	f7fe fac1 	bl	8002434 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1a1      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4927      	ldr	r1, [pc, #156]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	e015      	b.n	8003f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_RCC_OscConfig+0x270>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fe faa4 	bl	8002434 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef0:	f7fe faa0 	bl	8002434 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e180      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d03a      	beq.n	8003f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f22:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <HAL_RCC_OscConfig+0x274>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fe fa84 	bl	8002434 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fe fa80 	bl	8002434 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e160      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f000 fad8 	bl	8004504 <RCC_Delay>
 8003f54:	e01c      	b.n	8003f90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_RCC_OscConfig+0x274>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5c:	f7fe fa6a 	bl	8002434 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f62:	e00f      	b.n	8003f84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fe fa66 	bl	8002434 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d908      	bls.n	8003f84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e146      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	42420000 	.word	0x42420000
 8003f80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b92      	ldr	r3, [pc, #584]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e9      	bne.n	8003f64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a6 	beq.w	80040ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b8b      	ldr	r3, [pc, #556]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	4b88      	ldr	r3, [pc, #544]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4a87      	ldr	r2, [pc, #540]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	61d3      	str	r3, [r2, #28]
 8003fba:	4b85      	ldr	r3, [pc, #532]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b82      	ldr	r3, [pc, #520]	; (80041d4 <HAL_RCC_OscConfig+0x4c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d118      	bne.n	8004008 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b7f      	ldr	r3, [pc, #508]	; (80041d4 <HAL_RCC_OscConfig+0x4c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7e      	ldr	r2, [pc, #504]	; (80041d4 <HAL_RCC_OscConfig+0x4c8>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fe fa27 	bl	8002434 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fea:	f7fe fa23 	bl	8002434 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b64      	cmp	r3, #100	; 0x64
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e103      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	4b75      	ldr	r3, [pc, #468]	; (80041d4 <HAL_RCC_OscConfig+0x4c8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x312>
 8004010:	4b6f      	ldr	r3, [pc, #444]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4a6e      	ldr	r2, [pc, #440]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6213      	str	r3, [r2, #32]
 800401c:	e02d      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x334>
 8004026:	4b6a      	ldr	r3, [pc, #424]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4a69      	ldr	r2, [pc, #420]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	6213      	str	r3, [r2, #32]
 8004032:	4b67      	ldr	r3, [pc, #412]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4a66      	ldr	r2, [pc, #408]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	6213      	str	r3, [r2, #32]
 800403e:	e01c      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b05      	cmp	r3, #5
 8004046:	d10c      	bne.n	8004062 <HAL_RCC_OscConfig+0x356>
 8004048:	4b61      	ldr	r3, [pc, #388]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4a60      	ldr	r2, [pc, #384]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a5d      	ldr	r2, [pc, #372]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6213      	str	r3, [r2, #32]
 8004060:	e00b      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 8004062:	4b5b      	ldr	r3, [pc, #364]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4a5a      	ldr	r2, [pc, #360]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	6213      	str	r3, [r2, #32]
 800406e:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4a57      	ldr	r2, [pc, #348]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d015      	beq.n	80040ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004082:	f7fe f9d7 	bl	8002434 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fe f9d3 	bl	8002434 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	; 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0b1      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	4b4b      	ldr	r3, [pc, #300]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ee      	beq.n	800408a <HAL_RCC_OscConfig+0x37e>
 80040ac:	e014      	b.n	80040d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fe f9c1 	bl	8002434 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fe f9bd 	bl	8002434 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e09b      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040cc:	4b40      	ldr	r3, [pc, #256]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ee      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d105      	bne.n	80040ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040de:	4b3c      	ldr	r3, [pc, #240]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4a3b      	ldr	r2, [pc, #236]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8087 	beq.w	8004202 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f4:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d061      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d146      	bne.n	8004196 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004108:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <HAL_RCC_OscConfig+0x4cc>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fe f991 	bl	8002434 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004116:	f7fe f98d 	bl	8002434 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e06d      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d108      	bne.n	8004150 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4921      	ldr	r1, [pc, #132]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004150:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a19      	ldr	r1, [r3, #32]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	430b      	orrs	r3, r1
 8004162:	491b      	ldr	r1, [pc, #108]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCC_OscConfig+0x4cc>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fe f961 	bl	8002434 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004176:	f7fe f95d 	bl	8002434 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e03d      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004188:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x46a>
 8004194:	e035      	b.n	8004202 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_RCC_OscConfig+0x4cc>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fe f94a 	bl	8002434 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe f946 	bl	8002434 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e026      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x498>
 80041c2:	e01e      	b.n	8004202 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e019      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40007000 	.word	0x40007000
 80041d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_OscConfig+0x500>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000

08004210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0d0      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004224:	4b6a      	ldr	r3, [pc, #424]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d910      	bls.n	8004254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b67      	ldr	r3, [pc, #412]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 0207 	bic.w	r2, r3, #7
 800423a:	4965      	ldr	r1, [pc, #404]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b8      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426c:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800428e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	494d      	ldr	r1, [pc, #308]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d040      	beq.n	8004330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d115      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e073      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042de:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06b      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ee:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f023 0203 	bic.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4936      	ldr	r1, [pc, #216]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004300:	f7fe f898 	bl	8002434 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	e00a      	b.n	800431e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004308:	f7fe f894 	bl	8002434 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e053      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 020c 	and.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	429a      	cmp	r2, r3
 800432e:	d1eb      	bne.n	8004308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d210      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 0207 	bic.w	r2, r3, #7
 8004346:	4922      	ldr	r1, [pc, #136]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e032      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4916      	ldr	r1, [pc, #88]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	490e      	ldr	r1, [pc, #56]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800439e:	f000 f821 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	490a      	ldr	r1, [pc, #40]	; (80043d8 <HAL_RCC_ClockConfig+0x1c8>)
 80043b0:	5ccb      	ldrb	r3, [r1, r3]
 80043b2:	fa22 f303 	lsr.w	r3, r2, r3
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1cc>)
 80043b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_RCC_ClockConfig+0x1d0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fff6 	bl	80023b0 <HAL_InitTick>

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40022000 	.word	0x40022000
 80043d4:	40021000 	.word	0x40021000
 80043d8:	08008538 	.word	0x08008538
 80043dc:	20000004 	.word	0x20000004
 80043e0:	20000008 	.word	0x20000008

080043e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	b490      	push	{r4, r7}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043ea:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCC_GetSysClockFreq+0xac>)
 80043ec:	1d3c      	adds	r4, r7, #4
 80043ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043f4:	f240 2301 	movw	r3, #513	; 0x201
 80043f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800440e:	4b21      	ldr	r3, [pc, #132]	; (8004494 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b04      	cmp	r3, #4
 800441c:	d002      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x40>
 800441e:	2b08      	cmp	r3, #8
 8004420:	d003      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0x46>
 8004422:	e02b      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004424:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004426:	623b      	str	r3, [r7, #32]
      break;
 8004428:	e02b      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	0c9b      	lsrs	r3, r3, #18
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	3328      	adds	r3, #40	; 0x28
 8004434:	443b      	add	r3, r7
 8004436:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800443a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d012      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	0c5b      	lsrs	r3, r3, #17
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	3328      	adds	r3, #40	; 0x28
 8004452:	443b      	add	r3, r7
 8004454:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004458:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4a0e      	ldr	r2, [pc, #56]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb4>)
 800445e:	fb03 f202 	mul.w	r2, r3, r2
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
 800446a:	e004      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	623b      	str	r3, [r7, #32]
      break;
 800447a:	e002      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_RCC_GetSysClockFreq+0xb4>)
 800447e:	623b      	str	r3, [r7, #32]
      break;
 8004480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004482:	6a3b      	ldr	r3, [r7, #32]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3728      	adds	r7, #40	; 0x28
 8004488:	46bd      	mov	sp, r7
 800448a:	bc90      	pop	{r4, r7}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	08008528 	.word	0x08008528
 8004494:	40021000 	.word	0x40021000
 8004498:	007a1200 	.word	0x007a1200
 800449c:	003d0900 	.word	0x003d0900

080044a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a4:	4b02      	ldr	r3, [pc, #8]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	20000004 	.word	0x20000004

080044b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b8:	f7ff fff2 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4903      	ldr	r1, [pc, #12]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	08008548 	.word	0x08008548

080044dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e0:	f7ff ffde 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	0adb      	lsrs	r3, r3, #11
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000
 8004500:	08008548 	.word	0x08008548

08004504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <RCC_Delay+0x34>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <RCC_Delay+0x38>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	0a5b      	lsrs	r3, r3, #9
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004520:	bf00      	nop
  }
  while (Delay --);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	60fa      	str	r2, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f9      	bne.n	8004520 <RCC_Delay+0x1c>
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	20000004 	.word	0x20000004
 800453c:	10624dd3 	.word	0x10624dd3

08004540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e041      	b.n	80045d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fd fd6e 	bl	8002048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 fa70 	bl	8004a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d001      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e03a      	b.n	800466e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a18      	ldr	r2, [pc, #96]	; (8004678 <HAL_TIM_Base_Start_IT+0x98>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00e      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x58>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d009      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x58>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <HAL_TIM_Base_Start_IT+0x9c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0x58>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <HAL_TIM_Base_Start_IT+0xa0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d111      	bne.n	800465c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b06      	cmp	r3, #6
 8004648:	d010      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465a:	e007      	b.n	800466c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800

08004684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0202 	mvn.w	r2, #2
 80046b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9b1 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9a4 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f9b3 	bl	8004a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d122      	bne.n	8004734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d11b      	bne.n	8004734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0204 	mvn.w	r2, #4
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f987 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f97a 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f989 	bl	8004a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b08      	cmp	r3, #8
 8004740:	d122      	bne.n	8004788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b08      	cmp	r3, #8
 800474e:	d11b      	bne.n	8004788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0208 	mvn.w	r2, #8
 8004758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2204      	movs	r2, #4
 800475e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f95d 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 8004774:	e005      	b.n	8004782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f950 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f95f 	bl	8004a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b10      	cmp	r3, #16
 8004794:	d122      	bne.n	80047dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d11b      	bne.n	80047dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0210 	mvn.w	r2, #16
 80047ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2208      	movs	r2, #8
 80047b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f933 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 80047c8:	e005      	b.n	80047d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f926 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f935 	bl	8004a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0201 	mvn.w	r2, #1
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd f966 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d10e      	bne.n	8004834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004820:	2b80      	cmp	r3, #128	; 0x80
 8004822:	d107      	bne.n	8004834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fa77 	bl	8004d22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d10e      	bne.n	8004860 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d107      	bne.n	8004860 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8f9 	bl	8004a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d10e      	bne.n	800488c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b20      	cmp	r3, #32
 800487a:	d107      	bne.n	800488c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0220 	mvn.w	r2, #32
 8004884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa42 	bl	8004d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_TIM_ConfigClockSource+0x18>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e0b3      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x180>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e4:	d03e      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0xd0>
 80048e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ea:	f200 8087 	bhi.w	80049fc <HAL_TIM_ConfigClockSource+0x168>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	f000 8085 	beq.w	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fa:	d87f      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x168>
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d01a      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xa2>
 8004900:	2b70      	cmp	r3, #112	; 0x70
 8004902:	d87b      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x168>
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d050      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x116>
 8004908:	2b60      	cmp	r3, #96	; 0x60
 800490a:	d877      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x168>
 800490c:	2b50      	cmp	r3, #80	; 0x50
 800490e:	d03c      	beq.n	800498a <HAL_TIM_ConfigClockSource+0xf6>
 8004910:	2b50      	cmp	r3, #80	; 0x50
 8004912:	d873      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x168>
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d058      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x136>
 8004918:	2b40      	cmp	r3, #64	; 0x40
 800491a:	d86f      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x168>
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	d064      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x156>
 8004920:	2b30      	cmp	r3, #48	; 0x30
 8004922:	d86b      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x168>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d060      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x156>
 8004928:	2b20      	cmp	r3, #32
 800492a:	d867      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x168>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d05c      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x156>
 8004930:	2b10      	cmp	r3, #16
 8004932:	d05a      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004934:	e062      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6899      	ldr	r1, [r3, #8]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f000 f966 	bl	8004c16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004958:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	609a      	str	r2, [r3, #8]
      break;
 8004962:	e04e      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f000 f94f 	bl	8004c16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004986:	609a      	str	r2, [r3, #8]
      break;
 8004988:	e03b      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	f000 f8c6 	bl	8004b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2150      	movs	r1, #80	; 0x50
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f91d 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80049a8:	e02b      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 f8e4 	bl	8004b84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2160      	movs	r1, #96	; 0x60
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f90d 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80049c8:	e01b      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6859      	ldr	r1, [r3, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f000 f8a6 	bl	8004b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f8fd 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80049e8:	e00b      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 f8f4 	bl	8004be2 <TIM_ITRx_SetConfig>
        break;
 80049fa:	e002      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049fc:	bf00      	nop
 80049fe:	e000      	b.n	8004a02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <TIM_Base_SetConfig+0xb8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <TIM_Base_SetConfig+0x30>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d007      	beq.n	8004a94 <TIM_Base_SetConfig+0x30>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a26      	ldr	r2, [pc, #152]	; (8004b20 <TIM_Base_SetConfig+0xbc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_Base_SetConfig+0x30>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <TIM_Base_SetConfig+0xc0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d108      	bne.n	8004aa6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <TIM_Base_SetConfig+0xb8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00b      	beq.n	8004ac6 <TIM_Base_SetConfig+0x62>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab4:	d007      	beq.n	8004ac6 <TIM_Base_SetConfig+0x62>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <TIM_Base_SetConfig+0xbc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d003      	beq.n	8004ac6 <TIM_Base_SetConfig+0x62>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <TIM_Base_SetConfig+0xc0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <TIM_Base_SetConfig+0xb8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d103      	bne.n	8004b0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	615a      	str	r2, [r3, #20]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800

08004b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f023 0201 	bic.w	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 030a 	bic.w	r3, r3, #10
 8004b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f023 0210 	bic.w	r2, r3, #16
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	031b      	lsls	r3, r3, #12
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f043 0307 	orr.w	r3, r3, #7
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b087      	sub	sp, #28
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	021a      	lsls	r2, r3, #8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	609a      	str	r2, [r3, #8]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e046      	b.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb8:	d009      	beq.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800

08004d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e03f      	b.n	8004dc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fd f998 	bl	8002090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	; 0x24
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fbed 	bl	8005558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d130      	bne.n	8004e4a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_UART_Transmit_IT+0x26>
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e029      	b.n	8004e4c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_UART_Transmit_IT+0x38>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e022      	b.n	8004e4c <HAL_UART_Transmit_IT+0x7e>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	88fa      	ldrh	r2, [r7, #6]
 8004e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2221      	movs	r2, #33	; 0x21
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e44:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e000      	b.n	8004e4c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr

08004e56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	4613      	mov	r3, r2
 8004e62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d11d      	bne.n	8004eac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_UART_Receive_IT+0x26>
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e016      	b.n	8004eae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Receive_IT+0x38>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e00f      	b.n	8004eae <HAL_UART_Receive_IT+0x58>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f9cf 	bl	8005246 <UART_Start_Receive_IT>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	e000      	b.n	8004eae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10d      	bne.n	8004f0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_UART_IRQHandler+0x52>
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa7f 	bl	8005406 <UART_Receive_IT>
      return;
 8004f08:	e17b      	b.n	8005202 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80b1 	beq.w	8005074 <HAL_UART_IRQHandler+0x1bc>
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d105      	bne.n	8004f28 <HAL_UART_IRQHandler+0x70>
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80a6 	beq.w	8005074 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_UART_IRQHandler+0x90>
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f043 0201 	orr.w	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_UART_IRQHandler+0xb0>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f043 0202 	orr.w	r2, r3, #2
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_UART_IRQHandler+0xd0>
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00f      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xfa>
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <HAL_UART_IRQHandler+0xee>
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f043 0208 	orr.w	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 811e 	beq.w	80051f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x11e>
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fa18 	bl	8005406 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bf14      	ite	ne
 8004fe4:	2301      	movne	r3, #1
 8004fe6:	2300      	moveq	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_UART_IRQHandler+0x146>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d031      	beq.n	8005062 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f95a 	bl	80052b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d023      	beq.n	800505a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005020:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	2b00      	cmp	r3, #0
 8005028:	d013      	beq.n	8005052 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	4a76      	ldr	r2, [pc, #472]	; (8005208 <HAL_UART_IRQHandler+0x350>)
 8005030:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	4618      	mov	r0, r3
 8005038:	f7fd fb72 	bl	8002720 <HAL_DMA_Abort_IT>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d016      	beq.n	8005070 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800504c:	4610      	mov	r0, r2
 800504e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	e00e      	b.n	8005070 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8e3 	bl	800521e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	e00a      	b.n	8005070 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8df 	bl	800521e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	e006      	b.n	8005070 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8db 	bl	800521e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800506e:	e0c3      	b.n	80051f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	bf00      	nop
    return;
 8005072:	e0c1      	b.n	80051f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	2b01      	cmp	r3, #1
 800507a:	f040 80a1 	bne.w	80051c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 809b 	beq.w	80051c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8095 	beq.w	80051c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d04e      	beq.n	8005158 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80050c4:	8a3b      	ldrh	r3, [r7, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8098 	beq.w	80051fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050d0:	8a3a      	ldrh	r2, [r7, #16]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	f080 8092 	bcs.w	80051fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8a3a      	ldrh	r2, [r7, #16]
 80050dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d02b      	beq.n	8005140 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0201 	bic.w	r2, r2, #1
 8005106:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005116:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0210 	bic.w	r2, r2, #16
 8005134:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	4618      	mov	r0, r3
 800513c:	f7fd fab5 	bl	80026aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005148:	b29b      	uxth	r3, r3
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	b29b      	uxth	r3, r3
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f86d 	bl	8005230 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005156:	e051      	b.n	80051fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005160:	b29b      	uxth	r3, r3
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d047      	beq.n	8005200 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005170:	8a7b      	ldrh	r3, [r7, #18]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d044      	beq.n	8005200 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005184:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0210 	bic.w	r2, r2, #16
 80051b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051b4:	8a7b      	ldrh	r3, [r7, #18]
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f839 	bl	8005230 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051be:	e01f      	b.n	8005200 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_UART_IRQHandler+0x324>
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f8af 	bl	8005338 <UART_Transmit_IT>
    return;
 80051da:	e012      	b.n	8005202 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <HAL_UART_IRQHandler+0x34a>
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8f0 	bl	80053d6 <UART_EndTransmit_IT>
    return;
 80051f6:	e004      	b.n	8005202 <HAL_UART_IRQHandler+0x34a>
    return;
 80051f8:	bf00      	nop
 80051fa:	e002      	b.n	8005202 <HAL_UART_IRQHandler+0x34a>
      return;
 80051fc:	bf00      	nop
 80051fe:	e000      	b.n	8005202 <HAL_UART_IRQHandler+0x34a>
      return;
 8005200:	bf00      	nop
  }
}
 8005202:	3728      	adds	r7, #40	; 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	08005311 	.word	0x08005311

0800520c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr

08005246 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	4613      	mov	r3, r2
 8005252:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2222      	movs	r2, #34	; 0x22
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0220 	orr.w	r2, r2, #32
 80052aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d107      	bne.n	80052f8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0210 	bic.w	r2, r2, #16
 80052f6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff ff77 	bl	800521e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b21      	cmp	r3, #33	; 0x21
 800534a:	d13e      	bne.n	80053ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005354:	d114      	bne.n	8005380 <UART_Transmit_IT+0x48>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d110      	bne.n	8005380 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005372:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]
 800537e:	e008      	b.n	8005392 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	1c59      	adds	r1, r3, #1
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6211      	str	r1, [r2, #32]
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29b      	uxth	r3, r3
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4619      	mov	r1, r3
 80053a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff08 	bl	800520c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b086      	sub	sp, #24
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b22      	cmp	r3, #34	; 0x22
 8005418:	f040 8099 	bne.w	800554e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005424:	d117      	bne.n	8005456 <UART_Receive_IT+0x50>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d113      	bne.n	8005456 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005444:	b29a      	uxth	r2, r3
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28
 8005454:	e026      	b.n	80054a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005468:	d007      	beq.n	800547a <UART_Receive_IT+0x74>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <UART_Receive_IT+0x82>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e008      	b.n	800549a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005494:	b2da      	uxtb	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4619      	mov	r1, r3
 80054b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d148      	bne.n	800554a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0220 	bic.w	r2, r2, #32
 80054c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d123      	bne.n	8005540 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0210 	bic.w	r2, r2, #16
 800550c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b10      	cmp	r3, #16
 800551a:	d10a      	bne.n	8005532 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff fe79 	bl	8005230 <HAL_UARTEx_RxEventCallback>
 800553e:	e002      	b.n	8005546 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7fb fd25 	bl	8000f90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e002      	b.n	8005550 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005592:	f023 030c 	bic.w	r3, r3, #12
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	430b      	orrs	r3, r1
 800559e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2c      	ldr	r2, [pc, #176]	; (800566c <UART_SetConfig+0x114>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe ff8c 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	e002      	b.n	80055ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055c8:	f7fe ff74 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80055cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009a      	lsls	r2, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	4a22      	ldr	r2, [pc, #136]	; (8005670 <UART_SetConfig+0x118>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	0119      	lsls	r1, r3, #4
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009a      	lsls	r2, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	fbb2 f2f3 	udiv	r2, r2, r3
 8005604:	4b1a      	ldr	r3, [pc, #104]	; (8005670 <UART_SetConfig+0x118>)
 8005606:	fba3 0302 	umull	r0, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2064      	movs	r0, #100	; 0x64
 800560e:	fb00 f303 	mul.w	r3, r0, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	3332      	adds	r3, #50	; 0x32
 8005618:	4a15      	ldr	r2, [pc, #84]	; (8005670 <UART_SetConfig+0x118>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005624:	4419      	add	r1, r3
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009a      	lsls	r2, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	fbb2 f2f3 	udiv	r2, r2, r3
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <UART_SetConfig+0x118>)
 800563e:	fba3 0302 	umull	r0, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	2064      	movs	r0, #100	; 0x64
 8005646:	fb00 f303 	mul.w	r3, r0, r3
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	3332      	adds	r3, #50	; 0x32
 8005650:	4a07      	ldr	r2, [pc, #28]	; (8005670 <UART_SetConfig+0x118>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	f003 020f 	and.w	r2, r3, #15
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	440a      	add	r2, r1
 8005662:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40013800 	.word	0x40013800
 8005670:	51eb851f 	.word	0x51eb851f

08005674 <__errno>:
 8005674:	4b01      	ldr	r3, [pc, #4]	; (800567c <__errno+0x8>)
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000010 	.word	0x20000010

08005680 <__libc_init_array>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	2600      	movs	r6, #0
 8005684:	4d0c      	ldr	r5, [pc, #48]	; (80056b8 <__libc_init_array+0x38>)
 8005686:	4c0d      	ldr	r4, [pc, #52]	; (80056bc <__libc_init_array+0x3c>)
 8005688:	1b64      	subs	r4, r4, r5
 800568a:	10a4      	asrs	r4, r4, #2
 800568c:	42a6      	cmp	r6, r4
 800568e:	d109      	bne.n	80056a4 <__libc_init_array+0x24>
 8005690:	f002 fefa 	bl	8008488 <_init>
 8005694:	2600      	movs	r6, #0
 8005696:	4d0a      	ldr	r5, [pc, #40]	; (80056c0 <__libc_init_array+0x40>)
 8005698:	4c0a      	ldr	r4, [pc, #40]	; (80056c4 <__libc_init_array+0x44>)
 800569a:	1b64      	subs	r4, r4, r5
 800569c:	10a4      	asrs	r4, r4, #2
 800569e:	42a6      	cmp	r6, r4
 80056a0:	d105      	bne.n	80056ae <__libc_init_array+0x2e>
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a8:	4798      	blx	r3
 80056aa:	3601      	adds	r6, #1
 80056ac:	e7ee      	b.n	800568c <__libc_init_array+0xc>
 80056ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b2:	4798      	blx	r3
 80056b4:	3601      	adds	r6, #1
 80056b6:	e7f2      	b.n	800569e <__libc_init_array+0x1e>
 80056b8:	0800892c 	.word	0x0800892c
 80056bc:	0800892c 	.word	0x0800892c
 80056c0:	0800892c 	.word	0x0800892c
 80056c4:	08008930 	.word	0x08008930

080056c8 <memset>:
 80056c8:	4603      	mov	r3, r0
 80056ca:	4402      	add	r2, r0
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d100      	bne.n	80056d2 <memset+0xa>
 80056d0:	4770      	bx	lr
 80056d2:	f803 1b01 	strb.w	r1, [r3], #1
 80056d6:	e7f9      	b.n	80056cc <memset+0x4>

080056d8 <__cvt>:
 80056d8:	2b00      	cmp	r3, #0
 80056da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056de:	461f      	mov	r7, r3
 80056e0:	bfbb      	ittet	lt
 80056e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80056e6:	461f      	movlt	r7, r3
 80056e8:	2300      	movge	r3, #0
 80056ea:	232d      	movlt	r3, #45	; 0x2d
 80056ec:	b088      	sub	sp, #32
 80056ee:	4614      	mov	r4, r2
 80056f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056f4:	7013      	strb	r3, [r2, #0]
 80056f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80056fc:	f023 0820 	bic.w	r8, r3, #32
 8005700:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005704:	d005      	beq.n	8005712 <__cvt+0x3a>
 8005706:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800570a:	d100      	bne.n	800570e <__cvt+0x36>
 800570c:	3501      	adds	r5, #1
 800570e:	2302      	movs	r3, #2
 8005710:	e000      	b.n	8005714 <__cvt+0x3c>
 8005712:	2303      	movs	r3, #3
 8005714:	aa07      	add	r2, sp, #28
 8005716:	9204      	str	r2, [sp, #16]
 8005718:	aa06      	add	r2, sp, #24
 800571a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800571e:	e9cd 3500 	strd	r3, r5, [sp]
 8005722:	4622      	mov	r2, r4
 8005724:	463b      	mov	r3, r7
 8005726:	f000 fce3 	bl	80060f0 <_dtoa_r>
 800572a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800572e:	4606      	mov	r6, r0
 8005730:	d102      	bne.n	8005738 <__cvt+0x60>
 8005732:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005734:	07db      	lsls	r3, r3, #31
 8005736:	d522      	bpl.n	800577e <__cvt+0xa6>
 8005738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800573c:	eb06 0905 	add.w	r9, r6, r5
 8005740:	d110      	bne.n	8005764 <__cvt+0x8c>
 8005742:	7833      	ldrb	r3, [r6, #0]
 8005744:	2b30      	cmp	r3, #48	; 0x30
 8005746:	d10a      	bne.n	800575e <__cvt+0x86>
 8005748:	2200      	movs	r2, #0
 800574a:	2300      	movs	r3, #0
 800574c:	4620      	mov	r0, r4
 800574e:	4639      	mov	r1, r7
 8005750:	f7fb f92a 	bl	80009a8 <__aeabi_dcmpeq>
 8005754:	b918      	cbnz	r0, 800575e <__cvt+0x86>
 8005756:	f1c5 0501 	rsb	r5, r5, #1
 800575a:	f8ca 5000 	str.w	r5, [sl]
 800575e:	f8da 3000 	ldr.w	r3, [sl]
 8005762:	4499      	add	r9, r3
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	4620      	mov	r0, r4
 800576a:	4639      	mov	r1, r7
 800576c:	f7fb f91c 	bl	80009a8 <__aeabi_dcmpeq>
 8005770:	b108      	cbz	r0, 8005776 <__cvt+0x9e>
 8005772:	f8cd 901c 	str.w	r9, [sp, #28]
 8005776:	2230      	movs	r2, #48	; 0x30
 8005778:	9b07      	ldr	r3, [sp, #28]
 800577a:	454b      	cmp	r3, r9
 800577c:	d307      	bcc.n	800578e <__cvt+0xb6>
 800577e:	4630      	mov	r0, r6
 8005780:	9b07      	ldr	r3, [sp, #28]
 8005782:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005784:	1b9b      	subs	r3, r3, r6
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	b008      	add	sp, #32
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578e:	1c59      	adds	r1, r3, #1
 8005790:	9107      	str	r1, [sp, #28]
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	e7f0      	b.n	8005778 <__cvt+0xa0>

08005796 <__exponent>:
 8005796:	4603      	mov	r3, r0
 8005798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800579a:	2900      	cmp	r1, #0
 800579c:	f803 2b02 	strb.w	r2, [r3], #2
 80057a0:	bfb6      	itet	lt
 80057a2:	222d      	movlt	r2, #45	; 0x2d
 80057a4:	222b      	movge	r2, #43	; 0x2b
 80057a6:	4249      	neglt	r1, r1
 80057a8:	2909      	cmp	r1, #9
 80057aa:	7042      	strb	r2, [r0, #1]
 80057ac:	dd2b      	ble.n	8005806 <__exponent+0x70>
 80057ae:	f10d 0407 	add.w	r4, sp, #7
 80057b2:	46a4      	mov	ip, r4
 80057b4:	270a      	movs	r7, #10
 80057b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80057ba:	460a      	mov	r2, r1
 80057bc:	46a6      	mov	lr, r4
 80057be:	fb07 1516 	mls	r5, r7, r6, r1
 80057c2:	2a63      	cmp	r2, #99	; 0x63
 80057c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80057c8:	4631      	mov	r1, r6
 80057ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80057ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057d2:	dcf0      	bgt.n	80057b6 <__exponent+0x20>
 80057d4:	3130      	adds	r1, #48	; 0x30
 80057d6:	f1ae 0502 	sub.w	r5, lr, #2
 80057da:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057de:	4629      	mov	r1, r5
 80057e0:	1c44      	adds	r4, r0, #1
 80057e2:	4561      	cmp	r1, ip
 80057e4:	d30a      	bcc.n	80057fc <__exponent+0x66>
 80057e6:	f10d 0209 	add.w	r2, sp, #9
 80057ea:	eba2 020e 	sub.w	r2, r2, lr
 80057ee:	4565      	cmp	r5, ip
 80057f0:	bf88      	it	hi
 80057f2:	2200      	movhi	r2, #0
 80057f4:	4413      	add	r3, r2
 80057f6:	1a18      	subs	r0, r3, r0
 80057f8:	b003      	add	sp, #12
 80057fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005800:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005804:	e7ed      	b.n	80057e2 <__exponent+0x4c>
 8005806:	2330      	movs	r3, #48	; 0x30
 8005808:	3130      	adds	r1, #48	; 0x30
 800580a:	7083      	strb	r3, [r0, #2]
 800580c:	70c1      	strb	r1, [r0, #3]
 800580e:	1d03      	adds	r3, r0, #4
 8005810:	e7f1      	b.n	80057f6 <__exponent+0x60>
	...

08005814 <_printf_float>:
 8005814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	b091      	sub	sp, #68	; 0x44
 800581a:	460c      	mov	r4, r1
 800581c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005820:	4616      	mov	r6, r2
 8005822:	461f      	mov	r7, r3
 8005824:	4605      	mov	r5, r0
 8005826:	f001 fa51 	bl	8006ccc <_localeconv_r>
 800582a:	6803      	ldr	r3, [r0, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	9309      	str	r3, [sp, #36]	; 0x24
 8005830:	f7fa fc8e 	bl	8000150 <strlen>
 8005834:	2300      	movs	r3, #0
 8005836:	930e      	str	r3, [sp, #56]	; 0x38
 8005838:	f8d8 3000 	ldr.w	r3, [r8]
 800583c:	900a      	str	r0, [sp, #40]	; 0x28
 800583e:	3307      	adds	r3, #7
 8005840:	f023 0307 	bic.w	r3, r3, #7
 8005844:	f103 0208 	add.w	r2, r3, #8
 8005848:	f894 9018 	ldrb.w	r9, [r4, #24]
 800584c:	f8d4 b000 	ldr.w	fp, [r4]
 8005850:	f8c8 2000 	str.w	r2, [r8]
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800585c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005860:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005864:	930b      	str	r3, [sp, #44]	; 0x2c
 8005866:	f04f 32ff 	mov.w	r2, #4294967295
 800586a:	4640      	mov	r0, r8
 800586c:	4b9c      	ldr	r3, [pc, #624]	; (8005ae0 <_printf_float+0x2cc>)
 800586e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005870:	f7fb f8cc 	bl	8000a0c <__aeabi_dcmpun>
 8005874:	bb70      	cbnz	r0, 80058d4 <_printf_float+0xc0>
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	4640      	mov	r0, r8
 800587c:	4b98      	ldr	r3, [pc, #608]	; (8005ae0 <_printf_float+0x2cc>)
 800587e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005880:	f7fb f8a6 	bl	80009d0 <__aeabi_dcmple>
 8005884:	bb30      	cbnz	r0, 80058d4 <_printf_float+0xc0>
 8005886:	2200      	movs	r2, #0
 8005888:	2300      	movs	r3, #0
 800588a:	4640      	mov	r0, r8
 800588c:	4651      	mov	r1, sl
 800588e:	f7fb f895 	bl	80009bc <__aeabi_dcmplt>
 8005892:	b110      	cbz	r0, 800589a <_printf_float+0x86>
 8005894:	232d      	movs	r3, #45	; 0x2d
 8005896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589a:	4b92      	ldr	r3, [pc, #584]	; (8005ae4 <_printf_float+0x2d0>)
 800589c:	4892      	ldr	r0, [pc, #584]	; (8005ae8 <_printf_float+0x2d4>)
 800589e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80058a2:	bf94      	ite	ls
 80058a4:	4698      	movls	r8, r3
 80058a6:	4680      	movhi	r8, r0
 80058a8:	2303      	movs	r3, #3
 80058aa:	f04f 0a00 	mov.w	sl, #0
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	f02b 0304 	bic.w	r3, fp, #4
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	4633      	mov	r3, r6
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	9700      	str	r7, [sp, #0]
 80058be:	aa0f      	add	r2, sp, #60	; 0x3c
 80058c0:	f000 f9d4 	bl	8005c6c <_printf_common>
 80058c4:	3001      	adds	r0, #1
 80058c6:	f040 8090 	bne.w	80059ea <_printf_float+0x1d6>
 80058ca:	f04f 30ff 	mov.w	r0, #4294967295
 80058ce:	b011      	add	sp, #68	; 0x44
 80058d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d4:	4642      	mov	r2, r8
 80058d6:	4653      	mov	r3, sl
 80058d8:	4640      	mov	r0, r8
 80058da:	4651      	mov	r1, sl
 80058dc:	f7fb f896 	bl	8000a0c <__aeabi_dcmpun>
 80058e0:	b148      	cbz	r0, 80058f6 <_printf_float+0xe2>
 80058e2:	f1ba 0f00 	cmp.w	sl, #0
 80058e6:	bfb8      	it	lt
 80058e8:	232d      	movlt	r3, #45	; 0x2d
 80058ea:	4880      	ldr	r0, [pc, #512]	; (8005aec <_printf_float+0x2d8>)
 80058ec:	bfb8      	it	lt
 80058ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058f2:	4b7f      	ldr	r3, [pc, #508]	; (8005af0 <_printf_float+0x2dc>)
 80058f4:	e7d3      	b.n	800589e <_printf_float+0x8a>
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	d142      	bne.n	8005986 <_printf_float+0x172>
 8005900:	2306      	movs	r3, #6
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	9206      	str	r2, [sp, #24]
 8005908:	aa0e      	add	r2, sp, #56	; 0x38
 800590a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800590e:	aa0d      	add	r2, sp, #52	; 0x34
 8005910:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005914:	9203      	str	r2, [sp, #12]
 8005916:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800591a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	4642      	mov	r2, r8
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	4628      	mov	r0, r5
 8005928:	4653      	mov	r3, sl
 800592a:	910b      	str	r1, [sp, #44]	; 0x2c
 800592c:	f7ff fed4 	bl	80056d8 <__cvt>
 8005930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005932:	4680      	mov	r8, r0
 8005934:	2947      	cmp	r1, #71	; 0x47
 8005936:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005938:	d108      	bne.n	800594c <_printf_float+0x138>
 800593a:	1cc8      	adds	r0, r1, #3
 800593c:	db02      	blt.n	8005944 <_printf_float+0x130>
 800593e:	6863      	ldr	r3, [r4, #4]
 8005940:	4299      	cmp	r1, r3
 8005942:	dd40      	ble.n	80059c6 <_printf_float+0x1b2>
 8005944:	f1a9 0902 	sub.w	r9, r9, #2
 8005948:	fa5f f989 	uxtb.w	r9, r9
 800594c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005950:	d81f      	bhi.n	8005992 <_printf_float+0x17e>
 8005952:	464a      	mov	r2, r9
 8005954:	3901      	subs	r1, #1
 8005956:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800595a:	910d      	str	r1, [sp, #52]	; 0x34
 800595c:	f7ff ff1b 	bl	8005796 <__exponent>
 8005960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005962:	4682      	mov	sl, r0
 8005964:	1813      	adds	r3, r2, r0
 8005966:	2a01      	cmp	r2, #1
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	dc02      	bgt.n	8005972 <_printf_float+0x15e>
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	07d2      	lsls	r2, r2, #31
 8005970:	d501      	bpl.n	8005976 <_printf_float+0x162>
 8005972:	3301      	adds	r3, #1
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800597a:	2b00      	cmp	r3, #0
 800597c:	d09b      	beq.n	80058b6 <_printf_float+0xa2>
 800597e:	232d      	movs	r3, #45	; 0x2d
 8005980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005984:	e797      	b.n	80058b6 <_printf_float+0xa2>
 8005986:	2947      	cmp	r1, #71	; 0x47
 8005988:	d1bc      	bne.n	8005904 <_printf_float+0xf0>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ba      	bne.n	8005904 <_printf_float+0xf0>
 800598e:	2301      	movs	r3, #1
 8005990:	e7b7      	b.n	8005902 <_printf_float+0xee>
 8005992:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005996:	d118      	bne.n	80059ca <_printf_float+0x1b6>
 8005998:	2900      	cmp	r1, #0
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	dd0b      	ble.n	80059b6 <_printf_float+0x1a2>
 800599e:	6121      	str	r1, [r4, #16]
 80059a0:	b913      	cbnz	r3, 80059a8 <_printf_float+0x194>
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	07d0      	lsls	r0, r2, #31
 80059a6:	d502      	bpl.n	80059ae <_printf_float+0x19a>
 80059a8:	3301      	adds	r3, #1
 80059aa:	440b      	add	r3, r1
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	f04f 0a00 	mov.w	sl, #0
 80059b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80059b4:	e7df      	b.n	8005976 <_printf_float+0x162>
 80059b6:	b913      	cbnz	r3, 80059be <_printf_float+0x1aa>
 80059b8:	6822      	ldr	r2, [r4, #0]
 80059ba:	07d2      	lsls	r2, r2, #31
 80059bc:	d501      	bpl.n	80059c2 <_printf_float+0x1ae>
 80059be:	3302      	adds	r3, #2
 80059c0:	e7f4      	b.n	80059ac <_printf_float+0x198>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e7f2      	b.n	80059ac <_printf_float+0x198>
 80059c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80059ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059cc:	4299      	cmp	r1, r3
 80059ce:	db05      	blt.n	80059dc <_printf_float+0x1c8>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	6121      	str	r1, [r4, #16]
 80059d4:	07d8      	lsls	r0, r3, #31
 80059d6:	d5ea      	bpl.n	80059ae <_printf_float+0x19a>
 80059d8:	1c4b      	adds	r3, r1, #1
 80059da:	e7e7      	b.n	80059ac <_printf_float+0x198>
 80059dc:	2900      	cmp	r1, #0
 80059de:	bfcc      	ite	gt
 80059e0:	2201      	movgt	r2, #1
 80059e2:	f1c1 0202 	rsble	r2, r1, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	e7e0      	b.n	80059ac <_printf_float+0x198>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	055a      	lsls	r2, r3, #21
 80059ee:	d407      	bmi.n	8005a00 <_printf_float+0x1ec>
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	4642      	mov	r2, r8
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	d12b      	bne.n	8005a56 <_printf_float+0x242>
 80059fe:	e764      	b.n	80058ca <_printf_float+0xb6>
 8005a00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a04:	f240 80dd 	bls.w	8005bc2 <_printf_float+0x3ae>
 8005a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f7fa ffca 	bl	80009a8 <__aeabi_dcmpeq>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d033      	beq.n	8005a80 <_printf_float+0x26c>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	4a35      	ldr	r2, [pc, #212]	; (8005af4 <_printf_float+0x2e0>)
 8005a20:	47b8      	blx	r7
 8005a22:	3001      	adds	r0, #1
 8005a24:	f43f af51 	beq.w	80058ca <_printf_float+0xb6>
 8005a28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	db02      	blt.n	8005a36 <_printf_float+0x222>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	07d8      	lsls	r0, r3, #31
 8005a34:	d50f      	bpl.n	8005a56 <_printf_float+0x242>
 8005a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b8      	blx	r7
 8005a40:	3001      	adds	r0, #1
 8005a42:	f43f af42 	beq.w	80058ca <_printf_float+0xb6>
 8005a46:	f04f 0800 	mov.w	r8, #0
 8005a4a:	f104 091a 	add.w	r9, r4, #26
 8005a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4543      	cmp	r3, r8
 8005a54:	dc09      	bgt.n	8005a6a <_printf_float+0x256>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	079b      	lsls	r3, r3, #30
 8005a5a:	f100 8102 	bmi.w	8005c62 <_printf_float+0x44e>
 8005a5e:	68e0      	ldr	r0, [r4, #12]
 8005a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a62:	4298      	cmp	r0, r3
 8005a64:	bfb8      	it	lt
 8005a66:	4618      	movlt	r0, r3
 8005a68:	e731      	b.n	80058ce <_printf_float+0xba>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	464a      	mov	r2, r9
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	f43f af28 	beq.w	80058ca <_printf_float+0xb6>
 8005a7a:	f108 0801 	add.w	r8, r8, #1
 8005a7e:	e7e6      	b.n	8005a4e <_printf_float+0x23a>
 8005a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	dc38      	bgt.n	8005af8 <_printf_float+0x2e4>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <_printf_float+0x2e0>)
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f af1a 	beq.w	80058ca <_printf_float+0xb6>
 8005a96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	d102      	bne.n	8005aa4 <_printf_float+0x290>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	07d9      	lsls	r1, r3, #31
 8005aa2:	d5d8      	bpl.n	8005a56 <_printf_float+0x242>
 8005aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f af0b 	beq.w	80058ca <_printf_float+0xb6>
 8005ab4:	f04f 0900 	mov.w	r9, #0
 8005ab8:	f104 0a1a 	add.w	sl, r4, #26
 8005abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005abe:	425b      	negs	r3, r3
 8005ac0:	454b      	cmp	r3, r9
 8005ac2:	dc01      	bgt.n	8005ac8 <_printf_float+0x2b4>
 8005ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac6:	e794      	b.n	80059f2 <_printf_float+0x1de>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4652      	mov	r2, sl
 8005acc:	4631      	mov	r1, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f43f aef9 	beq.w	80058ca <_printf_float+0xb6>
 8005ad8:	f109 0901 	add.w	r9, r9, #1
 8005adc:	e7ee      	b.n	8005abc <_printf_float+0x2a8>
 8005ade:	bf00      	nop
 8005ae0:	7fefffff 	.word	0x7fefffff
 8005ae4:	08008554 	.word	0x08008554
 8005ae8:	08008558 	.word	0x08008558
 8005aec:	08008560 	.word	0x08008560
 8005af0:	0800855c 	.word	0x0800855c
 8005af4:	08008564 	.word	0x08008564
 8005af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005afc:	429a      	cmp	r2, r3
 8005afe:	bfa8      	it	ge
 8005b00:	461a      	movge	r2, r3
 8005b02:	2a00      	cmp	r2, #0
 8005b04:	4691      	mov	r9, r2
 8005b06:	dc37      	bgt.n	8005b78 <_printf_float+0x364>
 8005b08:	f04f 0b00 	mov.w	fp, #0
 8005b0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b10:	f104 021a 	add.w	r2, r4, #26
 8005b14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b18:	ebaa 0309 	sub.w	r3, sl, r9
 8005b1c:	455b      	cmp	r3, fp
 8005b1e:	dc33      	bgt.n	8005b88 <_printf_float+0x374>
 8005b20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b24:	429a      	cmp	r2, r3
 8005b26:	db3b      	blt.n	8005ba0 <_printf_float+0x38c>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07da      	lsls	r2, r3, #31
 8005b2c:	d438      	bmi.n	8005ba0 <_printf_float+0x38c>
 8005b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b32:	eba3 020a 	sub.w	r2, r3, sl
 8005b36:	eba3 0901 	sub.w	r9, r3, r1
 8005b3a:	4591      	cmp	r9, r2
 8005b3c:	bfa8      	it	ge
 8005b3e:	4691      	movge	r9, r2
 8005b40:	f1b9 0f00 	cmp.w	r9, #0
 8005b44:	dc34      	bgt.n	8005bb0 <_printf_float+0x39c>
 8005b46:	f04f 0800 	mov.w	r8, #0
 8005b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b4e:	f104 0a1a 	add.w	sl, r4, #26
 8005b52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	eba3 0309 	sub.w	r3, r3, r9
 8005b5c:	4543      	cmp	r3, r8
 8005b5e:	f77f af7a 	ble.w	8005a56 <_printf_float+0x242>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4652      	mov	r2, sl
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f aeac 	beq.w	80058ca <_printf_float+0xb6>
 8005b72:	f108 0801 	add.w	r8, r8, #1
 8005b76:	e7ec      	b.n	8005b52 <_printf_float+0x33e>
 8005b78:	4613      	mov	r3, r2
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	d1c0      	bne.n	8005b08 <_printf_float+0x2f4>
 8005b86:	e6a0      	b.n	80058ca <_printf_float+0xb6>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	f43f ae99 	beq.w	80058ca <_printf_float+0xb6>
 8005b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b9a:	f10b 0b01 	add.w	fp, fp, #1
 8005b9e:	e7b9      	b.n	8005b14 <_printf_float+0x300>
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	d1bf      	bne.n	8005b2e <_printf_float+0x31a>
 8005bae:	e68c      	b.n	80058ca <_printf_float+0xb6>
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	eb08 020a 	add.w	r2, r8, sl
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d1c2      	bne.n	8005b46 <_printf_float+0x332>
 8005bc0:	e683      	b.n	80058ca <_printf_float+0xb6>
 8005bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bc4:	2a01      	cmp	r2, #1
 8005bc6:	dc01      	bgt.n	8005bcc <_printf_float+0x3b8>
 8005bc8:	07db      	lsls	r3, r3, #31
 8005bca:	d537      	bpl.n	8005c3c <_printf_float+0x428>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4642      	mov	r2, r8
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f43f ae77 	beq.w	80058ca <_printf_float+0xb6>
 8005bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	f43f ae6f 	beq.w	80058ca <_printf_float+0xb6>
 8005bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f7fa fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8005bf8:	b9d8      	cbnz	r0, 8005c32 <_printf_float+0x41e>
 8005bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bfc:	f108 0201 	add.w	r2, r8, #1
 8005c00:	3b01      	subs	r3, #1
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d10e      	bne.n	8005c2a <_printf_float+0x416>
 8005c0c:	e65d      	b.n	80058ca <_printf_float+0xb6>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	464a      	mov	r2, r9
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f43f ae56 	beq.w	80058ca <_printf_float+0xb6>
 8005c1e:	f108 0801 	add.w	r8, r8, #1
 8005c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c24:	3b01      	subs	r3, #1
 8005c26:	4543      	cmp	r3, r8
 8005c28:	dcf1      	bgt.n	8005c0e <_printf_float+0x3fa>
 8005c2a:	4653      	mov	r3, sl
 8005c2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c30:	e6e0      	b.n	80059f4 <_printf_float+0x1e0>
 8005c32:	f04f 0800 	mov.w	r8, #0
 8005c36:	f104 091a 	add.w	r9, r4, #26
 8005c3a:	e7f2      	b.n	8005c22 <_printf_float+0x40e>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4642      	mov	r2, r8
 8005c40:	e7df      	b.n	8005c02 <_printf_float+0x3ee>
 8005c42:	2301      	movs	r3, #1
 8005c44:	464a      	mov	r2, r9
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f43f ae3c 	beq.w	80058ca <_printf_float+0xb6>
 8005c52:	f108 0801 	add.w	r8, r8, #1
 8005c56:	68e3      	ldr	r3, [r4, #12]
 8005c58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c5a:	1a5b      	subs	r3, r3, r1
 8005c5c:	4543      	cmp	r3, r8
 8005c5e:	dcf0      	bgt.n	8005c42 <_printf_float+0x42e>
 8005c60:	e6fd      	b.n	8005a5e <_printf_float+0x24a>
 8005c62:	f04f 0800 	mov.w	r8, #0
 8005c66:	f104 0919 	add.w	r9, r4, #25
 8005c6a:	e7f4      	b.n	8005c56 <_printf_float+0x442>

08005c6c <_printf_common>:
 8005c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c70:	4616      	mov	r6, r2
 8005c72:	4699      	mov	r9, r3
 8005c74:	688a      	ldr	r2, [r1, #8]
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4607      	mov	r7, r0
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	bfb8      	it	lt
 8005c7e:	4613      	movlt	r3, r2
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c86:	460c      	mov	r4, r1
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	b10a      	cbz	r2, 8005c92 <_printf_common+0x26>
 8005c8e:	3301      	adds	r3, #1
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	0699      	lsls	r1, r3, #26
 8005c96:	bf42      	ittt	mi
 8005c98:	6833      	ldrmi	r3, [r6, #0]
 8005c9a:	3302      	addmi	r3, #2
 8005c9c:	6033      	strmi	r3, [r6, #0]
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	f015 0506 	ands.w	r5, r5, #6
 8005ca4:	d106      	bne.n	8005cb4 <_printf_common+0x48>
 8005ca6:	f104 0a19 	add.w	sl, r4, #25
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	6832      	ldr	r2, [r6, #0]
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dc28      	bgt.n	8005d06 <_printf_common+0x9a>
 8005cb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cb8:	1e13      	subs	r3, r2, #0
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	bf18      	it	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	0692      	lsls	r2, r2, #26
 8005cc2:	d42d      	bmi.n	8005d20 <_printf_common+0xb4>
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ccc:	47c0      	blx	r8
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d020      	beq.n	8005d14 <_printf_common+0xa8>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	68e5      	ldr	r5, [r4, #12]
 8005cd6:	f003 0306 	and.w	r3, r3, #6
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	bf18      	it	ne
 8005cde:	2500      	movne	r5, #0
 8005ce0:	6832      	ldr	r2, [r6, #0]
 8005ce2:	f04f 0600 	mov.w	r6, #0
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	bf08      	it	eq
 8005cea:	1aad      	subeq	r5, r5, r2
 8005cec:	6922      	ldr	r2, [r4, #16]
 8005cee:	bf08      	it	eq
 8005cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	bfc4      	itt	gt
 8005cf8:	1a9b      	subgt	r3, r3, r2
 8005cfa:	18ed      	addgt	r5, r5, r3
 8005cfc:	341a      	adds	r4, #26
 8005cfe:	42b5      	cmp	r5, r6
 8005d00:	d11a      	bne.n	8005d38 <_printf_common+0xcc>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e008      	b.n	8005d18 <_printf_common+0xac>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	47c0      	blx	r8
 8005d10:	3001      	adds	r0, #1
 8005d12:	d103      	bne.n	8005d1c <_printf_common+0xb0>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	e7c4      	b.n	8005caa <_printf_common+0x3e>
 8005d20:	2030      	movs	r0, #48	; 0x30
 8005d22:	18e1      	adds	r1, r4, r3
 8005d24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d2e:	4422      	add	r2, r4
 8005d30:	3302      	adds	r3, #2
 8005d32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d36:	e7c5      	b.n	8005cc4 <_printf_common+0x58>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c0      	blx	r8
 8005d42:	3001      	adds	r0, #1
 8005d44:	d0e6      	beq.n	8005d14 <_printf_common+0xa8>
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7d9      	b.n	8005cfe <_printf_common+0x92>
	...

08005d4c <_printf_i>:
 8005d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	7e0f      	ldrb	r7, [r1, #24]
 8005d52:	4691      	mov	r9, r2
 8005d54:	2f78      	cmp	r7, #120	; 0x78
 8005d56:	4680      	mov	r8, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	469a      	mov	sl, r3
 8005d5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d62:	d807      	bhi.n	8005d74 <_printf_i+0x28>
 8005d64:	2f62      	cmp	r7, #98	; 0x62
 8005d66:	d80a      	bhi.n	8005d7e <_printf_i+0x32>
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	f000 80d9 	beq.w	8005f20 <_printf_i+0x1d4>
 8005d6e:	2f58      	cmp	r7, #88	; 0x58
 8005d70:	f000 80a4 	beq.w	8005ebc <_printf_i+0x170>
 8005d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d7c:	e03a      	b.n	8005df4 <_printf_i+0xa8>
 8005d7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d82:	2b15      	cmp	r3, #21
 8005d84:	d8f6      	bhi.n	8005d74 <_printf_i+0x28>
 8005d86:	a101      	add	r1, pc, #4	; (adr r1, 8005d8c <_printf_i+0x40>)
 8005d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d8c:	08005de5 	.word	0x08005de5
 8005d90:	08005df9 	.word	0x08005df9
 8005d94:	08005d75 	.word	0x08005d75
 8005d98:	08005d75 	.word	0x08005d75
 8005d9c:	08005d75 	.word	0x08005d75
 8005da0:	08005d75 	.word	0x08005d75
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005d75 	.word	0x08005d75
 8005dac:	08005d75 	.word	0x08005d75
 8005db0:	08005d75 	.word	0x08005d75
 8005db4:	08005d75 	.word	0x08005d75
 8005db8:	08005f07 	.word	0x08005f07
 8005dbc:	08005e29 	.word	0x08005e29
 8005dc0:	08005ee9 	.word	0x08005ee9
 8005dc4:	08005d75 	.word	0x08005d75
 8005dc8:	08005d75 	.word	0x08005d75
 8005dcc:	08005f29 	.word	0x08005f29
 8005dd0:	08005d75 	.word	0x08005d75
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005d75 	.word	0x08005d75
 8005ddc:	08005d75 	.word	0x08005d75
 8005de0:	08005ef1 	.word	0x08005ef1
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	1d1a      	adds	r2, r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	602a      	str	r2, [r5, #0]
 8005dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0a4      	b.n	8005f42 <_printf_i+0x1f6>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	6829      	ldr	r1, [r5, #0]
 8005dfc:	0606      	lsls	r6, r0, #24
 8005dfe:	f101 0304 	add.w	r3, r1, #4
 8005e02:	d50a      	bpl.n	8005e1a <_printf_i+0xce>
 8005e04:	680e      	ldr	r6, [r1, #0]
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	2e00      	cmp	r6, #0
 8005e0a:	da03      	bge.n	8005e14 <_printf_i+0xc8>
 8005e0c:	232d      	movs	r3, #45	; 0x2d
 8005e0e:	4276      	negs	r6, r6
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e14:	230a      	movs	r3, #10
 8005e16:	485e      	ldr	r0, [pc, #376]	; (8005f90 <_printf_i+0x244>)
 8005e18:	e019      	b.n	8005e4e <_printf_i+0x102>
 8005e1a:	680e      	ldr	r6, [r1, #0]
 8005e1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	bf18      	it	ne
 8005e24:	b236      	sxthne	r6, r6
 8005e26:	e7ef      	b.n	8005e08 <_printf_i+0xbc>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	6820      	ldr	r0, [r4, #0]
 8005e2c:	1d19      	adds	r1, r3, #4
 8005e2e:	6029      	str	r1, [r5, #0]
 8005e30:	0601      	lsls	r1, r0, #24
 8005e32:	d501      	bpl.n	8005e38 <_printf_i+0xec>
 8005e34:	681e      	ldr	r6, [r3, #0]
 8005e36:	e002      	b.n	8005e3e <_printf_i+0xf2>
 8005e38:	0646      	lsls	r6, r0, #25
 8005e3a:	d5fb      	bpl.n	8005e34 <_printf_i+0xe8>
 8005e3c:	881e      	ldrh	r6, [r3, #0]
 8005e3e:	2f6f      	cmp	r7, #111	; 0x6f
 8005e40:	bf0c      	ite	eq
 8005e42:	2308      	moveq	r3, #8
 8005e44:	230a      	movne	r3, #10
 8005e46:	4852      	ldr	r0, [pc, #328]	; (8005f90 <_printf_i+0x244>)
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e4e:	6865      	ldr	r5, [r4, #4]
 8005e50:	2d00      	cmp	r5, #0
 8005e52:	bfa8      	it	ge
 8005e54:	6821      	ldrge	r1, [r4, #0]
 8005e56:	60a5      	str	r5, [r4, #8]
 8005e58:	bfa4      	itt	ge
 8005e5a:	f021 0104 	bicge.w	r1, r1, #4
 8005e5e:	6021      	strge	r1, [r4, #0]
 8005e60:	b90e      	cbnz	r6, 8005e66 <_printf_i+0x11a>
 8005e62:	2d00      	cmp	r5, #0
 8005e64:	d04d      	beq.n	8005f02 <_printf_i+0x1b6>
 8005e66:	4615      	mov	r5, r2
 8005e68:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e6c:	fb03 6711 	mls	r7, r3, r1, r6
 8005e70:	5dc7      	ldrb	r7, [r0, r7]
 8005e72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e76:	4637      	mov	r7, r6
 8005e78:	42bb      	cmp	r3, r7
 8005e7a:	460e      	mov	r6, r1
 8005e7c:	d9f4      	bls.n	8005e68 <_printf_i+0x11c>
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d10b      	bne.n	8005e9a <_printf_i+0x14e>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	07de      	lsls	r6, r3, #31
 8005e86:	d508      	bpl.n	8005e9a <_printf_i+0x14e>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	6861      	ldr	r1, [r4, #4]
 8005e8c:	4299      	cmp	r1, r3
 8005e8e:	bfde      	ittt	le
 8005e90:	2330      	movle	r3, #48	; 0x30
 8005e92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e9a:	1b52      	subs	r2, r2, r5
 8005e9c:	6122      	str	r2, [r4, #16]
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	f8cd a000 	str.w	sl, [sp]
 8005ea8:	aa03      	add	r2, sp, #12
 8005eaa:	f7ff fedf 	bl	8005c6c <_printf_common>
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d14c      	bne.n	8005f4c <_printf_i+0x200>
 8005eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb6:	b004      	add	sp, #16
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	4834      	ldr	r0, [pc, #208]	; (8005f90 <_printf_i+0x244>)
 8005ebe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ec2:	6829      	ldr	r1, [r5, #0]
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	f851 6b04 	ldr.w	r6, [r1], #4
 8005eca:	6029      	str	r1, [r5, #0]
 8005ecc:	061d      	lsls	r5, r3, #24
 8005ece:	d514      	bpl.n	8005efa <_printf_i+0x1ae>
 8005ed0:	07df      	lsls	r7, r3, #31
 8005ed2:	bf44      	itt	mi
 8005ed4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ed8:	6023      	strmi	r3, [r4, #0]
 8005eda:	b91e      	cbnz	r6, 8005ee4 <_printf_i+0x198>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	f023 0320 	bic.w	r3, r3, #32
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	e7af      	b.n	8005e48 <_printf_i+0xfc>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	2378      	movs	r3, #120	; 0x78
 8005ef2:	4828      	ldr	r0, [pc, #160]	; (8005f94 <_printf_i+0x248>)
 8005ef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ef8:	e7e3      	b.n	8005ec2 <_printf_i+0x176>
 8005efa:	0659      	lsls	r1, r3, #25
 8005efc:	bf48      	it	mi
 8005efe:	b2b6      	uxthmi	r6, r6
 8005f00:	e7e6      	b.n	8005ed0 <_printf_i+0x184>
 8005f02:	4615      	mov	r5, r2
 8005f04:	e7bb      	b.n	8005e7e <_printf_i+0x132>
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	6826      	ldr	r6, [r4, #0]
 8005f0a:	1d18      	adds	r0, r3, #4
 8005f0c:	6961      	ldr	r1, [r4, #20]
 8005f0e:	6028      	str	r0, [r5, #0]
 8005f10:	0635      	lsls	r5, r6, #24
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	d501      	bpl.n	8005f1a <_printf_i+0x1ce>
 8005f16:	6019      	str	r1, [r3, #0]
 8005f18:	e002      	b.n	8005f20 <_printf_i+0x1d4>
 8005f1a:	0670      	lsls	r0, r6, #25
 8005f1c:	d5fb      	bpl.n	8005f16 <_printf_i+0x1ca>
 8005f1e:	8019      	strh	r1, [r3, #0]
 8005f20:	2300      	movs	r3, #0
 8005f22:	4615      	mov	r5, r2
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	e7ba      	b.n	8005e9e <_printf_i+0x152>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	602a      	str	r2, [r5, #0]
 8005f30:	681d      	ldr	r5, [r3, #0]
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	4628      	mov	r0, r5
 8005f36:	f000 fed5 	bl	8006ce4 <memchr>
 8005f3a:	b108      	cbz	r0, 8005f40 <_printf_i+0x1f4>
 8005f3c:	1b40      	subs	r0, r0, r5
 8005f3e:	6060      	str	r0, [r4, #4]
 8005f40:	6863      	ldr	r3, [r4, #4]
 8005f42:	6123      	str	r3, [r4, #16]
 8005f44:	2300      	movs	r3, #0
 8005f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4a:	e7a8      	b.n	8005e9e <_printf_i+0x152>
 8005f4c:	462a      	mov	r2, r5
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	47d0      	blx	sl
 8005f56:	3001      	adds	r0, #1
 8005f58:	d0ab      	beq.n	8005eb2 <_printf_i+0x166>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	079b      	lsls	r3, r3, #30
 8005f5e:	d413      	bmi.n	8005f88 <_printf_i+0x23c>
 8005f60:	68e0      	ldr	r0, [r4, #12]
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	4298      	cmp	r0, r3
 8005f66:	bfb8      	it	lt
 8005f68:	4618      	movlt	r0, r3
 8005f6a:	e7a4      	b.n	8005eb6 <_printf_i+0x16a>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4632      	mov	r2, r6
 8005f70:	4649      	mov	r1, r9
 8005f72:	4640      	mov	r0, r8
 8005f74:	47d0      	blx	sl
 8005f76:	3001      	adds	r0, #1
 8005f78:	d09b      	beq.n	8005eb2 <_printf_i+0x166>
 8005f7a:	3501      	adds	r5, #1
 8005f7c:	68e3      	ldr	r3, [r4, #12]
 8005f7e:	9903      	ldr	r1, [sp, #12]
 8005f80:	1a5b      	subs	r3, r3, r1
 8005f82:	42ab      	cmp	r3, r5
 8005f84:	dcf2      	bgt.n	8005f6c <_printf_i+0x220>
 8005f86:	e7eb      	b.n	8005f60 <_printf_i+0x214>
 8005f88:	2500      	movs	r5, #0
 8005f8a:	f104 0619 	add.w	r6, r4, #25
 8005f8e:	e7f5      	b.n	8005f7c <_printf_i+0x230>
 8005f90:	08008566 	.word	0x08008566
 8005f94:	08008577 	.word	0x08008577

08005f98 <siprintf>:
 8005f98:	b40e      	push	{r1, r2, r3}
 8005f9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f9e:	b500      	push	{lr}
 8005fa0:	b09c      	sub	sp, #112	; 0x70
 8005fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fa4:	9002      	str	r0, [sp, #8]
 8005fa6:	9006      	str	r0, [sp, #24]
 8005fa8:	9107      	str	r1, [sp, #28]
 8005faa:	9104      	str	r1, [sp, #16]
 8005fac:	4808      	ldr	r0, [pc, #32]	; (8005fd0 <siprintf+0x38>)
 8005fae:	4909      	ldr	r1, [pc, #36]	; (8005fd4 <siprintf+0x3c>)
 8005fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb4:	9105      	str	r1, [sp, #20]
 8005fb6:	6800      	ldr	r0, [r0, #0]
 8005fb8:	a902      	add	r1, sp, #8
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	f001 fb7c 	bl	80076b8 <_svfiprintf_r>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	9b02      	ldr	r3, [sp, #8]
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	b01c      	add	sp, #112	; 0x70
 8005fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fcc:	b003      	add	sp, #12
 8005fce:	4770      	bx	lr
 8005fd0:	20000010 	.word	0x20000010
 8005fd4:	ffff0208 	.word	0xffff0208

08005fd8 <quorem>:
 8005fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	6903      	ldr	r3, [r0, #16]
 8005fde:	690c      	ldr	r4, [r1, #16]
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	42a3      	cmp	r3, r4
 8005fe4:	f2c0 8082 	blt.w	80060ec <quorem+0x114>
 8005fe8:	3c01      	subs	r4, #1
 8005fea:	f100 0514 	add.w	r5, r0, #20
 8005fee:	f101 0814 	add.w	r8, r1, #20
 8005ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006000:	3301      	adds	r3, #1
 8006002:	429a      	cmp	r2, r3
 8006004:	fbb2 f6f3 	udiv	r6, r2, r3
 8006008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800600c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006010:	d331      	bcc.n	8006076 <quorem+0x9e>
 8006012:	f04f 0e00 	mov.w	lr, #0
 8006016:	4640      	mov	r0, r8
 8006018:	46ac      	mov	ip, r5
 800601a:	46f2      	mov	sl, lr
 800601c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006020:	b293      	uxth	r3, r2
 8006022:	fb06 e303 	mla	r3, r6, r3, lr
 8006026:	0c12      	lsrs	r2, r2, #16
 8006028:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800602c:	b29b      	uxth	r3, r3
 800602e:	fb06 e202 	mla	r2, r6, r2, lr
 8006032:	ebaa 0303 	sub.w	r3, sl, r3
 8006036:	f8dc a000 	ldr.w	sl, [ip]
 800603a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800603e:	fa1f fa8a 	uxth.w	sl, sl
 8006042:	4453      	add	r3, sl
 8006044:	f8dc a000 	ldr.w	sl, [ip]
 8006048:	b292      	uxth	r2, r2
 800604a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800604e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006052:	b29b      	uxth	r3, r3
 8006054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006058:	4581      	cmp	r9, r0
 800605a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800605e:	f84c 3b04 	str.w	r3, [ip], #4
 8006062:	d2db      	bcs.n	800601c <quorem+0x44>
 8006064:	f855 300b 	ldr.w	r3, [r5, fp]
 8006068:	b92b      	cbnz	r3, 8006076 <quorem+0x9e>
 800606a:	9b01      	ldr	r3, [sp, #4]
 800606c:	3b04      	subs	r3, #4
 800606e:	429d      	cmp	r5, r3
 8006070:	461a      	mov	r2, r3
 8006072:	d32f      	bcc.n	80060d4 <quorem+0xfc>
 8006074:	613c      	str	r4, [r7, #16]
 8006076:	4638      	mov	r0, r7
 8006078:	f001 f8ce 	bl	8007218 <__mcmp>
 800607c:	2800      	cmp	r0, #0
 800607e:	db25      	blt.n	80060cc <quorem+0xf4>
 8006080:	4628      	mov	r0, r5
 8006082:	f04f 0c00 	mov.w	ip, #0
 8006086:	3601      	adds	r6, #1
 8006088:	f858 1b04 	ldr.w	r1, [r8], #4
 800608c:	f8d0 e000 	ldr.w	lr, [r0]
 8006090:	b28b      	uxth	r3, r1
 8006092:	ebac 0303 	sub.w	r3, ip, r3
 8006096:	fa1f f28e 	uxth.w	r2, lr
 800609a:	4413      	add	r3, r2
 800609c:	0c0a      	lsrs	r2, r1, #16
 800609e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ac:	45c1      	cmp	r9, r8
 80060ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060b2:	f840 3b04 	str.w	r3, [r0], #4
 80060b6:	d2e7      	bcs.n	8006088 <quorem+0xb0>
 80060b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060c0:	b922      	cbnz	r2, 80060cc <quorem+0xf4>
 80060c2:	3b04      	subs	r3, #4
 80060c4:	429d      	cmp	r5, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	d30a      	bcc.n	80060e0 <quorem+0x108>
 80060ca:	613c      	str	r4, [r7, #16]
 80060cc:	4630      	mov	r0, r6
 80060ce:	b003      	add	sp, #12
 80060d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	6812      	ldr	r2, [r2, #0]
 80060d6:	3b04      	subs	r3, #4
 80060d8:	2a00      	cmp	r2, #0
 80060da:	d1cb      	bne.n	8006074 <quorem+0x9c>
 80060dc:	3c01      	subs	r4, #1
 80060de:	e7c6      	b.n	800606e <quorem+0x96>
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	3b04      	subs	r3, #4
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	d1f0      	bne.n	80060ca <quorem+0xf2>
 80060e8:	3c01      	subs	r4, #1
 80060ea:	e7eb      	b.n	80060c4 <quorem+0xec>
 80060ec:	2000      	movs	r0, #0
 80060ee:	e7ee      	b.n	80060ce <quorem+0xf6>

080060f0 <_dtoa_r>:
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	4616      	mov	r6, r2
 80060f6:	461f      	mov	r7, r3
 80060f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80060fa:	b099      	sub	sp, #100	; 0x64
 80060fc:	4605      	mov	r5, r0
 80060fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006102:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006106:	b974      	cbnz	r4, 8006126 <_dtoa_r+0x36>
 8006108:	2010      	movs	r0, #16
 800610a:	f000 fde3 	bl	8006cd4 <malloc>
 800610e:	4602      	mov	r2, r0
 8006110:	6268      	str	r0, [r5, #36]	; 0x24
 8006112:	b920      	cbnz	r0, 800611e <_dtoa_r+0x2e>
 8006114:	21ea      	movs	r1, #234	; 0xea
 8006116:	4ba8      	ldr	r3, [pc, #672]	; (80063b8 <_dtoa_r+0x2c8>)
 8006118:	48a8      	ldr	r0, [pc, #672]	; (80063bc <_dtoa_r+0x2cc>)
 800611a:	f001 fbdd 	bl	80078d8 <__assert_func>
 800611e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006122:	6004      	str	r4, [r0, #0]
 8006124:	60c4      	str	r4, [r0, #12]
 8006126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006128:	6819      	ldr	r1, [r3, #0]
 800612a:	b151      	cbz	r1, 8006142 <_dtoa_r+0x52>
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	2301      	movs	r3, #1
 8006130:	4093      	lsls	r3, r2
 8006132:	604a      	str	r2, [r1, #4]
 8006134:	608b      	str	r3, [r1, #8]
 8006136:	4628      	mov	r0, r5
 8006138:	f000 fe30 	bl	8006d9c <_Bfree>
 800613c:	2200      	movs	r2, #0
 800613e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	1e3b      	subs	r3, r7, #0
 8006144:	bfaf      	iteee	ge
 8006146:	2300      	movge	r3, #0
 8006148:	2201      	movlt	r2, #1
 800614a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800614e:	9305      	strlt	r3, [sp, #20]
 8006150:	bfa8      	it	ge
 8006152:	f8c8 3000 	strge.w	r3, [r8]
 8006156:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800615a:	4b99      	ldr	r3, [pc, #612]	; (80063c0 <_dtoa_r+0x2d0>)
 800615c:	bfb8      	it	lt
 800615e:	f8c8 2000 	strlt.w	r2, [r8]
 8006162:	ea33 0309 	bics.w	r3, r3, r9
 8006166:	d119      	bne.n	800619c <_dtoa_r+0xac>
 8006168:	f242 730f 	movw	r3, #9999	; 0x270f
 800616c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006174:	4333      	orrs	r3, r6
 8006176:	f000 857f 	beq.w	8006c78 <_dtoa_r+0xb88>
 800617a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800617c:	b953      	cbnz	r3, 8006194 <_dtoa_r+0xa4>
 800617e:	4b91      	ldr	r3, [pc, #580]	; (80063c4 <_dtoa_r+0x2d4>)
 8006180:	e022      	b.n	80061c8 <_dtoa_r+0xd8>
 8006182:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <_dtoa_r+0x2d8>)
 8006184:	9303      	str	r3, [sp, #12]
 8006186:	3308      	adds	r3, #8
 8006188:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	9803      	ldr	r0, [sp, #12]
 800618e:	b019      	add	sp, #100	; 0x64
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	4b8b      	ldr	r3, [pc, #556]	; (80063c4 <_dtoa_r+0x2d4>)
 8006196:	9303      	str	r3, [sp, #12]
 8006198:	3303      	adds	r3, #3
 800619a:	e7f5      	b.n	8006188 <_dtoa_r+0x98>
 800619c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80061a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061a8:	2200      	movs	r2, #0
 80061aa:	2300      	movs	r3, #0
 80061ac:	f7fa fbfc 	bl	80009a8 <__aeabi_dcmpeq>
 80061b0:	4680      	mov	r8, r0
 80061b2:	b158      	cbz	r0, 80061cc <_dtoa_r+0xdc>
 80061b4:	2301      	movs	r3, #1
 80061b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8558 	beq.w	8006c72 <_dtoa_r+0xb82>
 80061c2:	4882      	ldr	r0, [pc, #520]	; (80063cc <_dtoa_r+0x2dc>)
 80061c4:	6018      	str	r0, [r3, #0]
 80061c6:	1e43      	subs	r3, r0, #1
 80061c8:	9303      	str	r3, [sp, #12]
 80061ca:	e7df      	b.n	800618c <_dtoa_r+0x9c>
 80061cc:	ab16      	add	r3, sp, #88	; 0x58
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	ab17      	add	r3, sp, #92	; 0x5c
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	4628      	mov	r0, r5
 80061d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061da:	f001 f8c5 	bl	8007368 <__d2b>
 80061de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061e2:	4683      	mov	fp, r0
 80061e4:	2c00      	cmp	r4, #0
 80061e6:	d07f      	beq.n	80062e8 <_dtoa_r+0x1f8>
 80061e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80061f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80061fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80061fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006202:	2200      	movs	r2, #0
 8006204:	4b72      	ldr	r3, [pc, #456]	; (80063d0 <_dtoa_r+0x2e0>)
 8006206:	f7f9 ffaf 	bl	8000168 <__aeabi_dsub>
 800620a:	a365      	add	r3, pc, #404	; (adr r3, 80063a0 <_dtoa_r+0x2b0>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa f962 	bl	80004d8 <__aeabi_dmul>
 8006214:	a364      	add	r3, pc, #400	; (adr r3, 80063a8 <_dtoa_r+0x2b8>)
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f7f9 ffa7 	bl	800016c <__adddf3>
 800621e:	4606      	mov	r6, r0
 8006220:	4620      	mov	r0, r4
 8006222:	460f      	mov	r7, r1
 8006224:	f7fa f8ee 	bl	8000404 <__aeabi_i2d>
 8006228:	a361      	add	r3, pc, #388	; (adr r3, 80063b0 <_dtoa_r+0x2c0>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7fa f953 	bl	80004d8 <__aeabi_dmul>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4630      	mov	r0, r6
 8006238:	4639      	mov	r1, r7
 800623a:	f7f9 ff97 	bl	800016c <__adddf3>
 800623e:	4606      	mov	r6, r0
 8006240:	460f      	mov	r7, r1
 8006242:	f7fa fbf9 	bl	8000a38 <__aeabi_d2iz>
 8006246:	2200      	movs	r2, #0
 8006248:	4682      	mov	sl, r0
 800624a:	2300      	movs	r3, #0
 800624c:	4630      	mov	r0, r6
 800624e:	4639      	mov	r1, r7
 8006250:	f7fa fbb4 	bl	80009bc <__aeabi_dcmplt>
 8006254:	b148      	cbz	r0, 800626a <_dtoa_r+0x17a>
 8006256:	4650      	mov	r0, sl
 8006258:	f7fa f8d4 	bl	8000404 <__aeabi_i2d>
 800625c:	4632      	mov	r2, r6
 800625e:	463b      	mov	r3, r7
 8006260:	f7fa fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8006264:	b908      	cbnz	r0, 800626a <_dtoa_r+0x17a>
 8006266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800626a:	f1ba 0f16 	cmp.w	sl, #22
 800626e:	d858      	bhi.n	8006322 <_dtoa_r+0x232>
 8006270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006274:	4b57      	ldr	r3, [pc, #348]	; (80063d4 <_dtoa_r+0x2e4>)
 8006276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f7fa fb9d 	bl	80009bc <__aeabi_dcmplt>
 8006282:	2800      	cmp	r0, #0
 8006284:	d04f      	beq.n	8006326 <_dtoa_r+0x236>
 8006286:	2300      	movs	r3, #0
 8006288:	f10a 3aff 	add.w	sl, sl, #4294967295
 800628c:	930f      	str	r3, [sp, #60]	; 0x3c
 800628e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006290:	1b1c      	subs	r4, r3, r4
 8006292:	1e63      	subs	r3, r4, #1
 8006294:	9309      	str	r3, [sp, #36]	; 0x24
 8006296:	bf49      	itett	mi
 8006298:	f1c4 0301 	rsbmi	r3, r4, #1
 800629c:	2300      	movpl	r3, #0
 800629e:	9306      	strmi	r3, [sp, #24]
 80062a0:	2300      	movmi	r3, #0
 80062a2:	bf54      	ite	pl
 80062a4:	9306      	strpl	r3, [sp, #24]
 80062a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80062a8:	f1ba 0f00 	cmp.w	sl, #0
 80062ac:	db3d      	blt.n	800632a <_dtoa_r+0x23a>
 80062ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80062b4:	4453      	add	r3, sl
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
 80062b8:	2300      	movs	r3, #0
 80062ba:	930a      	str	r3, [sp, #40]	; 0x28
 80062bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062be:	2b09      	cmp	r3, #9
 80062c0:	f200 808c 	bhi.w	80063dc <_dtoa_r+0x2ec>
 80062c4:	2b05      	cmp	r3, #5
 80062c6:	bfc4      	itt	gt
 80062c8:	3b04      	subgt	r3, #4
 80062ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80062cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ce:	bfc8      	it	gt
 80062d0:	2400      	movgt	r4, #0
 80062d2:	f1a3 0302 	sub.w	r3, r3, #2
 80062d6:	bfd8      	it	le
 80062d8:	2401      	movle	r4, #1
 80062da:	2b03      	cmp	r3, #3
 80062dc:	f200 808a 	bhi.w	80063f4 <_dtoa_r+0x304>
 80062e0:	e8df f003 	tbb	[pc, r3]
 80062e4:	5b4d4f2d 	.word	0x5b4d4f2d
 80062e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80062ec:	441c      	add	r4, r3
 80062ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	bfc3      	ittte	gt
 80062f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062fa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80062fe:	fa09 f303 	lslgt.w	r3, r9, r3
 8006302:	f1c3 0320 	rsble	r3, r3, #32
 8006306:	bfc6      	itte	gt
 8006308:	fa26 f000 	lsrgt.w	r0, r6, r0
 800630c:	4318      	orrgt	r0, r3
 800630e:	fa06 f003 	lslle.w	r0, r6, r3
 8006312:	f7fa f867 	bl	80003e4 <__aeabi_ui2d>
 8006316:	2301      	movs	r3, #1
 8006318:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800631c:	3c01      	subs	r4, #1
 800631e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006320:	e76f      	b.n	8006202 <_dtoa_r+0x112>
 8006322:	2301      	movs	r3, #1
 8006324:	e7b2      	b.n	800628c <_dtoa_r+0x19c>
 8006326:	900f      	str	r0, [sp, #60]	; 0x3c
 8006328:	e7b1      	b.n	800628e <_dtoa_r+0x19e>
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	eba3 030a 	sub.w	r3, r3, sl
 8006330:	9306      	str	r3, [sp, #24]
 8006332:	f1ca 0300 	rsb	r3, sl, #0
 8006336:	930a      	str	r3, [sp, #40]	; 0x28
 8006338:	2300      	movs	r3, #0
 800633a:	930e      	str	r3, [sp, #56]	; 0x38
 800633c:	e7be      	b.n	80062bc <_dtoa_r+0x1cc>
 800633e:	2300      	movs	r3, #0
 8006340:	930b      	str	r3, [sp, #44]	; 0x2c
 8006342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006344:	2b00      	cmp	r3, #0
 8006346:	dc58      	bgt.n	80063fa <_dtoa_r+0x30a>
 8006348:	f04f 0901 	mov.w	r9, #1
 800634c:	464b      	mov	r3, r9
 800634e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006352:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006356:	2200      	movs	r2, #0
 8006358:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800635a:	6042      	str	r2, [r0, #4]
 800635c:	2204      	movs	r2, #4
 800635e:	f102 0614 	add.w	r6, r2, #20
 8006362:	429e      	cmp	r6, r3
 8006364:	6841      	ldr	r1, [r0, #4]
 8006366:	d94e      	bls.n	8006406 <_dtoa_r+0x316>
 8006368:	4628      	mov	r0, r5
 800636a:	f000 fcd7 	bl	8006d1c <_Balloc>
 800636e:	9003      	str	r0, [sp, #12]
 8006370:	2800      	cmp	r0, #0
 8006372:	d14c      	bne.n	800640e <_dtoa_r+0x31e>
 8006374:	4602      	mov	r2, r0
 8006376:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800637a:	4b17      	ldr	r3, [pc, #92]	; (80063d8 <_dtoa_r+0x2e8>)
 800637c:	e6cc      	b.n	8006118 <_dtoa_r+0x28>
 800637e:	2301      	movs	r3, #1
 8006380:	e7de      	b.n	8006340 <_dtoa_r+0x250>
 8006382:	2300      	movs	r3, #0
 8006384:	930b      	str	r3, [sp, #44]	; 0x2c
 8006386:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006388:	eb0a 0903 	add.w	r9, sl, r3
 800638c:	f109 0301 	add.w	r3, r9, #1
 8006390:	2b01      	cmp	r3, #1
 8006392:	9308      	str	r3, [sp, #32]
 8006394:	bfb8      	it	lt
 8006396:	2301      	movlt	r3, #1
 8006398:	e7dd      	b.n	8006356 <_dtoa_r+0x266>
 800639a:	2301      	movs	r3, #1
 800639c:	e7f2      	b.n	8006384 <_dtoa_r+0x294>
 800639e:	bf00      	nop
 80063a0:	636f4361 	.word	0x636f4361
 80063a4:	3fd287a7 	.word	0x3fd287a7
 80063a8:	8b60c8b3 	.word	0x8b60c8b3
 80063ac:	3fc68a28 	.word	0x3fc68a28
 80063b0:	509f79fb 	.word	0x509f79fb
 80063b4:	3fd34413 	.word	0x3fd34413
 80063b8:	08008595 	.word	0x08008595
 80063bc:	080085ac 	.word	0x080085ac
 80063c0:	7ff00000 	.word	0x7ff00000
 80063c4:	08008591 	.word	0x08008591
 80063c8:	08008588 	.word	0x08008588
 80063cc:	08008565 	.word	0x08008565
 80063d0:	3ff80000 	.word	0x3ff80000
 80063d4:	080086a0 	.word	0x080086a0
 80063d8:	08008607 	.word	0x08008607
 80063dc:	2401      	movs	r4, #1
 80063de:	2300      	movs	r3, #0
 80063e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80063e2:	9322      	str	r3, [sp, #136]	; 0x88
 80063e4:	f04f 39ff 	mov.w	r9, #4294967295
 80063e8:	2200      	movs	r2, #0
 80063ea:	2312      	movs	r3, #18
 80063ec:	f8cd 9020 	str.w	r9, [sp, #32]
 80063f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80063f2:	e7b0      	b.n	8006356 <_dtoa_r+0x266>
 80063f4:	2301      	movs	r3, #1
 80063f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063f8:	e7f4      	b.n	80063e4 <_dtoa_r+0x2f4>
 80063fa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80063fe:	464b      	mov	r3, r9
 8006400:	f8cd 9020 	str.w	r9, [sp, #32]
 8006404:	e7a7      	b.n	8006356 <_dtoa_r+0x266>
 8006406:	3101      	adds	r1, #1
 8006408:	6041      	str	r1, [r0, #4]
 800640a:	0052      	lsls	r2, r2, #1
 800640c:	e7a7      	b.n	800635e <_dtoa_r+0x26e>
 800640e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006410:	9a03      	ldr	r2, [sp, #12]
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	9b08      	ldr	r3, [sp, #32]
 8006416:	2b0e      	cmp	r3, #14
 8006418:	f200 80a8 	bhi.w	800656c <_dtoa_r+0x47c>
 800641c:	2c00      	cmp	r4, #0
 800641e:	f000 80a5 	beq.w	800656c <_dtoa_r+0x47c>
 8006422:	f1ba 0f00 	cmp.w	sl, #0
 8006426:	dd34      	ble.n	8006492 <_dtoa_r+0x3a2>
 8006428:	4a9a      	ldr	r2, [pc, #616]	; (8006694 <_dtoa_r+0x5a4>)
 800642a:	f00a 030f 	and.w	r3, sl, #15
 800642e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006432:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006436:	e9d3 3400 	ldrd	r3, r4, [r3]
 800643a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800643e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006442:	d016      	beq.n	8006472 <_dtoa_r+0x382>
 8006444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006448:	4b93      	ldr	r3, [pc, #588]	; (8006698 <_dtoa_r+0x5a8>)
 800644a:	2703      	movs	r7, #3
 800644c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006450:	f7fa f96c 	bl	800072c <__aeabi_ddiv>
 8006454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006458:	f004 040f 	and.w	r4, r4, #15
 800645c:	4e8e      	ldr	r6, [pc, #568]	; (8006698 <_dtoa_r+0x5a8>)
 800645e:	b954      	cbnz	r4, 8006476 <_dtoa_r+0x386>
 8006460:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006468:	f7fa f960 	bl	800072c <__aeabi_ddiv>
 800646c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006470:	e029      	b.n	80064c6 <_dtoa_r+0x3d6>
 8006472:	2702      	movs	r7, #2
 8006474:	e7f2      	b.n	800645c <_dtoa_r+0x36c>
 8006476:	07e1      	lsls	r1, r4, #31
 8006478:	d508      	bpl.n	800648c <_dtoa_r+0x39c>
 800647a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800647e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006482:	f7fa f829 	bl	80004d8 <__aeabi_dmul>
 8006486:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800648a:	3701      	adds	r7, #1
 800648c:	1064      	asrs	r4, r4, #1
 800648e:	3608      	adds	r6, #8
 8006490:	e7e5      	b.n	800645e <_dtoa_r+0x36e>
 8006492:	f000 80a5 	beq.w	80065e0 <_dtoa_r+0x4f0>
 8006496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800649a:	f1ca 0400 	rsb	r4, sl, #0
 800649e:	4b7d      	ldr	r3, [pc, #500]	; (8006694 <_dtoa_r+0x5a4>)
 80064a0:	f004 020f 	and.w	r2, r4, #15
 80064a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f7fa f814 	bl	80004d8 <__aeabi_dmul>
 80064b0:	2702      	movs	r7, #2
 80064b2:	2300      	movs	r3, #0
 80064b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b8:	4e77      	ldr	r6, [pc, #476]	; (8006698 <_dtoa_r+0x5a8>)
 80064ba:	1124      	asrs	r4, r4, #4
 80064bc:	2c00      	cmp	r4, #0
 80064be:	f040 8084 	bne.w	80065ca <_dtoa_r+0x4da>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1d2      	bne.n	800646c <_dtoa_r+0x37c>
 80064c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 808b 	beq.w	80065e4 <_dtoa_r+0x4f4>
 80064ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064da:	2200      	movs	r2, #0
 80064dc:	4b6f      	ldr	r3, [pc, #444]	; (800669c <_dtoa_r+0x5ac>)
 80064de:	f7fa fa6d 	bl	80009bc <__aeabi_dcmplt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d07e      	beq.n	80065e4 <_dtoa_r+0x4f4>
 80064e6:	9b08      	ldr	r3, [sp, #32]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d07b      	beq.n	80065e4 <_dtoa_r+0x4f4>
 80064ec:	f1b9 0f00 	cmp.w	r9, #0
 80064f0:	dd38      	ble.n	8006564 <_dtoa_r+0x474>
 80064f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064f6:	2200      	movs	r2, #0
 80064f8:	4b69      	ldr	r3, [pc, #420]	; (80066a0 <_dtoa_r+0x5b0>)
 80064fa:	f7f9 ffed 	bl	80004d8 <__aeabi_dmul>
 80064fe:	464c      	mov	r4, r9
 8006500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006504:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006508:	3701      	adds	r7, #1
 800650a:	4638      	mov	r0, r7
 800650c:	f7f9 ff7a 	bl	8000404 <__aeabi_i2d>
 8006510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006514:	f7f9 ffe0 	bl	80004d8 <__aeabi_dmul>
 8006518:	2200      	movs	r2, #0
 800651a:	4b62      	ldr	r3, [pc, #392]	; (80066a4 <_dtoa_r+0x5b4>)
 800651c:	f7f9 fe26 	bl	800016c <__adddf3>
 8006520:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006524:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006528:	9611      	str	r6, [sp, #68]	; 0x44
 800652a:	2c00      	cmp	r4, #0
 800652c:	d15d      	bne.n	80065ea <_dtoa_r+0x4fa>
 800652e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006532:	2200      	movs	r2, #0
 8006534:	4b5c      	ldr	r3, [pc, #368]	; (80066a8 <_dtoa_r+0x5b8>)
 8006536:	f7f9 fe17 	bl	8000168 <__aeabi_dsub>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006542:	4633      	mov	r3, r6
 8006544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006546:	f7fa fa57 	bl	80009f8 <__aeabi_dcmpgt>
 800654a:	2800      	cmp	r0, #0
 800654c:	f040 829c 	bne.w	8006a88 <_dtoa_r+0x998>
 8006550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006556:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800655a:	f7fa fa2f 	bl	80009bc <__aeabi_dcmplt>
 800655e:	2800      	cmp	r0, #0
 8006560:	f040 8290 	bne.w	8006a84 <_dtoa_r+0x994>
 8006564:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006568:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800656c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800656e:	2b00      	cmp	r3, #0
 8006570:	f2c0 8152 	blt.w	8006818 <_dtoa_r+0x728>
 8006574:	f1ba 0f0e 	cmp.w	sl, #14
 8006578:	f300 814e 	bgt.w	8006818 <_dtoa_r+0x728>
 800657c:	4b45      	ldr	r3, [pc, #276]	; (8006694 <_dtoa_r+0x5a4>)
 800657e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006582:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006586:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800658a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800658c:	2b00      	cmp	r3, #0
 800658e:	f280 80db 	bge.w	8006748 <_dtoa_r+0x658>
 8006592:	9b08      	ldr	r3, [sp, #32]
 8006594:	2b00      	cmp	r3, #0
 8006596:	f300 80d7 	bgt.w	8006748 <_dtoa_r+0x658>
 800659a:	f040 8272 	bne.w	8006a82 <_dtoa_r+0x992>
 800659e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065a2:	2200      	movs	r2, #0
 80065a4:	4b40      	ldr	r3, [pc, #256]	; (80066a8 <_dtoa_r+0x5b8>)
 80065a6:	f7f9 ff97 	bl	80004d8 <__aeabi_dmul>
 80065aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ae:	f7fa fa19 	bl	80009e4 <__aeabi_dcmpge>
 80065b2:	9c08      	ldr	r4, [sp, #32]
 80065b4:	4626      	mov	r6, r4
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f040 8248 	bne.w	8006a4c <_dtoa_r+0x95c>
 80065bc:	2331      	movs	r3, #49	; 0x31
 80065be:	9f03      	ldr	r7, [sp, #12]
 80065c0:	f10a 0a01 	add.w	sl, sl, #1
 80065c4:	f807 3b01 	strb.w	r3, [r7], #1
 80065c8:	e244      	b.n	8006a54 <_dtoa_r+0x964>
 80065ca:	07e2      	lsls	r2, r4, #31
 80065cc:	d505      	bpl.n	80065da <_dtoa_r+0x4ea>
 80065ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065d2:	f7f9 ff81 	bl	80004d8 <__aeabi_dmul>
 80065d6:	2301      	movs	r3, #1
 80065d8:	3701      	adds	r7, #1
 80065da:	1064      	asrs	r4, r4, #1
 80065dc:	3608      	adds	r6, #8
 80065de:	e76d      	b.n	80064bc <_dtoa_r+0x3cc>
 80065e0:	2702      	movs	r7, #2
 80065e2:	e770      	b.n	80064c6 <_dtoa_r+0x3d6>
 80065e4:	46d0      	mov	r8, sl
 80065e6:	9c08      	ldr	r4, [sp, #32]
 80065e8:	e78f      	b.n	800650a <_dtoa_r+0x41a>
 80065ea:	9903      	ldr	r1, [sp, #12]
 80065ec:	4b29      	ldr	r3, [pc, #164]	; (8006694 <_dtoa_r+0x5a4>)
 80065ee:	4421      	add	r1, r4
 80065f0:	9112      	str	r1, [sp, #72]	; 0x48
 80065f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80065fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006600:	2900      	cmp	r1, #0
 8006602:	d055      	beq.n	80066b0 <_dtoa_r+0x5c0>
 8006604:	2000      	movs	r0, #0
 8006606:	4929      	ldr	r1, [pc, #164]	; (80066ac <_dtoa_r+0x5bc>)
 8006608:	f7fa f890 	bl	800072c <__aeabi_ddiv>
 800660c:	463b      	mov	r3, r7
 800660e:	4632      	mov	r2, r6
 8006610:	f7f9 fdaa 	bl	8000168 <__aeabi_dsub>
 8006614:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006618:	9f03      	ldr	r7, [sp, #12]
 800661a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800661e:	f7fa fa0b 	bl	8000a38 <__aeabi_d2iz>
 8006622:	4604      	mov	r4, r0
 8006624:	f7f9 feee 	bl	8000404 <__aeabi_i2d>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006630:	f7f9 fd9a 	bl	8000168 <__aeabi_dsub>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	3430      	adds	r4, #48	; 0x30
 800663a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800663e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006642:	f807 4b01 	strb.w	r4, [r7], #1
 8006646:	f7fa f9b9 	bl	80009bc <__aeabi_dcmplt>
 800664a:	2800      	cmp	r0, #0
 800664c:	d174      	bne.n	8006738 <_dtoa_r+0x648>
 800664e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006652:	2000      	movs	r0, #0
 8006654:	4911      	ldr	r1, [pc, #68]	; (800669c <_dtoa_r+0x5ac>)
 8006656:	f7f9 fd87 	bl	8000168 <__aeabi_dsub>
 800665a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800665e:	f7fa f9ad 	bl	80009bc <__aeabi_dcmplt>
 8006662:	2800      	cmp	r0, #0
 8006664:	f040 80b7 	bne.w	80067d6 <_dtoa_r+0x6e6>
 8006668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800666a:	429f      	cmp	r7, r3
 800666c:	f43f af7a 	beq.w	8006564 <_dtoa_r+0x474>
 8006670:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006674:	2200      	movs	r2, #0
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <_dtoa_r+0x5b0>)
 8006678:	f7f9 ff2e 	bl	80004d8 <__aeabi_dmul>
 800667c:	2200      	movs	r2, #0
 800667e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006686:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <_dtoa_r+0x5b0>)
 8006688:	f7f9 ff26 	bl	80004d8 <__aeabi_dmul>
 800668c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006690:	e7c3      	b.n	800661a <_dtoa_r+0x52a>
 8006692:	bf00      	nop
 8006694:	080086a0 	.word	0x080086a0
 8006698:	08008678 	.word	0x08008678
 800669c:	3ff00000 	.word	0x3ff00000
 80066a0:	40240000 	.word	0x40240000
 80066a4:	401c0000 	.word	0x401c0000
 80066a8:	40140000 	.word	0x40140000
 80066ac:	3fe00000 	.word	0x3fe00000
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7f9 ff10 	bl	80004d8 <__aeabi_dmul>
 80066b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066be:	9c03      	ldr	r4, [sp, #12]
 80066c0:	9314      	str	r3, [sp, #80]	; 0x50
 80066c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c6:	f7fa f9b7 	bl	8000a38 <__aeabi_d2iz>
 80066ca:	9015      	str	r0, [sp, #84]	; 0x54
 80066cc:	f7f9 fe9a 	bl	8000404 <__aeabi_i2d>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066d8:	f7f9 fd46 	bl	8000168 <__aeabi_dsub>
 80066dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066de:	4606      	mov	r6, r0
 80066e0:	3330      	adds	r3, #48	; 0x30
 80066e2:	f804 3b01 	strb.w	r3, [r4], #1
 80066e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066e8:	460f      	mov	r7, r1
 80066ea:	429c      	cmp	r4, r3
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	d124      	bne.n	800673c <_dtoa_r+0x64c>
 80066f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066f6:	4bb0      	ldr	r3, [pc, #704]	; (80069b8 <_dtoa_r+0x8c8>)
 80066f8:	f7f9 fd38 	bl	800016c <__adddf3>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7fa f978 	bl	80009f8 <__aeabi_dcmpgt>
 8006708:	2800      	cmp	r0, #0
 800670a:	d163      	bne.n	80067d4 <_dtoa_r+0x6e4>
 800670c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006710:	2000      	movs	r0, #0
 8006712:	49a9      	ldr	r1, [pc, #676]	; (80069b8 <_dtoa_r+0x8c8>)
 8006714:	f7f9 fd28 	bl	8000168 <__aeabi_dsub>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4630      	mov	r0, r6
 800671e:	4639      	mov	r1, r7
 8006720:	f7fa f94c 	bl	80009bc <__aeabi_dcmplt>
 8006724:	2800      	cmp	r0, #0
 8006726:	f43f af1d 	beq.w	8006564 <_dtoa_r+0x474>
 800672a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800672c:	1e7b      	subs	r3, r7, #1
 800672e:	9314      	str	r3, [sp, #80]	; 0x50
 8006730:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006734:	2b30      	cmp	r3, #48	; 0x30
 8006736:	d0f8      	beq.n	800672a <_dtoa_r+0x63a>
 8006738:	46c2      	mov	sl, r8
 800673a:	e03b      	b.n	80067b4 <_dtoa_r+0x6c4>
 800673c:	4b9f      	ldr	r3, [pc, #636]	; (80069bc <_dtoa_r+0x8cc>)
 800673e:	f7f9 fecb 	bl	80004d8 <__aeabi_dmul>
 8006742:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006746:	e7bc      	b.n	80066c2 <_dtoa_r+0x5d2>
 8006748:	9f03      	ldr	r7, [sp, #12]
 800674a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800674e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006752:	4640      	mov	r0, r8
 8006754:	4649      	mov	r1, r9
 8006756:	f7f9 ffe9 	bl	800072c <__aeabi_ddiv>
 800675a:	f7fa f96d 	bl	8000a38 <__aeabi_d2iz>
 800675e:	4604      	mov	r4, r0
 8006760:	f7f9 fe50 	bl	8000404 <__aeabi_i2d>
 8006764:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006768:	f7f9 feb6 	bl	80004d8 <__aeabi_dmul>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4640      	mov	r0, r8
 8006772:	4649      	mov	r1, r9
 8006774:	f7f9 fcf8 	bl	8000168 <__aeabi_dsub>
 8006778:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800677c:	f807 6b01 	strb.w	r6, [r7], #1
 8006780:	9e03      	ldr	r6, [sp, #12]
 8006782:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006786:	1bbe      	subs	r6, r7, r6
 8006788:	45b4      	cmp	ip, r6
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	d136      	bne.n	80067fe <_dtoa_r+0x70e>
 8006790:	f7f9 fcec 	bl	800016c <__adddf3>
 8006794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006798:	4680      	mov	r8, r0
 800679a:	4689      	mov	r9, r1
 800679c:	f7fa f92c 	bl	80009f8 <__aeabi_dcmpgt>
 80067a0:	bb58      	cbnz	r0, 80067fa <_dtoa_r+0x70a>
 80067a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067a6:	4640      	mov	r0, r8
 80067a8:	4649      	mov	r1, r9
 80067aa:	f7fa f8fd 	bl	80009a8 <__aeabi_dcmpeq>
 80067ae:	b108      	cbz	r0, 80067b4 <_dtoa_r+0x6c4>
 80067b0:	07e1      	lsls	r1, r4, #31
 80067b2:	d422      	bmi.n	80067fa <_dtoa_r+0x70a>
 80067b4:	4628      	mov	r0, r5
 80067b6:	4659      	mov	r1, fp
 80067b8:	f000 faf0 	bl	8006d9c <_Bfree>
 80067bc:	2300      	movs	r3, #0
 80067be:	703b      	strb	r3, [r7, #0]
 80067c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80067c2:	f10a 0001 	add.w	r0, sl, #1
 80067c6:	6018      	str	r0, [r3, #0]
 80067c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f43f acde 	beq.w	800618c <_dtoa_r+0x9c>
 80067d0:	601f      	str	r7, [r3, #0]
 80067d2:	e4db      	b.n	800618c <_dtoa_r+0x9c>
 80067d4:	4627      	mov	r7, r4
 80067d6:	463b      	mov	r3, r7
 80067d8:	461f      	mov	r7, r3
 80067da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067de:	2a39      	cmp	r2, #57	; 0x39
 80067e0:	d107      	bne.n	80067f2 <_dtoa_r+0x702>
 80067e2:	9a03      	ldr	r2, [sp, #12]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d1f7      	bne.n	80067d8 <_dtoa_r+0x6e8>
 80067e8:	2230      	movs	r2, #48	; 0x30
 80067ea:	9903      	ldr	r1, [sp, #12]
 80067ec:	f108 0801 	add.w	r8, r8, #1
 80067f0:	700a      	strb	r2, [r1, #0]
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	3201      	adds	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	e79e      	b.n	8006738 <_dtoa_r+0x648>
 80067fa:	46d0      	mov	r8, sl
 80067fc:	e7eb      	b.n	80067d6 <_dtoa_r+0x6e6>
 80067fe:	2200      	movs	r2, #0
 8006800:	4b6e      	ldr	r3, [pc, #440]	; (80069bc <_dtoa_r+0x8cc>)
 8006802:	f7f9 fe69 	bl	80004d8 <__aeabi_dmul>
 8006806:	2200      	movs	r2, #0
 8006808:	2300      	movs	r3, #0
 800680a:	4680      	mov	r8, r0
 800680c:	4689      	mov	r9, r1
 800680e:	f7fa f8cb 	bl	80009a8 <__aeabi_dcmpeq>
 8006812:	2800      	cmp	r0, #0
 8006814:	d09b      	beq.n	800674e <_dtoa_r+0x65e>
 8006816:	e7cd      	b.n	80067b4 <_dtoa_r+0x6c4>
 8006818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800681a:	2a00      	cmp	r2, #0
 800681c:	f000 80d0 	beq.w	80069c0 <_dtoa_r+0x8d0>
 8006820:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006822:	2a01      	cmp	r2, #1
 8006824:	f300 80ae 	bgt.w	8006984 <_dtoa_r+0x894>
 8006828:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800682a:	2a00      	cmp	r2, #0
 800682c:	f000 80a6 	beq.w	800697c <_dtoa_r+0x88c>
 8006830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006834:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006836:	9f06      	ldr	r7, [sp, #24]
 8006838:	9a06      	ldr	r2, [sp, #24]
 800683a:	2101      	movs	r1, #1
 800683c:	441a      	add	r2, r3
 800683e:	9206      	str	r2, [sp, #24]
 8006840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006842:	4628      	mov	r0, r5
 8006844:	441a      	add	r2, r3
 8006846:	9209      	str	r2, [sp, #36]	; 0x24
 8006848:	f000 fb5e 	bl	8006f08 <__i2b>
 800684c:	4606      	mov	r6, r0
 800684e:	2f00      	cmp	r7, #0
 8006850:	dd0c      	ble.n	800686c <_dtoa_r+0x77c>
 8006852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	dd09      	ble.n	800686c <_dtoa_r+0x77c>
 8006858:	42bb      	cmp	r3, r7
 800685a:	bfa8      	it	ge
 800685c:	463b      	movge	r3, r7
 800685e:	9a06      	ldr	r2, [sp, #24]
 8006860:	1aff      	subs	r7, r7, r3
 8006862:	1ad2      	subs	r2, r2, r3
 8006864:	9206      	str	r2, [sp, #24]
 8006866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	9309      	str	r3, [sp, #36]	; 0x24
 800686c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686e:	b1f3      	cbz	r3, 80068ae <_dtoa_r+0x7be>
 8006870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 80a8 	beq.w	80069c8 <_dtoa_r+0x8d8>
 8006878:	2c00      	cmp	r4, #0
 800687a:	dd10      	ble.n	800689e <_dtoa_r+0x7ae>
 800687c:	4631      	mov	r1, r6
 800687e:	4622      	mov	r2, r4
 8006880:	4628      	mov	r0, r5
 8006882:	f000 fbff 	bl	8007084 <__pow5mult>
 8006886:	465a      	mov	r2, fp
 8006888:	4601      	mov	r1, r0
 800688a:	4606      	mov	r6, r0
 800688c:	4628      	mov	r0, r5
 800688e:	f000 fb51 	bl	8006f34 <__multiply>
 8006892:	4680      	mov	r8, r0
 8006894:	4659      	mov	r1, fp
 8006896:	4628      	mov	r0, r5
 8006898:	f000 fa80 	bl	8006d9c <_Bfree>
 800689c:	46c3      	mov	fp, r8
 800689e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a0:	1b1a      	subs	r2, r3, r4
 80068a2:	d004      	beq.n	80068ae <_dtoa_r+0x7be>
 80068a4:	4659      	mov	r1, fp
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fbec 	bl	8007084 <__pow5mult>
 80068ac:	4683      	mov	fp, r0
 80068ae:	2101      	movs	r1, #1
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 fb29 	bl	8006f08 <__i2b>
 80068b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b8:	4604      	mov	r4, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f340 8086 	ble.w	80069cc <_dtoa_r+0x8dc>
 80068c0:	461a      	mov	r2, r3
 80068c2:	4601      	mov	r1, r0
 80068c4:	4628      	mov	r0, r5
 80068c6:	f000 fbdd 	bl	8007084 <__pow5mult>
 80068ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068cc:	4604      	mov	r4, r0
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	dd7f      	ble.n	80069d2 <_dtoa_r+0x8e2>
 80068d2:	f04f 0800 	mov.w	r8, #0
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068dc:	6918      	ldr	r0, [r3, #16]
 80068de:	f000 fac5 	bl	8006e6c <__hi0bits>
 80068e2:	f1c0 0020 	rsb	r0, r0, #32
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	4418      	add	r0, r3
 80068ea:	f010 001f 	ands.w	r0, r0, #31
 80068ee:	f000 8092 	beq.w	8006a16 <_dtoa_r+0x926>
 80068f2:	f1c0 0320 	rsb	r3, r0, #32
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	f340 808a 	ble.w	8006a10 <_dtoa_r+0x920>
 80068fc:	f1c0 001c 	rsb	r0, r0, #28
 8006900:	9b06      	ldr	r3, [sp, #24]
 8006902:	4407      	add	r7, r0
 8006904:	4403      	add	r3, r0
 8006906:	9306      	str	r3, [sp, #24]
 8006908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690a:	4403      	add	r3, r0
 800690c:	9309      	str	r3, [sp, #36]	; 0x24
 800690e:	9b06      	ldr	r3, [sp, #24]
 8006910:	2b00      	cmp	r3, #0
 8006912:	dd05      	ble.n	8006920 <_dtoa_r+0x830>
 8006914:	4659      	mov	r1, fp
 8006916:	461a      	mov	r2, r3
 8006918:	4628      	mov	r0, r5
 800691a:	f000 fc0d 	bl	8007138 <__lshift>
 800691e:	4683      	mov	fp, r0
 8006920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	dd05      	ble.n	8006932 <_dtoa_r+0x842>
 8006926:	4621      	mov	r1, r4
 8006928:	461a      	mov	r2, r3
 800692a:	4628      	mov	r0, r5
 800692c:	f000 fc04 	bl	8007138 <__lshift>
 8006930:	4604      	mov	r4, r0
 8006932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d070      	beq.n	8006a1a <_dtoa_r+0x92a>
 8006938:	4621      	mov	r1, r4
 800693a:	4658      	mov	r0, fp
 800693c:	f000 fc6c 	bl	8007218 <__mcmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	da6a      	bge.n	8006a1a <_dtoa_r+0x92a>
 8006944:	2300      	movs	r3, #0
 8006946:	4659      	mov	r1, fp
 8006948:	220a      	movs	r2, #10
 800694a:	4628      	mov	r0, r5
 800694c:	f000 fa48 	bl	8006de0 <__multadd>
 8006950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006952:	4683      	mov	fp, r0
 8006954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8194 	beq.w	8006c86 <_dtoa_r+0xb96>
 800695e:	4631      	mov	r1, r6
 8006960:	2300      	movs	r3, #0
 8006962:	220a      	movs	r2, #10
 8006964:	4628      	mov	r0, r5
 8006966:	f000 fa3b 	bl	8006de0 <__multadd>
 800696a:	f1b9 0f00 	cmp.w	r9, #0
 800696e:	4606      	mov	r6, r0
 8006970:	f300 8093 	bgt.w	8006a9a <_dtoa_r+0x9aa>
 8006974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006976:	2b02      	cmp	r3, #2
 8006978:	dc57      	bgt.n	8006a2a <_dtoa_r+0x93a>
 800697a:	e08e      	b.n	8006a9a <_dtoa_r+0x9aa>
 800697c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800697e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006982:	e757      	b.n	8006834 <_dtoa_r+0x744>
 8006984:	9b08      	ldr	r3, [sp, #32]
 8006986:	1e5c      	subs	r4, r3, #1
 8006988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800698a:	42a3      	cmp	r3, r4
 800698c:	bfb7      	itett	lt
 800698e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006990:	1b1c      	subge	r4, r3, r4
 8006992:	1ae2      	sublt	r2, r4, r3
 8006994:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006996:	bfbe      	ittt	lt
 8006998:	940a      	strlt	r4, [sp, #40]	; 0x28
 800699a:	189b      	addlt	r3, r3, r2
 800699c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800699e:	9b08      	ldr	r3, [sp, #32]
 80069a0:	bfb8      	it	lt
 80069a2:	2400      	movlt	r4, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bfbb      	ittet	lt
 80069a8:	9b06      	ldrlt	r3, [sp, #24]
 80069aa:	9a08      	ldrlt	r2, [sp, #32]
 80069ac:	9f06      	ldrge	r7, [sp, #24]
 80069ae:	1a9f      	sublt	r7, r3, r2
 80069b0:	bfac      	ite	ge
 80069b2:	9b08      	ldrge	r3, [sp, #32]
 80069b4:	2300      	movlt	r3, #0
 80069b6:	e73f      	b.n	8006838 <_dtoa_r+0x748>
 80069b8:	3fe00000 	.word	0x3fe00000
 80069bc:	40240000 	.word	0x40240000
 80069c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069c2:	9f06      	ldr	r7, [sp, #24]
 80069c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80069c6:	e742      	b.n	800684e <_dtoa_r+0x75e>
 80069c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ca:	e76b      	b.n	80068a4 <_dtoa_r+0x7b4>
 80069cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	dc19      	bgt.n	8006a06 <_dtoa_r+0x916>
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	b9bb      	cbnz	r3, 8006a06 <_dtoa_r+0x916>
 80069d6:	9b05      	ldr	r3, [sp, #20]
 80069d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069dc:	b99b      	cbnz	r3, 8006a06 <_dtoa_r+0x916>
 80069de:	9b05      	ldr	r3, [sp, #20]
 80069e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	0d1b      	lsrs	r3, r3, #20
 80069e6:	051b      	lsls	r3, r3, #20
 80069e8:	b183      	cbz	r3, 8006a0c <_dtoa_r+0x91c>
 80069ea:	f04f 0801 	mov.w	r8, #1
 80069ee:	9b06      	ldr	r3, [sp, #24]
 80069f0:	3301      	adds	r3, #1
 80069f2:	9306      	str	r3, [sp, #24]
 80069f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f6:	3301      	adds	r3, #1
 80069f8:	9309      	str	r3, [sp, #36]	; 0x24
 80069fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f47f af6a 	bne.w	80068d6 <_dtoa_r+0x7e6>
 8006a02:	2001      	movs	r0, #1
 8006a04:	e76f      	b.n	80068e6 <_dtoa_r+0x7f6>
 8006a06:	f04f 0800 	mov.w	r8, #0
 8006a0a:	e7f6      	b.n	80069fa <_dtoa_r+0x90a>
 8006a0c:	4698      	mov	r8, r3
 8006a0e:	e7f4      	b.n	80069fa <_dtoa_r+0x90a>
 8006a10:	f43f af7d 	beq.w	800690e <_dtoa_r+0x81e>
 8006a14:	4618      	mov	r0, r3
 8006a16:	301c      	adds	r0, #28
 8006a18:	e772      	b.n	8006900 <_dtoa_r+0x810>
 8006a1a:	9b08      	ldr	r3, [sp, #32]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dc36      	bgt.n	8006a8e <_dtoa_r+0x99e>
 8006a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	dd33      	ble.n	8006a8e <_dtoa_r+0x99e>
 8006a26:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a2a:	f1b9 0f00 	cmp.w	r9, #0
 8006a2e:	d10d      	bne.n	8006a4c <_dtoa_r+0x95c>
 8006a30:	4621      	mov	r1, r4
 8006a32:	464b      	mov	r3, r9
 8006a34:	2205      	movs	r2, #5
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 f9d2 	bl	8006de0 <__multadd>
 8006a3c:	4601      	mov	r1, r0
 8006a3e:	4604      	mov	r4, r0
 8006a40:	4658      	mov	r0, fp
 8006a42:	f000 fbe9 	bl	8007218 <__mcmp>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f73f adb8 	bgt.w	80065bc <_dtoa_r+0x4cc>
 8006a4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a4e:	9f03      	ldr	r7, [sp, #12]
 8006a50:	ea6f 0a03 	mvn.w	sl, r3
 8006a54:	f04f 0800 	mov.w	r8, #0
 8006a58:	4621      	mov	r1, r4
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 f99e 	bl	8006d9c <_Bfree>
 8006a60:	2e00      	cmp	r6, #0
 8006a62:	f43f aea7 	beq.w	80067b4 <_dtoa_r+0x6c4>
 8006a66:	f1b8 0f00 	cmp.w	r8, #0
 8006a6a:	d005      	beq.n	8006a78 <_dtoa_r+0x988>
 8006a6c:	45b0      	cmp	r8, r6
 8006a6e:	d003      	beq.n	8006a78 <_dtoa_r+0x988>
 8006a70:	4641      	mov	r1, r8
 8006a72:	4628      	mov	r0, r5
 8006a74:	f000 f992 	bl	8006d9c <_Bfree>
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 f98e 	bl	8006d9c <_Bfree>
 8006a80:	e698      	b.n	80067b4 <_dtoa_r+0x6c4>
 8006a82:	2400      	movs	r4, #0
 8006a84:	4626      	mov	r6, r4
 8006a86:	e7e1      	b.n	8006a4c <_dtoa_r+0x95c>
 8006a88:	46c2      	mov	sl, r8
 8006a8a:	4626      	mov	r6, r4
 8006a8c:	e596      	b.n	80065bc <_dtoa_r+0x4cc>
 8006a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80fd 	beq.w	8006c94 <_dtoa_r+0xba4>
 8006a9a:	2f00      	cmp	r7, #0
 8006a9c:	dd05      	ble.n	8006aaa <_dtoa_r+0x9ba>
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	463a      	mov	r2, r7
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f000 fb48 	bl	8007138 <__lshift>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	f1b8 0f00 	cmp.w	r8, #0
 8006aae:	d05c      	beq.n	8006b6a <_dtoa_r+0xa7a>
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	6871      	ldr	r1, [r6, #4]
 8006ab4:	f000 f932 	bl	8006d1c <_Balloc>
 8006ab8:	4607      	mov	r7, r0
 8006aba:	b928      	cbnz	r0, 8006ac8 <_dtoa_r+0x9d8>
 8006abc:	4602      	mov	r2, r0
 8006abe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ac2:	4b7f      	ldr	r3, [pc, #508]	; (8006cc0 <_dtoa_r+0xbd0>)
 8006ac4:	f7ff bb28 	b.w	8006118 <_dtoa_r+0x28>
 8006ac8:	6932      	ldr	r2, [r6, #16]
 8006aca:	f106 010c 	add.w	r1, r6, #12
 8006ace:	3202      	adds	r2, #2
 8006ad0:	0092      	lsls	r2, r2, #2
 8006ad2:	300c      	adds	r0, #12
 8006ad4:	f000 f914 	bl	8006d00 <memcpy>
 8006ad8:	2201      	movs	r2, #1
 8006ada:	4639      	mov	r1, r7
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 fb2b 	bl	8007138 <__lshift>
 8006ae2:	46b0      	mov	r8, r6
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	9308      	str	r3, [sp, #32]
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	444b      	add	r3, r9
 8006af0:	930a      	str	r3, [sp, #40]	; 0x28
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	9309      	str	r3, [sp, #36]	; 0x24
 8006afa:	9b08      	ldr	r3, [sp, #32]
 8006afc:	4621      	mov	r1, r4
 8006afe:	3b01      	subs	r3, #1
 8006b00:	4658      	mov	r0, fp
 8006b02:	9304      	str	r3, [sp, #16]
 8006b04:	f7ff fa68 	bl	8005fd8 <quorem>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	3330      	adds	r3, #48	; 0x30
 8006b0e:	9006      	str	r0, [sp, #24]
 8006b10:	4658      	mov	r0, fp
 8006b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b14:	f000 fb80 	bl	8007218 <__mcmp>
 8006b18:	4632      	mov	r2, r6
 8006b1a:	4681      	mov	r9, r0
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fb96 	bl	8007250 <__mdiff>
 8006b24:	68c2      	ldr	r2, [r0, #12]
 8006b26:	4607      	mov	r7, r0
 8006b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b2a:	bb02      	cbnz	r2, 8006b6e <_dtoa_r+0xa7e>
 8006b2c:	4601      	mov	r1, r0
 8006b2e:	4658      	mov	r0, fp
 8006b30:	f000 fb72 	bl	8007218 <__mcmp>
 8006b34:	4602      	mov	r2, r0
 8006b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006b40:	f000 f92c 	bl	8006d9c <_Bfree>
 8006b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b48:	9f08      	ldr	r7, [sp, #32]
 8006b4a:	ea43 0102 	orr.w	r1, r3, r2
 8006b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b50:	430b      	orrs	r3, r1
 8006b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b54:	d10d      	bne.n	8006b72 <_dtoa_r+0xa82>
 8006b56:	2b39      	cmp	r3, #57	; 0x39
 8006b58:	d029      	beq.n	8006bae <_dtoa_r+0xabe>
 8006b5a:	f1b9 0f00 	cmp.w	r9, #0
 8006b5e:	dd01      	ble.n	8006b64 <_dtoa_r+0xa74>
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	3331      	adds	r3, #49	; 0x31
 8006b64:	9a04      	ldr	r2, [sp, #16]
 8006b66:	7013      	strb	r3, [r2, #0]
 8006b68:	e776      	b.n	8006a58 <_dtoa_r+0x968>
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	e7b9      	b.n	8006ae2 <_dtoa_r+0x9f2>
 8006b6e:	2201      	movs	r2, #1
 8006b70:	e7e2      	b.n	8006b38 <_dtoa_r+0xa48>
 8006b72:	f1b9 0f00 	cmp.w	r9, #0
 8006b76:	db06      	blt.n	8006b86 <_dtoa_r+0xa96>
 8006b78:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b7a:	ea41 0909 	orr.w	r9, r1, r9
 8006b7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b80:	ea59 0101 	orrs.w	r1, r9, r1
 8006b84:	d120      	bne.n	8006bc8 <_dtoa_r+0xad8>
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	ddec      	ble.n	8006b64 <_dtoa_r+0xa74>
 8006b8a:	4659      	mov	r1, fp
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4628      	mov	r0, r5
 8006b90:	9308      	str	r3, [sp, #32]
 8006b92:	f000 fad1 	bl	8007138 <__lshift>
 8006b96:	4621      	mov	r1, r4
 8006b98:	4683      	mov	fp, r0
 8006b9a:	f000 fb3d 	bl	8007218 <__mcmp>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	9b08      	ldr	r3, [sp, #32]
 8006ba2:	dc02      	bgt.n	8006baa <_dtoa_r+0xaba>
 8006ba4:	d1de      	bne.n	8006b64 <_dtoa_r+0xa74>
 8006ba6:	07da      	lsls	r2, r3, #31
 8006ba8:	d5dc      	bpl.n	8006b64 <_dtoa_r+0xa74>
 8006baa:	2b39      	cmp	r3, #57	; 0x39
 8006bac:	d1d8      	bne.n	8006b60 <_dtoa_r+0xa70>
 8006bae:	2339      	movs	r3, #57	; 0x39
 8006bb0:	9a04      	ldr	r2, [sp, #16]
 8006bb2:	7013      	strb	r3, [r2, #0]
 8006bb4:	463b      	mov	r3, r7
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	2a39      	cmp	r2, #57	; 0x39
 8006bc0:	d050      	beq.n	8006c64 <_dtoa_r+0xb74>
 8006bc2:	3201      	adds	r2, #1
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	e747      	b.n	8006a58 <_dtoa_r+0x968>
 8006bc8:	2a00      	cmp	r2, #0
 8006bca:	dd03      	ble.n	8006bd4 <_dtoa_r+0xae4>
 8006bcc:	2b39      	cmp	r3, #57	; 0x39
 8006bce:	d0ee      	beq.n	8006bae <_dtoa_r+0xabe>
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	e7c7      	b.n	8006b64 <_dtoa_r+0xa74>
 8006bd4:	9a08      	ldr	r2, [sp, #32]
 8006bd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bd8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bdc:	428a      	cmp	r2, r1
 8006bde:	d02a      	beq.n	8006c36 <_dtoa_r+0xb46>
 8006be0:	4659      	mov	r1, fp
 8006be2:	2300      	movs	r3, #0
 8006be4:	220a      	movs	r2, #10
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f8fa 	bl	8006de0 <__multadd>
 8006bec:	45b0      	cmp	r8, r6
 8006bee:	4683      	mov	fp, r0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	f04f 020a 	mov.w	r2, #10
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	d107      	bne.n	8006c0e <_dtoa_r+0xb1e>
 8006bfe:	f000 f8ef 	bl	8006de0 <__multadd>
 8006c02:	4680      	mov	r8, r0
 8006c04:	4606      	mov	r6, r0
 8006c06:	9b08      	ldr	r3, [sp, #32]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	9308      	str	r3, [sp, #32]
 8006c0c:	e775      	b.n	8006afa <_dtoa_r+0xa0a>
 8006c0e:	f000 f8e7 	bl	8006de0 <__multadd>
 8006c12:	4631      	mov	r1, r6
 8006c14:	4680      	mov	r8, r0
 8006c16:	2300      	movs	r3, #0
 8006c18:	220a      	movs	r2, #10
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 f8e0 	bl	8006de0 <__multadd>
 8006c20:	4606      	mov	r6, r0
 8006c22:	e7f0      	b.n	8006c06 <_dtoa_r+0xb16>
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	bfcc      	ite	gt
 8006c2a:	464f      	movgt	r7, r9
 8006c2c:	2701      	movle	r7, #1
 8006c2e:	f04f 0800 	mov.w	r8, #0
 8006c32:	9a03      	ldr	r2, [sp, #12]
 8006c34:	4417      	add	r7, r2
 8006c36:	4659      	mov	r1, fp
 8006c38:	2201      	movs	r2, #1
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	9308      	str	r3, [sp, #32]
 8006c3e:	f000 fa7b 	bl	8007138 <__lshift>
 8006c42:	4621      	mov	r1, r4
 8006c44:	4683      	mov	fp, r0
 8006c46:	f000 fae7 	bl	8007218 <__mcmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	dcb2      	bgt.n	8006bb4 <_dtoa_r+0xac4>
 8006c4e:	d102      	bne.n	8006c56 <_dtoa_r+0xb66>
 8006c50:	9b08      	ldr	r3, [sp, #32]
 8006c52:	07db      	lsls	r3, r3, #31
 8006c54:	d4ae      	bmi.n	8006bb4 <_dtoa_r+0xac4>
 8006c56:	463b      	mov	r3, r7
 8006c58:	461f      	mov	r7, r3
 8006c5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5e:	2a30      	cmp	r2, #48	; 0x30
 8006c60:	d0fa      	beq.n	8006c58 <_dtoa_r+0xb68>
 8006c62:	e6f9      	b.n	8006a58 <_dtoa_r+0x968>
 8006c64:	9a03      	ldr	r2, [sp, #12]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d1a5      	bne.n	8006bb6 <_dtoa_r+0xac6>
 8006c6a:	2331      	movs	r3, #49	; 0x31
 8006c6c:	f10a 0a01 	add.w	sl, sl, #1
 8006c70:	e779      	b.n	8006b66 <_dtoa_r+0xa76>
 8006c72:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <_dtoa_r+0xbd4>)
 8006c74:	f7ff baa8 	b.w	80061c8 <_dtoa_r+0xd8>
 8006c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f47f aa81 	bne.w	8006182 <_dtoa_r+0x92>
 8006c80:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <_dtoa_r+0xbd8>)
 8006c82:	f7ff baa1 	b.w	80061c8 <_dtoa_r+0xd8>
 8006c86:	f1b9 0f00 	cmp.w	r9, #0
 8006c8a:	dc03      	bgt.n	8006c94 <_dtoa_r+0xba4>
 8006c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	f73f aecb 	bgt.w	8006a2a <_dtoa_r+0x93a>
 8006c94:	9f03      	ldr	r7, [sp, #12]
 8006c96:	4621      	mov	r1, r4
 8006c98:	4658      	mov	r0, fp
 8006c9a:	f7ff f99d 	bl	8005fd8 <quorem>
 8006c9e:	9a03      	ldr	r2, [sp, #12]
 8006ca0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ca4:	f807 3b01 	strb.w	r3, [r7], #1
 8006ca8:	1aba      	subs	r2, r7, r2
 8006caa:	4591      	cmp	r9, r2
 8006cac:	ddba      	ble.n	8006c24 <_dtoa_r+0xb34>
 8006cae:	4659      	mov	r1, fp
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 f893 	bl	8006de0 <__multadd>
 8006cba:	4683      	mov	fp, r0
 8006cbc:	e7eb      	b.n	8006c96 <_dtoa_r+0xba6>
 8006cbe:	bf00      	nop
 8006cc0:	08008607 	.word	0x08008607
 8006cc4:	08008564 	.word	0x08008564
 8006cc8:	08008588 	.word	0x08008588

08006ccc <_localeconv_r>:
 8006ccc:	4800      	ldr	r0, [pc, #0]	; (8006cd0 <_localeconv_r+0x4>)
 8006cce:	4770      	bx	lr
 8006cd0:	20000164 	.word	0x20000164

08006cd4 <malloc>:
 8006cd4:	4b02      	ldr	r3, [pc, #8]	; (8006ce0 <malloc+0xc>)
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	f000 bc1d 	b.w	8007518 <_malloc_r>
 8006cde:	bf00      	nop
 8006ce0:	20000010 	.word	0x20000010

08006ce4 <memchr>:
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	b2c9      	uxtb	r1, r1
 8006cea:	4402      	add	r2, r0
 8006cec:	4293      	cmp	r3, r2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	d101      	bne.n	8006cf6 <memchr+0x12>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	e003      	b.n	8006cfe <memchr+0x1a>
 8006cf6:	7804      	ldrb	r4, [r0, #0]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	428c      	cmp	r4, r1
 8006cfc:	d1f6      	bne.n	8006cec <memchr+0x8>
 8006cfe:	bd10      	pop	{r4, pc}

08006d00 <memcpy>:
 8006d00:	440a      	add	r2, r1
 8006d02:	4291      	cmp	r1, r2
 8006d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d08:	d100      	bne.n	8006d0c <memcpy+0xc>
 8006d0a:	4770      	bx	lr
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d12:	4291      	cmp	r1, r2
 8006d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d18:	d1f9      	bne.n	8006d0e <memcpy+0xe>
 8006d1a:	bd10      	pop	{r4, pc}

08006d1c <_Balloc>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d20:	4604      	mov	r4, r0
 8006d22:	460d      	mov	r5, r1
 8006d24:	b976      	cbnz	r6, 8006d44 <_Balloc+0x28>
 8006d26:	2010      	movs	r0, #16
 8006d28:	f7ff ffd4 	bl	8006cd4 <malloc>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6260      	str	r0, [r4, #36]	; 0x24
 8006d30:	b920      	cbnz	r0, 8006d3c <_Balloc+0x20>
 8006d32:	2166      	movs	r1, #102	; 0x66
 8006d34:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <_Balloc+0x78>)
 8006d36:	4818      	ldr	r0, [pc, #96]	; (8006d98 <_Balloc+0x7c>)
 8006d38:	f000 fdce 	bl	80078d8 <__assert_func>
 8006d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d40:	6006      	str	r6, [r0, #0]
 8006d42:	60c6      	str	r6, [r0, #12]
 8006d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d46:	68f3      	ldr	r3, [r6, #12]
 8006d48:	b183      	cbz	r3, 8006d6c <_Balloc+0x50>
 8006d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d52:	b9b8      	cbnz	r0, 8006d84 <_Balloc+0x68>
 8006d54:	2101      	movs	r1, #1
 8006d56:	fa01 f605 	lsl.w	r6, r1, r5
 8006d5a:	1d72      	adds	r2, r6, #5
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	0092      	lsls	r2, r2, #2
 8006d60:	f000 fb5e 	bl	8007420 <_calloc_r>
 8006d64:	b160      	cbz	r0, 8006d80 <_Balloc+0x64>
 8006d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d6a:	e00e      	b.n	8006d8a <_Balloc+0x6e>
 8006d6c:	2221      	movs	r2, #33	; 0x21
 8006d6e:	2104      	movs	r1, #4
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fb55 	bl	8007420 <_calloc_r>
 8006d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d78:	60f0      	str	r0, [r6, #12]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e4      	bne.n	8006d4a <_Balloc+0x2e>
 8006d80:	2000      	movs	r0, #0
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	6802      	ldr	r2, [r0, #0]
 8006d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d90:	e7f7      	b.n	8006d82 <_Balloc+0x66>
 8006d92:	bf00      	nop
 8006d94:	08008595 	.word	0x08008595
 8006d98:	08008618 	.word	0x08008618

08006d9c <_Bfree>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006da0:	4605      	mov	r5, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	b976      	cbnz	r6, 8006dc4 <_Bfree+0x28>
 8006da6:	2010      	movs	r0, #16
 8006da8:	f7ff ff94 	bl	8006cd4 <malloc>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6268      	str	r0, [r5, #36]	; 0x24
 8006db0:	b920      	cbnz	r0, 8006dbc <_Bfree+0x20>
 8006db2:	218a      	movs	r1, #138	; 0x8a
 8006db4:	4b08      	ldr	r3, [pc, #32]	; (8006dd8 <_Bfree+0x3c>)
 8006db6:	4809      	ldr	r0, [pc, #36]	; (8006ddc <_Bfree+0x40>)
 8006db8:	f000 fd8e 	bl	80078d8 <__assert_func>
 8006dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc0:	6006      	str	r6, [r0, #0]
 8006dc2:	60c6      	str	r6, [r0, #12]
 8006dc4:	b13c      	cbz	r4, 8006dd6 <_Bfree+0x3a>
 8006dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dc8:	6862      	ldr	r2, [r4, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dd0:	6021      	str	r1, [r4, #0]
 8006dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	08008595 	.word	0x08008595
 8006ddc:	08008618 	.word	0x08008618

08006de0 <__multadd>:
 8006de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de4:	4607      	mov	r7, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	461e      	mov	r6, r3
 8006dea:	2000      	movs	r0, #0
 8006dec:	690d      	ldr	r5, [r1, #16]
 8006dee:	f101 0c14 	add.w	ip, r1, #20
 8006df2:	f8dc 3000 	ldr.w	r3, [ip]
 8006df6:	3001      	adds	r0, #1
 8006df8:	b299      	uxth	r1, r3
 8006dfa:	fb02 6101 	mla	r1, r2, r1, r6
 8006dfe:	0c1e      	lsrs	r6, r3, #16
 8006e00:	0c0b      	lsrs	r3, r1, #16
 8006e02:	fb02 3306 	mla	r3, r2, r6, r3
 8006e06:	b289      	uxth	r1, r1
 8006e08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e0c:	4285      	cmp	r5, r0
 8006e0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e12:	f84c 1b04 	str.w	r1, [ip], #4
 8006e16:	dcec      	bgt.n	8006df2 <__multadd+0x12>
 8006e18:	b30e      	cbz	r6, 8006e5e <__multadd+0x7e>
 8006e1a:	68a3      	ldr	r3, [r4, #8]
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dc19      	bgt.n	8006e54 <__multadd+0x74>
 8006e20:	6861      	ldr	r1, [r4, #4]
 8006e22:	4638      	mov	r0, r7
 8006e24:	3101      	adds	r1, #1
 8006e26:	f7ff ff79 	bl	8006d1c <_Balloc>
 8006e2a:	4680      	mov	r8, r0
 8006e2c:	b928      	cbnz	r0, 8006e3a <__multadd+0x5a>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	21b5      	movs	r1, #181	; 0xb5
 8006e32:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <__multadd+0x84>)
 8006e34:	480c      	ldr	r0, [pc, #48]	; (8006e68 <__multadd+0x88>)
 8006e36:	f000 fd4f 	bl	80078d8 <__assert_func>
 8006e3a:	6922      	ldr	r2, [r4, #16]
 8006e3c:	f104 010c 	add.w	r1, r4, #12
 8006e40:	3202      	adds	r2, #2
 8006e42:	0092      	lsls	r2, r2, #2
 8006e44:	300c      	adds	r0, #12
 8006e46:	f7ff ff5b 	bl	8006d00 <memcpy>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f7ff ffa5 	bl	8006d9c <_Bfree>
 8006e52:	4644      	mov	r4, r8
 8006e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e58:	3501      	adds	r5, #1
 8006e5a:	615e      	str	r6, [r3, #20]
 8006e5c:	6125      	str	r5, [r4, #16]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e64:	08008607 	.word	0x08008607
 8006e68:	08008618 	.word	0x08008618

08006e6c <__hi0bits>:
 8006e6c:	0c02      	lsrs	r2, r0, #16
 8006e6e:	0412      	lsls	r2, r2, #16
 8006e70:	4603      	mov	r3, r0
 8006e72:	b9ca      	cbnz	r2, 8006ea8 <__hi0bits+0x3c>
 8006e74:	0403      	lsls	r3, r0, #16
 8006e76:	2010      	movs	r0, #16
 8006e78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e7c:	bf04      	itt	eq
 8006e7e:	021b      	lsleq	r3, r3, #8
 8006e80:	3008      	addeq	r0, #8
 8006e82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e86:	bf04      	itt	eq
 8006e88:	011b      	lsleq	r3, r3, #4
 8006e8a:	3004      	addeq	r0, #4
 8006e8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e90:	bf04      	itt	eq
 8006e92:	009b      	lsleq	r3, r3, #2
 8006e94:	3002      	addeq	r0, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	db05      	blt.n	8006ea6 <__hi0bits+0x3a>
 8006e9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006e9e:	f100 0001 	add.w	r0, r0, #1
 8006ea2:	bf08      	it	eq
 8006ea4:	2020      	moveq	r0, #32
 8006ea6:	4770      	bx	lr
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	e7e5      	b.n	8006e78 <__hi0bits+0xc>

08006eac <__lo0bits>:
 8006eac:	6803      	ldr	r3, [r0, #0]
 8006eae:	4602      	mov	r2, r0
 8006eb0:	f013 0007 	ands.w	r0, r3, #7
 8006eb4:	d00b      	beq.n	8006ece <__lo0bits+0x22>
 8006eb6:	07d9      	lsls	r1, r3, #31
 8006eb8:	d421      	bmi.n	8006efe <__lo0bits+0x52>
 8006eba:	0798      	lsls	r0, r3, #30
 8006ebc:	bf49      	itett	mi
 8006ebe:	085b      	lsrmi	r3, r3, #1
 8006ec0:	089b      	lsrpl	r3, r3, #2
 8006ec2:	2001      	movmi	r0, #1
 8006ec4:	6013      	strmi	r3, [r2, #0]
 8006ec6:	bf5c      	itt	pl
 8006ec8:	2002      	movpl	r0, #2
 8006eca:	6013      	strpl	r3, [r2, #0]
 8006ecc:	4770      	bx	lr
 8006ece:	b299      	uxth	r1, r3
 8006ed0:	b909      	cbnz	r1, 8006ed6 <__lo0bits+0x2a>
 8006ed2:	2010      	movs	r0, #16
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	b2d9      	uxtb	r1, r3
 8006ed8:	b909      	cbnz	r1, 8006ede <__lo0bits+0x32>
 8006eda:	3008      	adds	r0, #8
 8006edc:	0a1b      	lsrs	r3, r3, #8
 8006ede:	0719      	lsls	r1, r3, #28
 8006ee0:	bf04      	itt	eq
 8006ee2:	091b      	lsreq	r3, r3, #4
 8006ee4:	3004      	addeq	r0, #4
 8006ee6:	0799      	lsls	r1, r3, #30
 8006ee8:	bf04      	itt	eq
 8006eea:	089b      	lsreq	r3, r3, #2
 8006eec:	3002      	addeq	r0, #2
 8006eee:	07d9      	lsls	r1, r3, #31
 8006ef0:	d403      	bmi.n	8006efa <__lo0bits+0x4e>
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	f100 0001 	add.w	r0, r0, #1
 8006ef8:	d003      	beq.n	8006f02 <__lo0bits+0x56>
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	4770      	bx	lr
 8006efe:	2000      	movs	r0, #0
 8006f00:	4770      	bx	lr
 8006f02:	2020      	movs	r0, #32
 8006f04:	4770      	bx	lr
	...

08006f08 <__i2b>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	f7ff ff05 	bl	8006d1c <_Balloc>
 8006f12:	4602      	mov	r2, r0
 8006f14:	b928      	cbnz	r0, 8006f22 <__i2b+0x1a>
 8006f16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f1a:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <__i2b+0x24>)
 8006f1c:	4804      	ldr	r0, [pc, #16]	; (8006f30 <__i2b+0x28>)
 8006f1e:	f000 fcdb 	bl	80078d8 <__assert_func>
 8006f22:	2301      	movs	r3, #1
 8006f24:	6144      	str	r4, [r0, #20]
 8006f26:	6103      	str	r3, [r0, #16]
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08008607 	.word	0x08008607
 8006f30:	08008618 	.word	0x08008618

08006f34 <__multiply>:
 8006f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	4691      	mov	r9, r2
 8006f3a:	690a      	ldr	r2, [r1, #16]
 8006f3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f40:	460c      	mov	r4, r1
 8006f42:	429a      	cmp	r2, r3
 8006f44:	bfbe      	ittt	lt
 8006f46:	460b      	movlt	r3, r1
 8006f48:	464c      	movlt	r4, r9
 8006f4a:	4699      	movlt	r9, r3
 8006f4c:	6927      	ldr	r7, [r4, #16]
 8006f4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f52:	68a3      	ldr	r3, [r4, #8]
 8006f54:	6861      	ldr	r1, [r4, #4]
 8006f56:	eb07 060a 	add.w	r6, r7, sl
 8006f5a:	42b3      	cmp	r3, r6
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	bfb8      	it	lt
 8006f60:	3101      	addlt	r1, #1
 8006f62:	f7ff fedb 	bl	8006d1c <_Balloc>
 8006f66:	b930      	cbnz	r0, 8006f76 <__multiply+0x42>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	f240 115d 	movw	r1, #349	; 0x15d
 8006f6e:	4b43      	ldr	r3, [pc, #268]	; (800707c <__multiply+0x148>)
 8006f70:	4843      	ldr	r0, [pc, #268]	; (8007080 <__multiply+0x14c>)
 8006f72:	f000 fcb1 	bl	80078d8 <__assert_func>
 8006f76:	f100 0514 	add.w	r5, r0, #20
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f82:	4543      	cmp	r3, r8
 8006f84:	d321      	bcc.n	8006fca <__multiply+0x96>
 8006f86:	f104 0314 	add.w	r3, r4, #20
 8006f8a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f8e:	f109 0314 	add.w	r3, r9, #20
 8006f92:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f96:	9202      	str	r2, [sp, #8]
 8006f98:	1b3a      	subs	r2, r7, r4
 8006f9a:	3a15      	subs	r2, #21
 8006f9c:	f022 0203 	bic.w	r2, r2, #3
 8006fa0:	3204      	adds	r2, #4
 8006fa2:	f104 0115 	add.w	r1, r4, #21
 8006fa6:	428f      	cmp	r7, r1
 8006fa8:	bf38      	it	cc
 8006faa:	2204      	movcc	r2, #4
 8006fac:	9201      	str	r2, [sp, #4]
 8006fae:	9a02      	ldr	r2, [sp, #8]
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d80c      	bhi.n	8006fd0 <__multiply+0x9c>
 8006fb6:	2e00      	cmp	r6, #0
 8006fb8:	dd03      	ble.n	8006fc2 <__multiply+0x8e>
 8006fba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d059      	beq.n	8007076 <__multiply+0x142>
 8006fc2:	6106      	str	r6, [r0, #16]
 8006fc4:	b005      	add	sp, #20
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fca:	f843 2b04 	str.w	r2, [r3], #4
 8006fce:	e7d8      	b.n	8006f82 <__multiply+0x4e>
 8006fd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fd4:	f1ba 0f00 	cmp.w	sl, #0
 8006fd8:	d023      	beq.n	8007022 <__multiply+0xee>
 8006fda:	46a9      	mov	r9, r5
 8006fdc:	f04f 0c00 	mov.w	ip, #0
 8006fe0:	f104 0e14 	add.w	lr, r4, #20
 8006fe4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006fe8:	f8d9 1000 	ldr.w	r1, [r9]
 8006fec:	fa1f fb82 	uxth.w	fp, r2
 8006ff0:	b289      	uxth	r1, r1
 8006ff2:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ff6:	4461      	add	r1, ip
 8006ff8:	f8d9 c000 	ldr.w	ip, [r9]
 8006ffc:	0c12      	lsrs	r2, r2, #16
 8006ffe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007002:	fb0a c202 	mla	r2, sl, r2, ip
 8007006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800700a:	b289      	uxth	r1, r1
 800700c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007010:	4577      	cmp	r7, lr
 8007012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007016:	f849 1b04 	str.w	r1, [r9], #4
 800701a:	d8e3      	bhi.n	8006fe4 <__multiply+0xb0>
 800701c:	9a01      	ldr	r2, [sp, #4]
 800701e:	f845 c002 	str.w	ip, [r5, r2]
 8007022:	9a03      	ldr	r2, [sp, #12]
 8007024:	3304      	adds	r3, #4
 8007026:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800702a:	f1b9 0f00 	cmp.w	r9, #0
 800702e:	d020      	beq.n	8007072 <__multiply+0x13e>
 8007030:	46ae      	mov	lr, r5
 8007032:	f04f 0a00 	mov.w	sl, #0
 8007036:	6829      	ldr	r1, [r5, #0]
 8007038:	f104 0c14 	add.w	ip, r4, #20
 800703c:	f8bc b000 	ldrh.w	fp, [ip]
 8007040:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007044:	b289      	uxth	r1, r1
 8007046:	fb09 220b 	mla	r2, r9, fp, r2
 800704a:	4492      	add	sl, r2
 800704c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007050:	f84e 1b04 	str.w	r1, [lr], #4
 8007054:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007058:	f8be 1000 	ldrh.w	r1, [lr]
 800705c:	0c12      	lsrs	r2, r2, #16
 800705e:	fb09 1102 	mla	r1, r9, r2, r1
 8007062:	4567      	cmp	r7, ip
 8007064:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007068:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800706c:	d8e6      	bhi.n	800703c <__multiply+0x108>
 800706e:	9a01      	ldr	r2, [sp, #4]
 8007070:	50a9      	str	r1, [r5, r2]
 8007072:	3504      	adds	r5, #4
 8007074:	e79b      	b.n	8006fae <__multiply+0x7a>
 8007076:	3e01      	subs	r6, #1
 8007078:	e79d      	b.n	8006fb6 <__multiply+0x82>
 800707a:	bf00      	nop
 800707c:	08008607 	.word	0x08008607
 8007080:	08008618 	.word	0x08008618

08007084 <__pow5mult>:
 8007084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007088:	4615      	mov	r5, r2
 800708a:	f012 0203 	ands.w	r2, r2, #3
 800708e:	4606      	mov	r6, r0
 8007090:	460f      	mov	r7, r1
 8007092:	d007      	beq.n	80070a4 <__pow5mult+0x20>
 8007094:	4c25      	ldr	r4, [pc, #148]	; (800712c <__pow5mult+0xa8>)
 8007096:	3a01      	subs	r2, #1
 8007098:	2300      	movs	r3, #0
 800709a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800709e:	f7ff fe9f 	bl	8006de0 <__multadd>
 80070a2:	4607      	mov	r7, r0
 80070a4:	10ad      	asrs	r5, r5, #2
 80070a6:	d03d      	beq.n	8007124 <__pow5mult+0xa0>
 80070a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070aa:	b97c      	cbnz	r4, 80070cc <__pow5mult+0x48>
 80070ac:	2010      	movs	r0, #16
 80070ae:	f7ff fe11 	bl	8006cd4 <malloc>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6270      	str	r0, [r6, #36]	; 0x24
 80070b6:	b928      	cbnz	r0, 80070c4 <__pow5mult+0x40>
 80070b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070bc:	4b1c      	ldr	r3, [pc, #112]	; (8007130 <__pow5mult+0xac>)
 80070be:	481d      	ldr	r0, [pc, #116]	; (8007134 <__pow5mult+0xb0>)
 80070c0:	f000 fc0a 	bl	80078d8 <__assert_func>
 80070c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070c8:	6004      	str	r4, [r0, #0]
 80070ca:	60c4      	str	r4, [r0, #12]
 80070cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070d4:	b94c      	cbnz	r4, 80070ea <__pow5mult+0x66>
 80070d6:	f240 2171 	movw	r1, #625	; 0x271
 80070da:	4630      	mov	r0, r6
 80070dc:	f7ff ff14 	bl	8006f08 <__i2b>
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	f04f 0900 	mov.w	r9, #0
 80070ee:	07eb      	lsls	r3, r5, #31
 80070f0:	d50a      	bpl.n	8007108 <__pow5mult+0x84>
 80070f2:	4639      	mov	r1, r7
 80070f4:	4622      	mov	r2, r4
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff ff1c 	bl	8006f34 <__multiply>
 80070fc:	4680      	mov	r8, r0
 80070fe:	4639      	mov	r1, r7
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff fe4b 	bl	8006d9c <_Bfree>
 8007106:	4647      	mov	r7, r8
 8007108:	106d      	asrs	r5, r5, #1
 800710a:	d00b      	beq.n	8007124 <__pow5mult+0xa0>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	b938      	cbnz	r0, 8007120 <__pow5mult+0x9c>
 8007110:	4622      	mov	r2, r4
 8007112:	4621      	mov	r1, r4
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff ff0d 	bl	8006f34 <__multiply>
 800711a:	6020      	str	r0, [r4, #0]
 800711c:	f8c0 9000 	str.w	r9, [r0]
 8007120:	4604      	mov	r4, r0
 8007122:	e7e4      	b.n	80070ee <__pow5mult+0x6a>
 8007124:	4638      	mov	r0, r7
 8007126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712a:	bf00      	nop
 800712c:	08008768 	.word	0x08008768
 8007130:	08008595 	.word	0x08008595
 8007134:	08008618 	.word	0x08008618

08007138 <__lshift>:
 8007138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	460c      	mov	r4, r1
 800713e:	4607      	mov	r7, r0
 8007140:	4691      	mov	r9, r2
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	6849      	ldr	r1, [r1, #4]
 8007146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007150:	f108 0601 	add.w	r6, r8, #1
 8007154:	42b3      	cmp	r3, r6
 8007156:	db0b      	blt.n	8007170 <__lshift+0x38>
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff fddf 	bl	8006d1c <_Balloc>
 800715e:	4605      	mov	r5, r0
 8007160:	b948      	cbnz	r0, 8007176 <__lshift+0x3e>
 8007162:	4602      	mov	r2, r0
 8007164:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007168:	4b29      	ldr	r3, [pc, #164]	; (8007210 <__lshift+0xd8>)
 800716a:	482a      	ldr	r0, [pc, #168]	; (8007214 <__lshift+0xdc>)
 800716c:	f000 fbb4 	bl	80078d8 <__assert_func>
 8007170:	3101      	adds	r1, #1
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	e7ee      	b.n	8007154 <__lshift+0x1c>
 8007176:	2300      	movs	r3, #0
 8007178:	f100 0114 	add.w	r1, r0, #20
 800717c:	f100 0210 	add.w	r2, r0, #16
 8007180:	4618      	mov	r0, r3
 8007182:	4553      	cmp	r3, sl
 8007184:	db37      	blt.n	80071f6 <__lshift+0xbe>
 8007186:	6920      	ldr	r0, [r4, #16]
 8007188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800718c:	f104 0314 	add.w	r3, r4, #20
 8007190:	f019 091f 	ands.w	r9, r9, #31
 8007194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007198:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800719c:	d02f      	beq.n	80071fe <__lshift+0xc6>
 800719e:	468a      	mov	sl, r1
 80071a0:	f04f 0c00 	mov.w	ip, #0
 80071a4:	f1c9 0e20 	rsb	lr, r9, #32
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	fa02 f209 	lsl.w	r2, r2, r9
 80071ae:	ea42 020c 	orr.w	r2, r2, ip
 80071b2:	f84a 2b04 	str.w	r2, [sl], #4
 80071b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ba:	4298      	cmp	r0, r3
 80071bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80071c0:	d8f2      	bhi.n	80071a8 <__lshift+0x70>
 80071c2:	1b03      	subs	r3, r0, r4
 80071c4:	3b15      	subs	r3, #21
 80071c6:	f023 0303 	bic.w	r3, r3, #3
 80071ca:	3304      	adds	r3, #4
 80071cc:	f104 0215 	add.w	r2, r4, #21
 80071d0:	4290      	cmp	r0, r2
 80071d2:	bf38      	it	cc
 80071d4:	2304      	movcc	r3, #4
 80071d6:	f841 c003 	str.w	ip, [r1, r3]
 80071da:	f1bc 0f00 	cmp.w	ip, #0
 80071de:	d001      	beq.n	80071e4 <__lshift+0xac>
 80071e0:	f108 0602 	add.w	r6, r8, #2
 80071e4:	3e01      	subs	r6, #1
 80071e6:	4638      	mov	r0, r7
 80071e8:	4621      	mov	r1, r4
 80071ea:	612e      	str	r6, [r5, #16]
 80071ec:	f7ff fdd6 	bl	8006d9c <_Bfree>
 80071f0:	4628      	mov	r0, r5
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80071fa:	3301      	adds	r3, #1
 80071fc:	e7c1      	b.n	8007182 <__lshift+0x4a>
 80071fe:	3904      	subs	r1, #4
 8007200:	f853 2b04 	ldr.w	r2, [r3], #4
 8007204:	4298      	cmp	r0, r3
 8007206:	f841 2f04 	str.w	r2, [r1, #4]!
 800720a:	d8f9      	bhi.n	8007200 <__lshift+0xc8>
 800720c:	e7ea      	b.n	80071e4 <__lshift+0xac>
 800720e:	bf00      	nop
 8007210:	08008607 	.word	0x08008607
 8007214:	08008618 	.word	0x08008618

08007218 <__mcmp>:
 8007218:	4603      	mov	r3, r0
 800721a:	690a      	ldr	r2, [r1, #16]
 800721c:	6900      	ldr	r0, [r0, #16]
 800721e:	b530      	push	{r4, r5, lr}
 8007220:	1a80      	subs	r0, r0, r2
 8007222:	d10d      	bne.n	8007240 <__mcmp+0x28>
 8007224:	3314      	adds	r3, #20
 8007226:	3114      	adds	r1, #20
 8007228:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800722c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007238:	4295      	cmp	r5, r2
 800723a:	d002      	beq.n	8007242 <__mcmp+0x2a>
 800723c:	d304      	bcc.n	8007248 <__mcmp+0x30>
 800723e:	2001      	movs	r0, #1
 8007240:	bd30      	pop	{r4, r5, pc}
 8007242:	42a3      	cmp	r3, r4
 8007244:	d3f4      	bcc.n	8007230 <__mcmp+0x18>
 8007246:	e7fb      	b.n	8007240 <__mcmp+0x28>
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	e7f8      	b.n	8007240 <__mcmp+0x28>
	...

08007250 <__mdiff>:
 8007250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	460d      	mov	r5, r1
 8007256:	4607      	mov	r7, r0
 8007258:	4611      	mov	r1, r2
 800725a:	4628      	mov	r0, r5
 800725c:	4614      	mov	r4, r2
 800725e:	f7ff ffdb 	bl	8007218 <__mcmp>
 8007262:	1e06      	subs	r6, r0, #0
 8007264:	d111      	bne.n	800728a <__mdiff+0x3a>
 8007266:	4631      	mov	r1, r6
 8007268:	4638      	mov	r0, r7
 800726a:	f7ff fd57 	bl	8006d1c <_Balloc>
 800726e:	4602      	mov	r2, r0
 8007270:	b928      	cbnz	r0, 800727e <__mdiff+0x2e>
 8007272:	f240 2132 	movw	r1, #562	; 0x232
 8007276:	4b3a      	ldr	r3, [pc, #232]	; (8007360 <__mdiff+0x110>)
 8007278:	483a      	ldr	r0, [pc, #232]	; (8007364 <__mdiff+0x114>)
 800727a:	f000 fb2d 	bl	80078d8 <__assert_func>
 800727e:	2301      	movs	r3, #1
 8007280:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007284:	4610      	mov	r0, r2
 8007286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728a:	bfa4      	itt	ge
 800728c:	4623      	movge	r3, r4
 800728e:	462c      	movge	r4, r5
 8007290:	4638      	mov	r0, r7
 8007292:	6861      	ldr	r1, [r4, #4]
 8007294:	bfa6      	itte	ge
 8007296:	461d      	movge	r5, r3
 8007298:	2600      	movge	r6, #0
 800729a:	2601      	movlt	r6, #1
 800729c:	f7ff fd3e 	bl	8006d1c <_Balloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	b918      	cbnz	r0, 80072ac <__mdiff+0x5c>
 80072a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072a8:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <__mdiff+0x110>)
 80072aa:	e7e5      	b.n	8007278 <__mdiff+0x28>
 80072ac:	f102 0814 	add.w	r8, r2, #20
 80072b0:	46c2      	mov	sl, r8
 80072b2:	f04f 0c00 	mov.w	ip, #0
 80072b6:	6927      	ldr	r7, [r4, #16]
 80072b8:	60c6      	str	r6, [r0, #12]
 80072ba:	692e      	ldr	r6, [r5, #16]
 80072bc:	f104 0014 	add.w	r0, r4, #20
 80072c0:	f105 0914 	add.w	r9, r5, #20
 80072c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80072c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072cc:	3410      	adds	r4, #16
 80072ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80072d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80072d6:	fa1f f18b 	uxth.w	r1, fp
 80072da:	448c      	add	ip, r1
 80072dc:	b299      	uxth	r1, r3
 80072de:	0c1b      	lsrs	r3, r3, #16
 80072e0:	ebac 0101 	sub.w	r1, ip, r1
 80072e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80072ec:	b289      	uxth	r1, r1
 80072ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80072f2:	454e      	cmp	r6, r9
 80072f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80072f8:	f84a 3b04 	str.w	r3, [sl], #4
 80072fc:	d8e7      	bhi.n	80072ce <__mdiff+0x7e>
 80072fe:	1b73      	subs	r3, r6, r5
 8007300:	3b15      	subs	r3, #21
 8007302:	f023 0303 	bic.w	r3, r3, #3
 8007306:	3515      	adds	r5, #21
 8007308:	3304      	adds	r3, #4
 800730a:	42ae      	cmp	r6, r5
 800730c:	bf38      	it	cc
 800730e:	2304      	movcc	r3, #4
 8007310:	4418      	add	r0, r3
 8007312:	4443      	add	r3, r8
 8007314:	461e      	mov	r6, r3
 8007316:	4605      	mov	r5, r0
 8007318:	4575      	cmp	r5, lr
 800731a:	d30e      	bcc.n	800733a <__mdiff+0xea>
 800731c:	f10e 0103 	add.w	r1, lr, #3
 8007320:	1a09      	subs	r1, r1, r0
 8007322:	f021 0103 	bic.w	r1, r1, #3
 8007326:	3803      	subs	r0, #3
 8007328:	4586      	cmp	lr, r0
 800732a:	bf38      	it	cc
 800732c:	2100      	movcc	r1, #0
 800732e:	4419      	add	r1, r3
 8007330:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007334:	b18b      	cbz	r3, 800735a <__mdiff+0x10a>
 8007336:	6117      	str	r7, [r2, #16]
 8007338:	e7a4      	b.n	8007284 <__mdiff+0x34>
 800733a:	f855 8b04 	ldr.w	r8, [r5], #4
 800733e:	fa1f f188 	uxth.w	r1, r8
 8007342:	4461      	add	r1, ip
 8007344:	140c      	asrs	r4, r1, #16
 8007346:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800734a:	b289      	uxth	r1, r1
 800734c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007350:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007354:	f846 1b04 	str.w	r1, [r6], #4
 8007358:	e7de      	b.n	8007318 <__mdiff+0xc8>
 800735a:	3f01      	subs	r7, #1
 800735c:	e7e8      	b.n	8007330 <__mdiff+0xe0>
 800735e:	bf00      	nop
 8007360:	08008607 	.word	0x08008607
 8007364:	08008618 	.word	0x08008618

08007368 <__d2b>:
 8007368:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800736c:	2101      	movs	r1, #1
 800736e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007372:	4690      	mov	r8, r2
 8007374:	461d      	mov	r5, r3
 8007376:	f7ff fcd1 	bl	8006d1c <_Balloc>
 800737a:	4604      	mov	r4, r0
 800737c:	b930      	cbnz	r0, 800738c <__d2b+0x24>
 800737e:	4602      	mov	r2, r0
 8007380:	f240 310a 	movw	r1, #778	; 0x30a
 8007384:	4b24      	ldr	r3, [pc, #144]	; (8007418 <__d2b+0xb0>)
 8007386:	4825      	ldr	r0, [pc, #148]	; (800741c <__d2b+0xb4>)
 8007388:	f000 faa6 	bl	80078d8 <__assert_func>
 800738c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007390:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007394:	bb2d      	cbnz	r5, 80073e2 <__d2b+0x7a>
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	f1b8 0300 	subs.w	r3, r8, #0
 800739c:	d026      	beq.n	80073ec <__d2b+0x84>
 800739e:	4668      	mov	r0, sp
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	f7ff fd83 	bl	8006eac <__lo0bits>
 80073a6:	9900      	ldr	r1, [sp, #0]
 80073a8:	b1f0      	cbz	r0, 80073e8 <__d2b+0x80>
 80073aa:	9a01      	ldr	r2, [sp, #4]
 80073ac:	f1c0 0320 	rsb	r3, r0, #32
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	430b      	orrs	r3, r1
 80073b6:	40c2      	lsrs	r2, r0
 80073b8:	6163      	str	r3, [r4, #20]
 80073ba:	9201      	str	r2, [sp, #4]
 80073bc:	9b01      	ldr	r3, [sp, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bf14      	ite	ne
 80073c2:	2102      	movne	r1, #2
 80073c4:	2101      	moveq	r1, #1
 80073c6:	61a3      	str	r3, [r4, #24]
 80073c8:	6121      	str	r1, [r4, #16]
 80073ca:	b1c5      	cbz	r5, 80073fe <__d2b+0x96>
 80073cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073d0:	4405      	add	r5, r0
 80073d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073d6:	603d      	str	r5, [r7, #0]
 80073d8:	6030      	str	r0, [r6, #0]
 80073da:	4620      	mov	r0, r4
 80073dc:	b002      	add	sp, #8
 80073de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073e6:	e7d6      	b.n	8007396 <__d2b+0x2e>
 80073e8:	6161      	str	r1, [r4, #20]
 80073ea:	e7e7      	b.n	80073bc <__d2b+0x54>
 80073ec:	a801      	add	r0, sp, #4
 80073ee:	f7ff fd5d 	bl	8006eac <__lo0bits>
 80073f2:	2101      	movs	r1, #1
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	6121      	str	r1, [r4, #16]
 80073f8:	6163      	str	r3, [r4, #20]
 80073fa:	3020      	adds	r0, #32
 80073fc:	e7e5      	b.n	80073ca <__d2b+0x62>
 80073fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007402:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007406:	6038      	str	r0, [r7, #0]
 8007408:	6918      	ldr	r0, [r3, #16]
 800740a:	f7ff fd2f 	bl	8006e6c <__hi0bits>
 800740e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007412:	6031      	str	r1, [r6, #0]
 8007414:	e7e1      	b.n	80073da <__d2b+0x72>
 8007416:	bf00      	nop
 8007418:	08008607 	.word	0x08008607
 800741c:	08008618 	.word	0x08008618

08007420 <_calloc_r>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	fba1 5402 	umull	r5, r4, r1, r2
 8007426:	b934      	cbnz	r4, 8007436 <_calloc_r+0x16>
 8007428:	4629      	mov	r1, r5
 800742a:	f000 f875 	bl	8007518 <_malloc_r>
 800742e:	4606      	mov	r6, r0
 8007430:	b928      	cbnz	r0, 800743e <_calloc_r+0x1e>
 8007432:	4630      	mov	r0, r6
 8007434:	bd70      	pop	{r4, r5, r6, pc}
 8007436:	220c      	movs	r2, #12
 8007438:	2600      	movs	r6, #0
 800743a:	6002      	str	r2, [r0, #0]
 800743c:	e7f9      	b.n	8007432 <_calloc_r+0x12>
 800743e:	462a      	mov	r2, r5
 8007440:	4621      	mov	r1, r4
 8007442:	f7fe f941 	bl	80056c8 <memset>
 8007446:	e7f4      	b.n	8007432 <_calloc_r+0x12>

08007448 <_free_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4605      	mov	r5, r0
 800744c:	2900      	cmp	r1, #0
 800744e:	d040      	beq.n	80074d2 <_free_r+0x8a>
 8007450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007454:	1f0c      	subs	r4, r1, #4
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfb8      	it	lt
 800745a:	18e4      	addlt	r4, r4, r3
 800745c:	f000 fa98 	bl	8007990 <__malloc_lock>
 8007460:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <_free_r+0x8c>)
 8007462:	6813      	ldr	r3, [r2, #0]
 8007464:	b933      	cbnz	r3, 8007474 <_free_r+0x2c>
 8007466:	6063      	str	r3, [r4, #4]
 8007468:	6014      	str	r4, [r2, #0]
 800746a:	4628      	mov	r0, r5
 800746c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007470:	f000 ba94 	b.w	800799c <__malloc_unlock>
 8007474:	42a3      	cmp	r3, r4
 8007476:	d908      	bls.n	800748a <_free_r+0x42>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	1821      	adds	r1, r4, r0
 800747c:	428b      	cmp	r3, r1
 800747e:	bf01      	itttt	eq
 8007480:	6819      	ldreq	r1, [r3, #0]
 8007482:	685b      	ldreq	r3, [r3, #4]
 8007484:	1809      	addeq	r1, r1, r0
 8007486:	6021      	streq	r1, [r4, #0]
 8007488:	e7ed      	b.n	8007466 <_free_r+0x1e>
 800748a:	461a      	mov	r2, r3
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	b10b      	cbz	r3, 8007494 <_free_r+0x4c>
 8007490:	42a3      	cmp	r3, r4
 8007492:	d9fa      	bls.n	800748a <_free_r+0x42>
 8007494:	6811      	ldr	r1, [r2, #0]
 8007496:	1850      	adds	r0, r2, r1
 8007498:	42a0      	cmp	r0, r4
 800749a:	d10b      	bne.n	80074b4 <_free_r+0x6c>
 800749c:	6820      	ldr	r0, [r4, #0]
 800749e:	4401      	add	r1, r0
 80074a0:	1850      	adds	r0, r2, r1
 80074a2:	4283      	cmp	r3, r0
 80074a4:	6011      	str	r1, [r2, #0]
 80074a6:	d1e0      	bne.n	800746a <_free_r+0x22>
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4401      	add	r1, r0
 80074ae:	6011      	str	r1, [r2, #0]
 80074b0:	6053      	str	r3, [r2, #4]
 80074b2:	e7da      	b.n	800746a <_free_r+0x22>
 80074b4:	d902      	bls.n	80074bc <_free_r+0x74>
 80074b6:	230c      	movs	r3, #12
 80074b8:	602b      	str	r3, [r5, #0]
 80074ba:	e7d6      	b.n	800746a <_free_r+0x22>
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	1821      	adds	r1, r4, r0
 80074c0:	428b      	cmp	r3, r1
 80074c2:	bf01      	itttt	eq
 80074c4:	6819      	ldreq	r1, [r3, #0]
 80074c6:	685b      	ldreq	r3, [r3, #4]
 80074c8:	1809      	addeq	r1, r1, r0
 80074ca:	6021      	streq	r1, [r4, #0]
 80074cc:	6063      	str	r3, [r4, #4]
 80074ce:	6054      	str	r4, [r2, #4]
 80074d0:	e7cb      	b.n	800746a <_free_r+0x22>
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	200006a0 	.word	0x200006a0

080074d8 <sbrk_aligned>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	4e0e      	ldr	r6, [pc, #56]	; (8007514 <sbrk_aligned+0x3c>)
 80074dc:	460c      	mov	r4, r1
 80074de:	6831      	ldr	r1, [r6, #0]
 80074e0:	4605      	mov	r5, r0
 80074e2:	b911      	cbnz	r1, 80074ea <sbrk_aligned+0x12>
 80074e4:	f000 f9e8 	bl	80078b8 <_sbrk_r>
 80074e8:	6030      	str	r0, [r6, #0]
 80074ea:	4621      	mov	r1, r4
 80074ec:	4628      	mov	r0, r5
 80074ee:	f000 f9e3 	bl	80078b8 <_sbrk_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	d00a      	beq.n	800750c <sbrk_aligned+0x34>
 80074f6:	1cc4      	adds	r4, r0, #3
 80074f8:	f024 0403 	bic.w	r4, r4, #3
 80074fc:	42a0      	cmp	r0, r4
 80074fe:	d007      	beq.n	8007510 <sbrk_aligned+0x38>
 8007500:	1a21      	subs	r1, r4, r0
 8007502:	4628      	mov	r0, r5
 8007504:	f000 f9d8 	bl	80078b8 <_sbrk_r>
 8007508:	3001      	adds	r0, #1
 800750a:	d101      	bne.n	8007510 <sbrk_aligned+0x38>
 800750c:	f04f 34ff 	mov.w	r4, #4294967295
 8007510:	4620      	mov	r0, r4
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	200006a4 	.word	0x200006a4

08007518 <_malloc_r>:
 8007518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800751c:	1ccd      	adds	r5, r1, #3
 800751e:	f025 0503 	bic.w	r5, r5, #3
 8007522:	3508      	adds	r5, #8
 8007524:	2d0c      	cmp	r5, #12
 8007526:	bf38      	it	cc
 8007528:	250c      	movcc	r5, #12
 800752a:	2d00      	cmp	r5, #0
 800752c:	4607      	mov	r7, r0
 800752e:	db01      	blt.n	8007534 <_malloc_r+0x1c>
 8007530:	42a9      	cmp	r1, r5
 8007532:	d905      	bls.n	8007540 <_malloc_r+0x28>
 8007534:	230c      	movs	r3, #12
 8007536:	2600      	movs	r6, #0
 8007538:	603b      	str	r3, [r7, #0]
 800753a:	4630      	mov	r0, r6
 800753c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007540:	4e2e      	ldr	r6, [pc, #184]	; (80075fc <_malloc_r+0xe4>)
 8007542:	f000 fa25 	bl	8007990 <__malloc_lock>
 8007546:	6833      	ldr	r3, [r6, #0]
 8007548:	461c      	mov	r4, r3
 800754a:	bb34      	cbnz	r4, 800759a <_malloc_r+0x82>
 800754c:	4629      	mov	r1, r5
 800754e:	4638      	mov	r0, r7
 8007550:	f7ff ffc2 	bl	80074d8 <sbrk_aligned>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	4604      	mov	r4, r0
 8007558:	d14d      	bne.n	80075f6 <_malloc_r+0xde>
 800755a:	6834      	ldr	r4, [r6, #0]
 800755c:	4626      	mov	r6, r4
 800755e:	2e00      	cmp	r6, #0
 8007560:	d140      	bne.n	80075e4 <_malloc_r+0xcc>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	4631      	mov	r1, r6
 8007566:	4638      	mov	r0, r7
 8007568:	eb04 0803 	add.w	r8, r4, r3
 800756c:	f000 f9a4 	bl	80078b8 <_sbrk_r>
 8007570:	4580      	cmp	r8, r0
 8007572:	d13a      	bne.n	80075ea <_malloc_r+0xd2>
 8007574:	6821      	ldr	r1, [r4, #0]
 8007576:	3503      	adds	r5, #3
 8007578:	1a6d      	subs	r5, r5, r1
 800757a:	f025 0503 	bic.w	r5, r5, #3
 800757e:	3508      	adds	r5, #8
 8007580:	2d0c      	cmp	r5, #12
 8007582:	bf38      	it	cc
 8007584:	250c      	movcc	r5, #12
 8007586:	4638      	mov	r0, r7
 8007588:	4629      	mov	r1, r5
 800758a:	f7ff ffa5 	bl	80074d8 <sbrk_aligned>
 800758e:	3001      	adds	r0, #1
 8007590:	d02b      	beq.n	80075ea <_malloc_r+0xd2>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	442b      	add	r3, r5
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	e00e      	b.n	80075b8 <_malloc_r+0xa0>
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	1b52      	subs	r2, r2, r5
 800759e:	d41e      	bmi.n	80075de <_malloc_r+0xc6>
 80075a0:	2a0b      	cmp	r2, #11
 80075a2:	d916      	bls.n	80075d2 <_malloc_r+0xba>
 80075a4:	1961      	adds	r1, r4, r5
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	6025      	str	r5, [r4, #0]
 80075aa:	bf18      	it	ne
 80075ac:	6059      	strne	r1, [r3, #4]
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	bf08      	it	eq
 80075b2:	6031      	streq	r1, [r6, #0]
 80075b4:	5162      	str	r2, [r4, r5]
 80075b6:	604b      	str	r3, [r1, #4]
 80075b8:	4638      	mov	r0, r7
 80075ba:	f104 060b 	add.w	r6, r4, #11
 80075be:	f000 f9ed 	bl	800799c <__malloc_unlock>
 80075c2:	f026 0607 	bic.w	r6, r6, #7
 80075c6:	1d23      	adds	r3, r4, #4
 80075c8:	1af2      	subs	r2, r6, r3
 80075ca:	d0b6      	beq.n	800753a <_malloc_r+0x22>
 80075cc:	1b9b      	subs	r3, r3, r6
 80075ce:	50a3      	str	r3, [r4, r2]
 80075d0:	e7b3      	b.n	800753a <_malloc_r+0x22>
 80075d2:	6862      	ldr	r2, [r4, #4]
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	bf0c      	ite	eq
 80075d8:	6032      	streq	r2, [r6, #0]
 80075da:	605a      	strne	r2, [r3, #4]
 80075dc:	e7ec      	b.n	80075b8 <_malloc_r+0xa0>
 80075de:	4623      	mov	r3, r4
 80075e0:	6864      	ldr	r4, [r4, #4]
 80075e2:	e7b2      	b.n	800754a <_malloc_r+0x32>
 80075e4:	4634      	mov	r4, r6
 80075e6:	6876      	ldr	r6, [r6, #4]
 80075e8:	e7b9      	b.n	800755e <_malloc_r+0x46>
 80075ea:	230c      	movs	r3, #12
 80075ec:	4638      	mov	r0, r7
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	f000 f9d4 	bl	800799c <__malloc_unlock>
 80075f4:	e7a1      	b.n	800753a <_malloc_r+0x22>
 80075f6:	6025      	str	r5, [r4, #0]
 80075f8:	e7de      	b.n	80075b8 <_malloc_r+0xa0>
 80075fa:	bf00      	nop
 80075fc:	200006a0 	.word	0x200006a0

08007600 <__ssputs_r>:
 8007600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007604:	688e      	ldr	r6, [r1, #8]
 8007606:	4682      	mov	sl, r0
 8007608:	429e      	cmp	r6, r3
 800760a:	460c      	mov	r4, r1
 800760c:	4690      	mov	r8, r2
 800760e:	461f      	mov	r7, r3
 8007610:	d838      	bhi.n	8007684 <__ssputs_r+0x84>
 8007612:	898a      	ldrh	r2, [r1, #12]
 8007614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007618:	d032      	beq.n	8007680 <__ssputs_r+0x80>
 800761a:	6825      	ldr	r5, [r4, #0]
 800761c:	6909      	ldr	r1, [r1, #16]
 800761e:	3301      	adds	r3, #1
 8007620:	eba5 0901 	sub.w	r9, r5, r1
 8007624:	6965      	ldr	r5, [r4, #20]
 8007626:	444b      	add	r3, r9
 8007628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800762c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007630:	106d      	asrs	r5, r5, #1
 8007632:	429d      	cmp	r5, r3
 8007634:	bf38      	it	cc
 8007636:	461d      	movcc	r5, r3
 8007638:	0553      	lsls	r3, r2, #21
 800763a:	d531      	bpl.n	80076a0 <__ssputs_r+0xa0>
 800763c:	4629      	mov	r1, r5
 800763e:	f7ff ff6b 	bl	8007518 <_malloc_r>
 8007642:	4606      	mov	r6, r0
 8007644:	b950      	cbnz	r0, 800765c <__ssputs_r+0x5c>
 8007646:	230c      	movs	r3, #12
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	f8ca 3000 	str.w	r3, [sl]
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007656:	81a3      	strh	r3, [r4, #12]
 8007658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765c:	464a      	mov	r2, r9
 800765e:	6921      	ldr	r1, [r4, #16]
 8007660:	f7ff fb4e 	bl	8006d00 <memcpy>
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800766a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766e:	81a3      	strh	r3, [r4, #12]
 8007670:	6126      	str	r6, [r4, #16]
 8007672:	444e      	add	r6, r9
 8007674:	6026      	str	r6, [r4, #0]
 8007676:	463e      	mov	r6, r7
 8007678:	6165      	str	r5, [r4, #20]
 800767a:	eba5 0509 	sub.w	r5, r5, r9
 800767e:	60a5      	str	r5, [r4, #8]
 8007680:	42be      	cmp	r6, r7
 8007682:	d900      	bls.n	8007686 <__ssputs_r+0x86>
 8007684:	463e      	mov	r6, r7
 8007686:	4632      	mov	r2, r6
 8007688:	4641      	mov	r1, r8
 800768a:	6820      	ldr	r0, [r4, #0]
 800768c:	f000 f966 	bl	800795c <memmove>
 8007690:	68a3      	ldr	r3, [r4, #8]
 8007692:	2000      	movs	r0, #0
 8007694:	1b9b      	subs	r3, r3, r6
 8007696:	60a3      	str	r3, [r4, #8]
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	4433      	add	r3, r6
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	e7db      	b.n	8007658 <__ssputs_r+0x58>
 80076a0:	462a      	mov	r2, r5
 80076a2:	f000 f981 	bl	80079a8 <_realloc_r>
 80076a6:	4606      	mov	r6, r0
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d1e1      	bne.n	8007670 <__ssputs_r+0x70>
 80076ac:	4650      	mov	r0, sl
 80076ae:	6921      	ldr	r1, [r4, #16]
 80076b0:	f7ff feca 	bl	8007448 <_free_r>
 80076b4:	e7c7      	b.n	8007646 <__ssputs_r+0x46>
	...

080076b8 <_svfiprintf_r>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4698      	mov	r8, r3
 80076be:	898b      	ldrh	r3, [r1, #12]
 80076c0:	4607      	mov	r7, r0
 80076c2:	061b      	lsls	r3, r3, #24
 80076c4:	460d      	mov	r5, r1
 80076c6:	4614      	mov	r4, r2
 80076c8:	b09d      	sub	sp, #116	; 0x74
 80076ca:	d50e      	bpl.n	80076ea <_svfiprintf_r+0x32>
 80076cc:	690b      	ldr	r3, [r1, #16]
 80076ce:	b963      	cbnz	r3, 80076ea <_svfiprintf_r+0x32>
 80076d0:	2140      	movs	r1, #64	; 0x40
 80076d2:	f7ff ff21 	bl	8007518 <_malloc_r>
 80076d6:	6028      	str	r0, [r5, #0]
 80076d8:	6128      	str	r0, [r5, #16]
 80076da:	b920      	cbnz	r0, 80076e6 <_svfiprintf_r+0x2e>
 80076dc:	230c      	movs	r3, #12
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	e0d1      	b.n	800788a <_svfiprintf_r+0x1d2>
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	616b      	str	r3, [r5, #20]
 80076ea:	2300      	movs	r3, #0
 80076ec:	9309      	str	r3, [sp, #36]	; 0x24
 80076ee:	2320      	movs	r3, #32
 80076f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076f4:	2330      	movs	r3, #48	; 0x30
 80076f6:	f04f 0901 	mov.w	r9, #1
 80076fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80076fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078a4 <_svfiprintf_r+0x1ec>
 8007702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007706:	4623      	mov	r3, r4
 8007708:	469a      	mov	sl, r3
 800770a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800770e:	b10a      	cbz	r2, 8007714 <_svfiprintf_r+0x5c>
 8007710:	2a25      	cmp	r2, #37	; 0x25
 8007712:	d1f9      	bne.n	8007708 <_svfiprintf_r+0x50>
 8007714:	ebba 0b04 	subs.w	fp, sl, r4
 8007718:	d00b      	beq.n	8007732 <_svfiprintf_r+0x7a>
 800771a:	465b      	mov	r3, fp
 800771c:	4622      	mov	r2, r4
 800771e:	4629      	mov	r1, r5
 8007720:	4638      	mov	r0, r7
 8007722:	f7ff ff6d 	bl	8007600 <__ssputs_r>
 8007726:	3001      	adds	r0, #1
 8007728:	f000 80aa 	beq.w	8007880 <_svfiprintf_r+0x1c8>
 800772c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800772e:	445a      	add	r2, fp
 8007730:	9209      	str	r2, [sp, #36]	; 0x24
 8007732:	f89a 3000 	ldrb.w	r3, [sl]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 80a2 	beq.w	8007880 <_svfiprintf_r+0x1c8>
 800773c:	2300      	movs	r3, #0
 800773e:	f04f 32ff 	mov.w	r2, #4294967295
 8007742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007746:	f10a 0a01 	add.w	sl, sl, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	9307      	str	r3, [sp, #28]
 800774e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007752:	931a      	str	r3, [sp, #104]	; 0x68
 8007754:	4654      	mov	r4, sl
 8007756:	2205      	movs	r2, #5
 8007758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800775c:	4851      	ldr	r0, [pc, #324]	; (80078a4 <_svfiprintf_r+0x1ec>)
 800775e:	f7ff fac1 	bl	8006ce4 <memchr>
 8007762:	9a04      	ldr	r2, [sp, #16]
 8007764:	b9d8      	cbnz	r0, 800779e <_svfiprintf_r+0xe6>
 8007766:	06d0      	lsls	r0, r2, #27
 8007768:	bf44      	itt	mi
 800776a:	2320      	movmi	r3, #32
 800776c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007770:	0711      	lsls	r1, r2, #28
 8007772:	bf44      	itt	mi
 8007774:	232b      	movmi	r3, #43	; 0x2b
 8007776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800777a:	f89a 3000 	ldrb.w	r3, [sl]
 800777e:	2b2a      	cmp	r3, #42	; 0x2a
 8007780:	d015      	beq.n	80077ae <_svfiprintf_r+0xf6>
 8007782:	4654      	mov	r4, sl
 8007784:	2000      	movs	r0, #0
 8007786:	f04f 0c0a 	mov.w	ip, #10
 800778a:	9a07      	ldr	r2, [sp, #28]
 800778c:	4621      	mov	r1, r4
 800778e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007792:	3b30      	subs	r3, #48	; 0x30
 8007794:	2b09      	cmp	r3, #9
 8007796:	d94e      	bls.n	8007836 <_svfiprintf_r+0x17e>
 8007798:	b1b0      	cbz	r0, 80077c8 <_svfiprintf_r+0x110>
 800779a:	9207      	str	r2, [sp, #28]
 800779c:	e014      	b.n	80077c8 <_svfiprintf_r+0x110>
 800779e:	eba0 0308 	sub.w	r3, r0, r8
 80077a2:	fa09 f303 	lsl.w	r3, r9, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	46a2      	mov	sl, r4
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	e7d2      	b.n	8007754 <_svfiprintf_r+0x9c>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	1d19      	adds	r1, r3, #4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	9103      	str	r1, [sp, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bfbb      	ittet	lt
 80077ba:	425b      	neglt	r3, r3
 80077bc:	f042 0202 	orrlt.w	r2, r2, #2
 80077c0:	9307      	strge	r3, [sp, #28]
 80077c2:	9307      	strlt	r3, [sp, #28]
 80077c4:	bfb8      	it	lt
 80077c6:	9204      	strlt	r2, [sp, #16]
 80077c8:	7823      	ldrb	r3, [r4, #0]
 80077ca:	2b2e      	cmp	r3, #46	; 0x2e
 80077cc:	d10c      	bne.n	80077e8 <_svfiprintf_r+0x130>
 80077ce:	7863      	ldrb	r3, [r4, #1]
 80077d0:	2b2a      	cmp	r3, #42	; 0x2a
 80077d2:	d135      	bne.n	8007840 <_svfiprintf_r+0x188>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	3402      	adds	r4, #2
 80077d8:	1d1a      	adds	r2, r3, #4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	9203      	str	r2, [sp, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfb8      	it	lt
 80077e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80077e6:	9305      	str	r3, [sp, #20]
 80077e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80078a8 <_svfiprintf_r+0x1f0>
 80077ec:	2203      	movs	r2, #3
 80077ee:	4650      	mov	r0, sl
 80077f0:	7821      	ldrb	r1, [r4, #0]
 80077f2:	f7ff fa77 	bl	8006ce4 <memchr>
 80077f6:	b140      	cbz	r0, 800780a <_svfiprintf_r+0x152>
 80077f8:	2340      	movs	r3, #64	; 0x40
 80077fa:	eba0 000a 	sub.w	r0, r0, sl
 80077fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	3401      	adds	r4, #1
 8007806:	4303      	orrs	r3, r0
 8007808:	9304      	str	r3, [sp, #16]
 800780a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800780e:	2206      	movs	r2, #6
 8007810:	4826      	ldr	r0, [pc, #152]	; (80078ac <_svfiprintf_r+0x1f4>)
 8007812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007816:	f7ff fa65 	bl	8006ce4 <memchr>
 800781a:	2800      	cmp	r0, #0
 800781c:	d038      	beq.n	8007890 <_svfiprintf_r+0x1d8>
 800781e:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <_svfiprintf_r+0x1f8>)
 8007820:	bb1b      	cbnz	r3, 800786a <_svfiprintf_r+0x1b2>
 8007822:	9b03      	ldr	r3, [sp, #12]
 8007824:	3307      	adds	r3, #7
 8007826:	f023 0307 	bic.w	r3, r3, #7
 800782a:	3308      	adds	r3, #8
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007830:	4433      	add	r3, r6
 8007832:	9309      	str	r3, [sp, #36]	; 0x24
 8007834:	e767      	b.n	8007706 <_svfiprintf_r+0x4e>
 8007836:	460c      	mov	r4, r1
 8007838:	2001      	movs	r0, #1
 800783a:	fb0c 3202 	mla	r2, ip, r2, r3
 800783e:	e7a5      	b.n	800778c <_svfiprintf_r+0xd4>
 8007840:	2300      	movs	r3, #0
 8007842:	f04f 0c0a 	mov.w	ip, #10
 8007846:	4619      	mov	r1, r3
 8007848:	3401      	adds	r4, #1
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	4620      	mov	r0, r4
 800784e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007852:	3a30      	subs	r2, #48	; 0x30
 8007854:	2a09      	cmp	r2, #9
 8007856:	d903      	bls.n	8007860 <_svfiprintf_r+0x1a8>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0c5      	beq.n	80077e8 <_svfiprintf_r+0x130>
 800785c:	9105      	str	r1, [sp, #20]
 800785e:	e7c3      	b.n	80077e8 <_svfiprintf_r+0x130>
 8007860:	4604      	mov	r4, r0
 8007862:	2301      	movs	r3, #1
 8007864:	fb0c 2101 	mla	r1, ip, r1, r2
 8007868:	e7f0      	b.n	800784c <_svfiprintf_r+0x194>
 800786a:	ab03      	add	r3, sp, #12
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	462a      	mov	r2, r5
 8007870:	4638      	mov	r0, r7
 8007872:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <_svfiprintf_r+0x1fc>)
 8007874:	a904      	add	r1, sp, #16
 8007876:	f7fd ffcd 	bl	8005814 <_printf_float>
 800787a:	1c42      	adds	r2, r0, #1
 800787c:	4606      	mov	r6, r0
 800787e:	d1d6      	bne.n	800782e <_svfiprintf_r+0x176>
 8007880:	89ab      	ldrh	r3, [r5, #12]
 8007882:	065b      	lsls	r3, r3, #25
 8007884:	f53f af2c 	bmi.w	80076e0 <_svfiprintf_r+0x28>
 8007888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800788a:	b01d      	add	sp, #116	; 0x74
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	ab03      	add	r3, sp, #12
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	462a      	mov	r2, r5
 8007896:	4638      	mov	r0, r7
 8007898:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <_svfiprintf_r+0x1fc>)
 800789a:	a904      	add	r1, sp, #16
 800789c:	f7fe fa56 	bl	8005d4c <_printf_i>
 80078a0:	e7eb      	b.n	800787a <_svfiprintf_r+0x1c2>
 80078a2:	bf00      	nop
 80078a4:	08008774 	.word	0x08008774
 80078a8:	0800877a 	.word	0x0800877a
 80078ac:	0800877e 	.word	0x0800877e
 80078b0:	08005815 	.word	0x08005815
 80078b4:	08007601 	.word	0x08007601

080078b8 <_sbrk_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	2300      	movs	r3, #0
 80078bc:	4d05      	ldr	r5, [pc, #20]	; (80078d4 <_sbrk_r+0x1c>)
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	f7fa fcfc 	bl	80022c0 <_sbrk>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_sbrk_r+0x1a>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_sbrk_r+0x1a>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	200006a8 	.word	0x200006a8

080078d8 <__assert_func>:
 80078d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078da:	4614      	mov	r4, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <__assert_func+0x2c>)
 80078e0:	4605      	mov	r5, r0
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68d8      	ldr	r0, [r3, #12]
 80078e6:	b14c      	cbz	r4, 80078fc <__assert_func+0x24>
 80078e8:	4b07      	ldr	r3, [pc, #28]	; (8007908 <__assert_func+0x30>)
 80078ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078ee:	9100      	str	r1, [sp, #0]
 80078f0:	462b      	mov	r3, r5
 80078f2:	4906      	ldr	r1, [pc, #24]	; (800790c <__assert_func+0x34>)
 80078f4:	f000 f80e 	bl	8007914 <fiprintf>
 80078f8:	f000 faaa 	bl	8007e50 <abort>
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <__assert_func+0x38>)
 80078fe:	461c      	mov	r4, r3
 8007900:	e7f3      	b.n	80078ea <__assert_func+0x12>
 8007902:	bf00      	nop
 8007904:	20000010 	.word	0x20000010
 8007908:	08008785 	.word	0x08008785
 800790c:	08008792 	.word	0x08008792
 8007910:	080087c0 	.word	0x080087c0

08007914 <fiprintf>:
 8007914:	b40e      	push	{r1, r2, r3}
 8007916:	b503      	push	{r0, r1, lr}
 8007918:	4601      	mov	r1, r0
 800791a:	ab03      	add	r3, sp, #12
 800791c:	4805      	ldr	r0, [pc, #20]	; (8007934 <fiprintf+0x20>)
 800791e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007922:	6800      	ldr	r0, [r0, #0]
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	f000 f895 	bl	8007a54 <_vfiprintf_r>
 800792a:	b002      	add	sp, #8
 800792c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007930:	b003      	add	sp, #12
 8007932:	4770      	bx	lr
 8007934:	20000010 	.word	0x20000010

08007938 <__ascii_mbtowc>:
 8007938:	b082      	sub	sp, #8
 800793a:	b901      	cbnz	r1, 800793e <__ascii_mbtowc+0x6>
 800793c:	a901      	add	r1, sp, #4
 800793e:	b142      	cbz	r2, 8007952 <__ascii_mbtowc+0x1a>
 8007940:	b14b      	cbz	r3, 8007956 <__ascii_mbtowc+0x1e>
 8007942:	7813      	ldrb	r3, [r2, #0]
 8007944:	600b      	str	r3, [r1, #0]
 8007946:	7812      	ldrb	r2, [r2, #0]
 8007948:	1e10      	subs	r0, r2, #0
 800794a:	bf18      	it	ne
 800794c:	2001      	movne	r0, #1
 800794e:	b002      	add	sp, #8
 8007950:	4770      	bx	lr
 8007952:	4610      	mov	r0, r2
 8007954:	e7fb      	b.n	800794e <__ascii_mbtowc+0x16>
 8007956:	f06f 0001 	mvn.w	r0, #1
 800795a:	e7f8      	b.n	800794e <__ascii_mbtowc+0x16>

0800795c <memmove>:
 800795c:	4288      	cmp	r0, r1
 800795e:	b510      	push	{r4, lr}
 8007960:	eb01 0402 	add.w	r4, r1, r2
 8007964:	d902      	bls.n	800796c <memmove+0x10>
 8007966:	4284      	cmp	r4, r0
 8007968:	4623      	mov	r3, r4
 800796a:	d807      	bhi.n	800797c <memmove+0x20>
 800796c:	1e43      	subs	r3, r0, #1
 800796e:	42a1      	cmp	r1, r4
 8007970:	d008      	beq.n	8007984 <memmove+0x28>
 8007972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800797a:	e7f8      	b.n	800796e <memmove+0x12>
 800797c:	4601      	mov	r1, r0
 800797e:	4402      	add	r2, r0
 8007980:	428a      	cmp	r2, r1
 8007982:	d100      	bne.n	8007986 <memmove+0x2a>
 8007984:	bd10      	pop	{r4, pc}
 8007986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800798a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800798e:	e7f7      	b.n	8007980 <memmove+0x24>

08007990 <__malloc_lock>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__malloc_lock+0x8>)
 8007992:	f000 bc19 	b.w	80081c8 <__retarget_lock_acquire_recursive>
 8007996:	bf00      	nop
 8007998:	200006ac 	.word	0x200006ac

0800799c <__malloc_unlock>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__malloc_unlock+0x8>)
 800799e:	f000 bc14 	b.w	80081ca <__retarget_lock_release_recursive>
 80079a2:	bf00      	nop
 80079a4:	200006ac 	.word	0x200006ac

080079a8 <_realloc_r>:
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	4680      	mov	r8, r0
 80079ae:	4614      	mov	r4, r2
 80079b0:	460e      	mov	r6, r1
 80079b2:	b921      	cbnz	r1, 80079be <_realloc_r+0x16>
 80079b4:	4611      	mov	r1, r2
 80079b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ba:	f7ff bdad 	b.w	8007518 <_malloc_r>
 80079be:	b92a      	cbnz	r2, 80079cc <_realloc_r+0x24>
 80079c0:	f7ff fd42 	bl	8007448 <_free_r>
 80079c4:	4625      	mov	r5, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079cc:	f000 fc64 	bl	8008298 <_malloc_usable_size_r>
 80079d0:	4284      	cmp	r4, r0
 80079d2:	4607      	mov	r7, r0
 80079d4:	d802      	bhi.n	80079dc <_realloc_r+0x34>
 80079d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079da:	d812      	bhi.n	8007a02 <_realloc_r+0x5a>
 80079dc:	4621      	mov	r1, r4
 80079de:	4640      	mov	r0, r8
 80079e0:	f7ff fd9a 	bl	8007518 <_malloc_r>
 80079e4:	4605      	mov	r5, r0
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d0ed      	beq.n	80079c6 <_realloc_r+0x1e>
 80079ea:	42bc      	cmp	r4, r7
 80079ec:	4622      	mov	r2, r4
 80079ee:	4631      	mov	r1, r6
 80079f0:	bf28      	it	cs
 80079f2:	463a      	movcs	r2, r7
 80079f4:	f7ff f984 	bl	8006d00 <memcpy>
 80079f8:	4631      	mov	r1, r6
 80079fa:	4640      	mov	r0, r8
 80079fc:	f7ff fd24 	bl	8007448 <_free_r>
 8007a00:	e7e1      	b.n	80079c6 <_realloc_r+0x1e>
 8007a02:	4635      	mov	r5, r6
 8007a04:	e7df      	b.n	80079c6 <_realloc_r+0x1e>

08007a06 <__sfputc_r>:
 8007a06:	6893      	ldr	r3, [r2, #8]
 8007a08:	b410      	push	{r4}
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	6093      	str	r3, [r2, #8]
 8007a10:	da07      	bge.n	8007a22 <__sfputc_r+0x1c>
 8007a12:	6994      	ldr	r4, [r2, #24]
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	db01      	blt.n	8007a1c <__sfputc_r+0x16>
 8007a18:	290a      	cmp	r1, #10
 8007a1a:	d102      	bne.n	8007a22 <__sfputc_r+0x1c>
 8007a1c:	bc10      	pop	{r4}
 8007a1e:	f000 b949 	b.w	8007cb4 <__swbuf_r>
 8007a22:	6813      	ldr	r3, [r2, #0]
 8007a24:	1c58      	adds	r0, r3, #1
 8007a26:	6010      	str	r0, [r2, #0]
 8007a28:	7019      	strb	r1, [r3, #0]
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	bc10      	pop	{r4}
 8007a2e:	4770      	bx	lr

08007a30 <__sfputs_r>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	4606      	mov	r6, r0
 8007a34:	460f      	mov	r7, r1
 8007a36:	4614      	mov	r4, r2
 8007a38:	18d5      	adds	r5, r2, r3
 8007a3a:	42ac      	cmp	r4, r5
 8007a3c:	d101      	bne.n	8007a42 <__sfputs_r+0x12>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e007      	b.n	8007a52 <__sfputs_r+0x22>
 8007a42:	463a      	mov	r2, r7
 8007a44:	4630      	mov	r0, r6
 8007a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a4a:	f7ff ffdc 	bl	8007a06 <__sfputc_r>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d1f3      	bne.n	8007a3a <__sfputs_r+0xa>
 8007a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a54 <_vfiprintf_r>:
 8007a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a58:	460d      	mov	r5, r1
 8007a5a:	4614      	mov	r4, r2
 8007a5c:	4698      	mov	r8, r3
 8007a5e:	4606      	mov	r6, r0
 8007a60:	b09d      	sub	sp, #116	; 0x74
 8007a62:	b118      	cbz	r0, 8007a6c <_vfiprintf_r+0x18>
 8007a64:	6983      	ldr	r3, [r0, #24]
 8007a66:	b90b      	cbnz	r3, 8007a6c <_vfiprintf_r+0x18>
 8007a68:	f000 fb10 	bl	800808c <__sinit>
 8007a6c:	4b89      	ldr	r3, [pc, #548]	; (8007c94 <_vfiprintf_r+0x240>)
 8007a6e:	429d      	cmp	r5, r3
 8007a70:	d11b      	bne.n	8007aaa <_vfiprintf_r+0x56>
 8007a72:	6875      	ldr	r5, [r6, #4]
 8007a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a76:	07d9      	lsls	r1, r3, #31
 8007a78:	d405      	bmi.n	8007a86 <_vfiprintf_r+0x32>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	059a      	lsls	r2, r3, #22
 8007a7e:	d402      	bmi.n	8007a86 <_vfiprintf_r+0x32>
 8007a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a82:	f000 fba1 	bl	80081c8 <__retarget_lock_acquire_recursive>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	071b      	lsls	r3, r3, #28
 8007a8a:	d501      	bpl.n	8007a90 <_vfiprintf_r+0x3c>
 8007a8c:	692b      	ldr	r3, [r5, #16]
 8007a8e:	b9eb      	cbnz	r3, 8007acc <_vfiprintf_r+0x78>
 8007a90:	4629      	mov	r1, r5
 8007a92:	4630      	mov	r0, r6
 8007a94:	f000 f96e 	bl	8007d74 <__swsetup_r>
 8007a98:	b1c0      	cbz	r0, 8007acc <_vfiprintf_r+0x78>
 8007a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a9c:	07dc      	lsls	r4, r3, #31
 8007a9e:	d50e      	bpl.n	8007abe <_vfiprintf_r+0x6a>
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	b01d      	add	sp, #116	; 0x74
 8007aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aaa:	4b7b      	ldr	r3, [pc, #492]	; (8007c98 <_vfiprintf_r+0x244>)
 8007aac:	429d      	cmp	r5, r3
 8007aae:	d101      	bne.n	8007ab4 <_vfiprintf_r+0x60>
 8007ab0:	68b5      	ldr	r5, [r6, #8]
 8007ab2:	e7df      	b.n	8007a74 <_vfiprintf_r+0x20>
 8007ab4:	4b79      	ldr	r3, [pc, #484]	; (8007c9c <_vfiprintf_r+0x248>)
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	bf08      	it	eq
 8007aba:	68f5      	ldreq	r5, [r6, #12]
 8007abc:	e7da      	b.n	8007a74 <_vfiprintf_r+0x20>
 8007abe:	89ab      	ldrh	r3, [r5, #12]
 8007ac0:	0598      	lsls	r0, r3, #22
 8007ac2:	d4ed      	bmi.n	8007aa0 <_vfiprintf_r+0x4c>
 8007ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ac6:	f000 fb80 	bl	80081ca <__retarget_lock_release_recursive>
 8007aca:	e7e9      	b.n	8007aa0 <_vfiprintf_r+0x4c>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad0:	2320      	movs	r3, #32
 8007ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ad6:	2330      	movs	r3, #48	; 0x30
 8007ad8:	f04f 0901 	mov.w	r9, #1
 8007adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007ca0 <_vfiprintf_r+0x24c>
 8007ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae8:	4623      	mov	r3, r4
 8007aea:	469a      	mov	sl, r3
 8007aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af0:	b10a      	cbz	r2, 8007af6 <_vfiprintf_r+0xa2>
 8007af2:	2a25      	cmp	r2, #37	; 0x25
 8007af4:	d1f9      	bne.n	8007aea <_vfiprintf_r+0x96>
 8007af6:	ebba 0b04 	subs.w	fp, sl, r4
 8007afa:	d00b      	beq.n	8007b14 <_vfiprintf_r+0xc0>
 8007afc:	465b      	mov	r3, fp
 8007afe:	4622      	mov	r2, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff ff94 	bl	8007a30 <__sfputs_r>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f000 80aa 	beq.w	8007c62 <_vfiprintf_r+0x20e>
 8007b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b10:	445a      	add	r2, fp
 8007b12:	9209      	str	r2, [sp, #36]	; 0x24
 8007b14:	f89a 3000 	ldrb.w	r3, [sl]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80a2 	beq.w	8007c62 <_vfiprintf_r+0x20e>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f04f 32ff 	mov.w	r2, #4294967295
 8007b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b28:	f10a 0a01 	add.w	sl, sl, #1
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	9307      	str	r3, [sp, #28]
 8007b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b34:	931a      	str	r3, [sp, #104]	; 0x68
 8007b36:	4654      	mov	r4, sl
 8007b38:	2205      	movs	r2, #5
 8007b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3e:	4858      	ldr	r0, [pc, #352]	; (8007ca0 <_vfiprintf_r+0x24c>)
 8007b40:	f7ff f8d0 	bl	8006ce4 <memchr>
 8007b44:	9a04      	ldr	r2, [sp, #16]
 8007b46:	b9d8      	cbnz	r0, 8007b80 <_vfiprintf_r+0x12c>
 8007b48:	06d1      	lsls	r1, r2, #27
 8007b4a:	bf44      	itt	mi
 8007b4c:	2320      	movmi	r3, #32
 8007b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b52:	0713      	lsls	r3, r2, #28
 8007b54:	bf44      	itt	mi
 8007b56:	232b      	movmi	r3, #43	; 0x2b
 8007b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b60:	2b2a      	cmp	r3, #42	; 0x2a
 8007b62:	d015      	beq.n	8007b90 <_vfiprintf_r+0x13c>
 8007b64:	4654      	mov	r4, sl
 8007b66:	2000      	movs	r0, #0
 8007b68:	f04f 0c0a 	mov.w	ip, #10
 8007b6c:	9a07      	ldr	r2, [sp, #28]
 8007b6e:	4621      	mov	r1, r4
 8007b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b74:	3b30      	subs	r3, #48	; 0x30
 8007b76:	2b09      	cmp	r3, #9
 8007b78:	d94e      	bls.n	8007c18 <_vfiprintf_r+0x1c4>
 8007b7a:	b1b0      	cbz	r0, 8007baa <_vfiprintf_r+0x156>
 8007b7c:	9207      	str	r2, [sp, #28]
 8007b7e:	e014      	b.n	8007baa <_vfiprintf_r+0x156>
 8007b80:	eba0 0308 	sub.w	r3, r0, r8
 8007b84:	fa09 f303 	lsl.w	r3, r9, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	46a2      	mov	sl, r4
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	e7d2      	b.n	8007b36 <_vfiprintf_r+0xe2>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	1d19      	adds	r1, r3, #4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	9103      	str	r1, [sp, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bfbb      	ittet	lt
 8007b9c:	425b      	neglt	r3, r3
 8007b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba2:	9307      	strge	r3, [sp, #28]
 8007ba4:	9307      	strlt	r3, [sp, #28]
 8007ba6:	bfb8      	it	lt
 8007ba8:	9204      	strlt	r2, [sp, #16]
 8007baa:	7823      	ldrb	r3, [r4, #0]
 8007bac:	2b2e      	cmp	r3, #46	; 0x2e
 8007bae:	d10c      	bne.n	8007bca <_vfiprintf_r+0x176>
 8007bb0:	7863      	ldrb	r3, [r4, #1]
 8007bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb4:	d135      	bne.n	8007c22 <_vfiprintf_r+0x1ce>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	3402      	adds	r4, #2
 8007bba:	1d1a      	adds	r2, r3, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	9203      	str	r2, [sp, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bfb8      	it	lt
 8007bc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007ca4 <_vfiprintf_r+0x250>
 8007bce:	2203      	movs	r2, #3
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	7821      	ldrb	r1, [r4, #0]
 8007bd4:	f7ff f886 	bl	8006ce4 <memchr>
 8007bd8:	b140      	cbz	r0, 8007bec <_vfiprintf_r+0x198>
 8007bda:	2340      	movs	r3, #64	; 0x40
 8007bdc:	eba0 000a 	sub.w	r0, r0, sl
 8007be0:	fa03 f000 	lsl.w	r0, r3, r0
 8007be4:	9b04      	ldr	r3, [sp, #16]
 8007be6:	3401      	adds	r4, #1
 8007be8:	4303      	orrs	r3, r0
 8007bea:	9304      	str	r3, [sp, #16]
 8007bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf0:	2206      	movs	r2, #6
 8007bf2:	482d      	ldr	r0, [pc, #180]	; (8007ca8 <_vfiprintf_r+0x254>)
 8007bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bf8:	f7ff f874 	bl	8006ce4 <memchr>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d03f      	beq.n	8007c80 <_vfiprintf_r+0x22c>
 8007c00:	4b2a      	ldr	r3, [pc, #168]	; (8007cac <_vfiprintf_r+0x258>)
 8007c02:	bb1b      	cbnz	r3, 8007c4c <_vfiprintf_r+0x1f8>
 8007c04:	9b03      	ldr	r3, [sp, #12]
 8007c06:	3307      	adds	r3, #7
 8007c08:	f023 0307 	bic.w	r3, r3, #7
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	9303      	str	r3, [sp, #12]
 8007c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c12:	443b      	add	r3, r7
 8007c14:	9309      	str	r3, [sp, #36]	; 0x24
 8007c16:	e767      	b.n	8007ae8 <_vfiprintf_r+0x94>
 8007c18:	460c      	mov	r4, r1
 8007c1a:	2001      	movs	r0, #1
 8007c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c20:	e7a5      	b.n	8007b6e <_vfiprintf_r+0x11a>
 8007c22:	2300      	movs	r3, #0
 8007c24:	f04f 0c0a 	mov.w	ip, #10
 8007c28:	4619      	mov	r1, r3
 8007c2a:	3401      	adds	r4, #1
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c34:	3a30      	subs	r2, #48	; 0x30
 8007c36:	2a09      	cmp	r2, #9
 8007c38:	d903      	bls.n	8007c42 <_vfiprintf_r+0x1ee>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0c5      	beq.n	8007bca <_vfiprintf_r+0x176>
 8007c3e:	9105      	str	r1, [sp, #20]
 8007c40:	e7c3      	b.n	8007bca <_vfiprintf_r+0x176>
 8007c42:	4604      	mov	r4, r0
 8007c44:	2301      	movs	r3, #1
 8007c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c4a:	e7f0      	b.n	8007c2e <_vfiprintf_r+0x1da>
 8007c4c:	ab03      	add	r3, sp, #12
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	462a      	mov	r2, r5
 8007c52:	4630      	mov	r0, r6
 8007c54:	4b16      	ldr	r3, [pc, #88]	; (8007cb0 <_vfiprintf_r+0x25c>)
 8007c56:	a904      	add	r1, sp, #16
 8007c58:	f7fd fddc 	bl	8005814 <_printf_float>
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	1c78      	adds	r0, r7, #1
 8007c60:	d1d6      	bne.n	8007c10 <_vfiprintf_r+0x1bc>
 8007c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c64:	07d9      	lsls	r1, r3, #31
 8007c66:	d405      	bmi.n	8007c74 <_vfiprintf_r+0x220>
 8007c68:	89ab      	ldrh	r3, [r5, #12]
 8007c6a:	059a      	lsls	r2, r3, #22
 8007c6c:	d402      	bmi.n	8007c74 <_vfiprintf_r+0x220>
 8007c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c70:	f000 faab 	bl	80081ca <__retarget_lock_release_recursive>
 8007c74:	89ab      	ldrh	r3, [r5, #12]
 8007c76:	065b      	lsls	r3, r3, #25
 8007c78:	f53f af12 	bmi.w	8007aa0 <_vfiprintf_r+0x4c>
 8007c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c7e:	e711      	b.n	8007aa4 <_vfiprintf_r+0x50>
 8007c80:	ab03      	add	r3, sp, #12
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	462a      	mov	r2, r5
 8007c86:	4630      	mov	r0, r6
 8007c88:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <_vfiprintf_r+0x25c>)
 8007c8a:	a904      	add	r1, sp, #16
 8007c8c:	f7fe f85e 	bl	8005d4c <_printf_i>
 8007c90:	e7e4      	b.n	8007c5c <_vfiprintf_r+0x208>
 8007c92:	bf00      	nop
 8007c94:	080088ec 	.word	0x080088ec
 8007c98:	0800890c 	.word	0x0800890c
 8007c9c:	080088cc 	.word	0x080088cc
 8007ca0:	08008774 	.word	0x08008774
 8007ca4:	0800877a 	.word	0x0800877a
 8007ca8:	0800877e 	.word	0x0800877e
 8007cac:	08005815 	.word	0x08005815
 8007cb0:	08007a31 	.word	0x08007a31

08007cb4 <__swbuf_r>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	460e      	mov	r6, r1
 8007cb8:	4614      	mov	r4, r2
 8007cba:	4605      	mov	r5, r0
 8007cbc:	b118      	cbz	r0, 8007cc6 <__swbuf_r+0x12>
 8007cbe:	6983      	ldr	r3, [r0, #24]
 8007cc0:	b90b      	cbnz	r3, 8007cc6 <__swbuf_r+0x12>
 8007cc2:	f000 f9e3 	bl	800808c <__sinit>
 8007cc6:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <__swbuf_r+0x98>)
 8007cc8:	429c      	cmp	r4, r3
 8007cca:	d12b      	bne.n	8007d24 <__swbuf_r+0x70>
 8007ccc:	686c      	ldr	r4, [r5, #4]
 8007cce:	69a3      	ldr	r3, [r4, #24]
 8007cd0:	60a3      	str	r3, [r4, #8]
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	071a      	lsls	r2, r3, #28
 8007cd6:	d52f      	bpl.n	8007d38 <__swbuf_r+0x84>
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	b36b      	cbz	r3, 8007d38 <__swbuf_r+0x84>
 8007cdc:	6923      	ldr	r3, [r4, #16]
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	b2f6      	uxtb	r6, r6
 8007ce2:	1ac0      	subs	r0, r0, r3
 8007ce4:	6963      	ldr	r3, [r4, #20]
 8007ce6:	4637      	mov	r7, r6
 8007ce8:	4283      	cmp	r3, r0
 8007cea:	dc04      	bgt.n	8007cf6 <__swbuf_r+0x42>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f000 f938 	bl	8007f64 <_fflush_r>
 8007cf4:	bb30      	cbnz	r0, 8007d44 <__swbuf_r+0x90>
 8007cf6:	68a3      	ldr	r3, [r4, #8]
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	60a3      	str	r3, [r4, #8]
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	701e      	strb	r6, [r3, #0]
 8007d06:	6963      	ldr	r3, [r4, #20]
 8007d08:	4283      	cmp	r3, r0
 8007d0a:	d004      	beq.n	8007d16 <__swbuf_r+0x62>
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	07db      	lsls	r3, r3, #31
 8007d10:	d506      	bpl.n	8007d20 <__swbuf_r+0x6c>
 8007d12:	2e0a      	cmp	r6, #10
 8007d14:	d104      	bne.n	8007d20 <__swbuf_r+0x6c>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 f923 	bl	8007f64 <_fflush_r>
 8007d1e:	b988      	cbnz	r0, 8007d44 <__swbuf_r+0x90>
 8007d20:	4638      	mov	r0, r7
 8007d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d24:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <__swbuf_r+0x9c>)
 8007d26:	429c      	cmp	r4, r3
 8007d28:	d101      	bne.n	8007d2e <__swbuf_r+0x7a>
 8007d2a:	68ac      	ldr	r4, [r5, #8]
 8007d2c:	e7cf      	b.n	8007cce <__swbuf_r+0x1a>
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <__swbuf_r+0xa0>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	bf08      	it	eq
 8007d34:	68ec      	ldreq	r4, [r5, #12]
 8007d36:	e7ca      	b.n	8007cce <__swbuf_r+0x1a>
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f000 f81a 	bl	8007d74 <__swsetup_r>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d0cb      	beq.n	8007cdc <__swbuf_r+0x28>
 8007d44:	f04f 37ff 	mov.w	r7, #4294967295
 8007d48:	e7ea      	b.n	8007d20 <__swbuf_r+0x6c>
 8007d4a:	bf00      	nop
 8007d4c:	080088ec 	.word	0x080088ec
 8007d50:	0800890c 	.word	0x0800890c
 8007d54:	080088cc 	.word	0x080088cc

08007d58 <__ascii_wctomb>:
 8007d58:	4603      	mov	r3, r0
 8007d5a:	4608      	mov	r0, r1
 8007d5c:	b141      	cbz	r1, 8007d70 <__ascii_wctomb+0x18>
 8007d5e:	2aff      	cmp	r2, #255	; 0xff
 8007d60:	d904      	bls.n	8007d6c <__ascii_wctomb+0x14>
 8007d62:	228a      	movs	r2, #138	; 0x8a
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	4770      	bx	lr
 8007d6c:	2001      	movs	r0, #1
 8007d6e:	700a      	strb	r2, [r1, #0]
 8007d70:	4770      	bx	lr
	...

08007d74 <__swsetup_r>:
 8007d74:	4b32      	ldr	r3, [pc, #200]	; (8007e40 <__swsetup_r+0xcc>)
 8007d76:	b570      	push	{r4, r5, r6, lr}
 8007d78:	681d      	ldr	r5, [r3, #0]
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b125      	cbz	r5, 8007d8a <__swsetup_r+0x16>
 8007d80:	69ab      	ldr	r3, [r5, #24]
 8007d82:	b913      	cbnz	r3, 8007d8a <__swsetup_r+0x16>
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 f981 	bl	800808c <__sinit>
 8007d8a:	4b2e      	ldr	r3, [pc, #184]	; (8007e44 <__swsetup_r+0xd0>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	d10f      	bne.n	8007db0 <__swsetup_r+0x3c>
 8007d90:	686c      	ldr	r4, [r5, #4]
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d98:	0719      	lsls	r1, r3, #28
 8007d9a:	d42c      	bmi.n	8007df6 <__swsetup_r+0x82>
 8007d9c:	06dd      	lsls	r5, r3, #27
 8007d9e:	d411      	bmi.n	8007dc4 <__swsetup_r+0x50>
 8007da0:	2309      	movs	r3, #9
 8007da2:	6033      	str	r3, [r6, #0]
 8007da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	e03e      	b.n	8007e2e <__swsetup_r+0xba>
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <__swsetup_r+0xd4>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	d101      	bne.n	8007dba <__swsetup_r+0x46>
 8007db6:	68ac      	ldr	r4, [r5, #8]
 8007db8:	e7eb      	b.n	8007d92 <__swsetup_r+0x1e>
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <__swsetup_r+0xd8>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	bf08      	it	eq
 8007dc0:	68ec      	ldreq	r4, [r5, #12]
 8007dc2:	e7e6      	b.n	8007d92 <__swsetup_r+0x1e>
 8007dc4:	0758      	lsls	r0, r3, #29
 8007dc6:	d512      	bpl.n	8007dee <__swsetup_r+0x7a>
 8007dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dca:	b141      	cbz	r1, 8007dde <__swsetup_r+0x6a>
 8007dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	d002      	beq.n	8007dda <__swsetup_r+0x66>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7ff fb37 	bl	8007448 <_free_r>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	2300      	movs	r3, #0
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f043 0308 	orr.w	r3, r3, #8
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	b94b      	cbnz	r3, 8007e0e <__swsetup_r+0x9a>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e04:	d003      	beq.n	8007e0e <__swsetup_r+0x9a>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 fa05 	bl	8008218 <__smakebuf_r>
 8007e0e:	89a0      	ldrh	r0, [r4, #12]
 8007e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e14:	f010 0301 	ands.w	r3, r0, #1
 8007e18:	d00a      	beq.n	8007e30 <__swsetup_r+0xbc>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60a3      	str	r3, [r4, #8]
 8007e1e:	6963      	ldr	r3, [r4, #20]
 8007e20:	425b      	negs	r3, r3
 8007e22:	61a3      	str	r3, [r4, #24]
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	b943      	cbnz	r3, 8007e3a <__swsetup_r+0xc6>
 8007e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e2c:	d1ba      	bne.n	8007da4 <__swsetup_r+0x30>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	0781      	lsls	r1, r0, #30
 8007e32:	bf58      	it	pl
 8007e34:	6963      	ldrpl	r3, [r4, #20]
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	e7f4      	b.n	8007e24 <__swsetup_r+0xb0>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e7f7      	b.n	8007e2e <__swsetup_r+0xba>
 8007e3e:	bf00      	nop
 8007e40:	20000010 	.word	0x20000010
 8007e44:	080088ec 	.word	0x080088ec
 8007e48:	0800890c 	.word	0x0800890c
 8007e4c:	080088cc 	.word	0x080088cc

08007e50 <abort>:
 8007e50:	2006      	movs	r0, #6
 8007e52:	b508      	push	{r3, lr}
 8007e54:	f000 fa50 	bl	80082f8 <raise>
 8007e58:	2001      	movs	r0, #1
 8007e5a:	f7fa f9be 	bl	80021da <_exit>
	...

08007e60 <__sflush_r>:
 8007e60:	898a      	ldrh	r2, [r1, #12]
 8007e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e64:	4605      	mov	r5, r0
 8007e66:	0710      	lsls	r0, r2, #28
 8007e68:	460c      	mov	r4, r1
 8007e6a:	d457      	bmi.n	8007f1c <__sflush_r+0xbc>
 8007e6c:	684b      	ldr	r3, [r1, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dc04      	bgt.n	8007e7c <__sflush_r+0x1c>
 8007e72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dc01      	bgt.n	8007e7c <__sflush_r+0x1c>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	d0fa      	beq.n	8007e78 <__sflush_r+0x18>
 8007e82:	2300      	movs	r3, #0
 8007e84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e88:	682f      	ldr	r7, [r5, #0]
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	d032      	beq.n	8007ef4 <__sflush_r+0x94>
 8007e8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	075a      	lsls	r2, r3, #29
 8007e94:	d505      	bpl.n	8007ea2 <__sflush_r+0x42>
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	1ac0      	subs	r0, r0, r3
 8007e9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e9c:	b10b      	cbz	r3, 8007ea2 <__sflush_r+0x42>
 8007e9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ea0:	1ac0      	subs	r0, r0, r3
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	6a21      	ldr	r1, [r4, #32]
 8007eac:	47b0      	blx	r6
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	d106      	bne.n	8007ec2 <__sflush_r+0x62>
 8007eb4:	6829      	ldr	r1, [r5, #0]
 8007eb6:	291d      	cmp	r1, #29
 8007eb8:	d82c      	bhi.n	8007f14 <__sflush_r+0xb4>
 8007eba:	4a29      	ldr	r2, [pc, #164]	; (8007f60 <__sflush_r+0x100>)
 8007ebc:	40ca      	lsrs	r2, r1
 8007ebe:	07d6      	lsls	r6, r2, #31
 8007ec0:	d528      	bpl.n	8007f14 <__sflush_r+0xb4>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	6062      	str	r2, [r4, #4]
 8007ec6:	6922      	ldr	r2, [r4, #16]
 8007ec8:	04d9      	lsls	r1, r3, #19
 8007eca:	6022      	str	r2, [r4, #0]
 8007ecc:	d504      	bpl.n	8007ed8 <__sflush_r+0x78>
 8007ece:	1c42      	adds	r2, r0, #1
 8007ed0:	d101      	bne.n	8007ed6 <__sflush_r+0x76>
 8007ed2:	682b      	ldr	r3, [r5, #0]
 8007ed4:	b903      	cbnz	r3, 8007ed8 <__sflush_r+0x78>
 8007ed6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eda:	602f      	str	r7, [r5, #0]
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d0cb      	beq.n	8007e78 <__sflush_r+0x18>
 8007ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ee4:	4299      	cmp	r1, r3
 8007ee6:	d002      	beq.n	8007eee <__sflush_r+0x8e>
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f7ff faad 	bl	8007448 <_free_r>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ef2:	e7c2      	b.n	8007e7a <__sflush_r+0x1a>
 8007ef4:	6a21      	ldr	r1, [r4, #32]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b0      	blx	r6
 8007efc:	1c41      	adds	r1, r0, #1
 8007efe:	d1c7      	bne.n	8007e90 <__sflush_r+0x30>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0c4      	beq.n	8007e90 <__sflush_r+0x30>
 8007f06:	2b1d      	cmp	r3, #29
 8007f08:	d001      	beq.n	8007f0e <__sflush_r+0xae>
 8007f0a:	2b16      	cmp	r3, #22
 8007f0c:	d101      	bne.n	8007f12 <__sflush_r+0xb2>
 8007f0e:	602f      	str	r7, [r5, #0]
 8007f10:	e7b2      	b.n	8007e78 <__sflush_r+0x18>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	e7ae      	b.n	8007e7a <__sflush_r+0x1a>
 8007f1c:	690f      	ldr	r7, [r1, #16]
 8007f1e:	2f00      	cmp	r7, #0
 8007f20:	d0aa      	beq.n	8007e78 <__sflush_r+0x18>
 8007f22:	0793      	lsls	r3, r2, #30
 8007f24:	bf18      	it	ne
 8007f26:	2300      	movne	r3, #0
 8007f28:	680e      	ldr	r6, [r1, #0]
 8007f2a:	bf08      	it	eq
 8007f2c:	694b      	ldreq	r3, [r1, #20]
 8007f2e:	1bf6      	subs	r6, r6, r7
 8007f30:	600f      	str	r7, [r1, #0]
 8007f32:	608b      	str	r3, [r1, #8]
 8007f34:	2e00      	cmp	r6, #0
 8007f36:	dd9f      	ble.n	8007e78 <__sflush_r+0x18>
 8007f38:	4633      	mov	r3, r6
 8007f3a:	463a      	mov	r2, r7
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	6a21      	ldr	r1, [r4, #32]
 8007f40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007f44:	47e0      	blx	ip
 8007f46:	2800      	cmp	r0, #0
 8007f48:	dc06      	bgt.n	8007f58 <__sflush_r+0xf8>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f54:	81a3      	strh	r3, [r4, #12]
 8007f56:	e790      	b.n	8007e7a <__sflush_r+0x1a>
 8007f58:	4407      	add	r7, r0
 8007f5a:	1a36      	subs	r6, r6, r0
 8007f5c:	e7ea      	b.n	8007f34 <__sflush_r+0xd4>
 8007f5e:	bf00      	nop
 8007f60:	20400001 	.word	0x20400001

08007f64 <_fflush_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	690b      	ldr	r3, [r1, #16]
 8007f68:	4605      	mov	r5, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	b913      	cbnz	r3, 8007f74 <_fflush_r+0x10>
 8007f6e:	2500      	movs	r5, #0
 8007f70:	4628      	mov	r0, r5
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	b118      	cbz	r0, 8007f7e <_fflush_r+0x1a>
 8007f76:	6983      	ldr	r3, [r0, #24]
 8007f78:	b90b      	cbnz	r3, 8007f7e <_fflush_r+0x1a>
 8007f7a:	f000 f887 	bl	800808c <__sinit>
 8007f7e:	4b14      	ldr	r3, [pc, #80]	; (8007fd0 <_fflush_r+0x6c>)
 8007f80:	429c      	cmp	r4, r3
 8007f82:	d11b      	bne.n	8007fbc <_fflush_r+0x58>
 8007f84:	686c      	ldr	r4, [r5, #4]
 8007f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0ef      	beq.n	8007f6e <_fflush_r+0xa>
 8007f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f90:	07d0      	lsls	r0, r2, #31
 8007f92:	d404      	bmi.n	8007f9e <_fflush_r+0x3a>
 8007f94:	0599      	lsls	r1, r3, #22
 8007f96:	d402      	bmi.n	8007f9e <_fflush_r+0x3a>
 8007f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f9a:	f000 f915 	bl	80081c8 <__retarget_lock_acquire_recursive>
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	f7ff ff5d 	bl	8007e60 <__sflush_r>
 8007fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fa8:	4605      	mov	r5, r0
 8007faa:	07da      	lsls	r2, r3, #31
 8007fac:	d4e0      	bmi.n	8007f70 <_fflush_r+0xc>
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	059b      	lsls	r3, r3, #22
 8007fb2:	d4dd      	bmi.n	8007f70 <_fflush_r+0xc>
 8007fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fb6:	f000 f908 	bl	80081ca <__retarget_lock_release_recursive>
 8007fba:	e7d9      	b.n	8007f70 <_fflush_r+0xc>
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <_fflush_r+0x70>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	d101      	bne.n	8007fc6 <_fflush_r+0x62>
 8007fc2:	68ac      	ldr	r4, [r5, #8]
 8007fc4:	e7df      	b.n	8007f86 <_fflush_r+0x22>
 8007fc6:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <_fflush_r+0x74>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	bf08      	it	eq
 8007fcc:	68ec      	ldreq	r4, [r5, #12]
 8007fce:	e7da      	b.n	8007f86 <_fflush_r+0x22>
 8007fd0:	080088ec 	.word	0x080088ec
 8007fd4:	0800890c 	.word	0x0800890c
 8007fd8:	080088cc 	.word	0x080088cc

08007fdc <std>:
 8007fdc:	2300      	movs	r3, #0
 8007fde:	b510      	push	{r4, lr}
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fea:	6083      	str	r3, [r0, #8]
 8007fec:	8181      	strh	r1, [r0, #12]
 8007fee:	6643      	str	r3, [r0, #100]	; 0x64
 8007ff0:	81c2      	strh	r2, [r0, #14]
 8007ff2:	6183      	str	r3, [r0, #24]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	305c      	adds	r0, #92	; 0x5c
 8007ffa:	f7fd fb65 	bl	80056c8 <memset>
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <std+0x38>)
 8008000:	6224      	str	r4, [r4, #32]
 8008002:	6263      	str	r3, [r4, #36]	; 0x24
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <std+0x3c>)
 8008006:	62a3      	str	r3, [r4, #40]	; 0x28
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <std+0x40>)
 800800a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800800c:	4b04      	ldr	r3, [pc, #16]	; (8008020 <std+0x44>)
 800800e:	6323      	str	r3, [r4, #48]	; 0x30
 8008010:	bd10      	pop	{r4, pc}
 8008012:	bf00      	nop
 8008014:	08008331 	.word	0x08008331
 8008018:	08008353 	.word	0x08008353
 800801c:	0800838b 	.word	0x0800838b
 8008020:	080083af 	.word	0x080083af

08008024 <_cleanup_r>:
 8008024:	4901      	ldr	r1, [pc, #4]	; (800802c <_cleanup_r+0x8>)
 8008026:	f000 b8af 	b.w	8008188 <_fwalk_reent>
 800802a:	bf00      	nop
 800802c:	08007f65 	.word	0x08007f65

08008030 <__sfmoreglue>:
 8008030:	2268      	movs	r2, #104	; 0x68
 8008032:	b570      	push	{r4, r5, r6, lr}
 8008034:	1e4d      	subs	r5, r1, #1
 8008036:	4355      	muls	r5, r2
 8008038:	460e      	mov	r6, r1
 800803a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800803e:	f7ff fa6b 	bl	8007518 <_malloc_r>
 8008042:	4604      	mov	r4, r0
 8008044:	b140      	cbz	r0, 8008058 <__sfmoreglue+0x28>
 8008046:	2100      	movs	r1, #0
 8008048:	e9c0 1600 	strd	r1, r6, [r0]
 800804c:	300c      	adds	r0, #12
 800804e:	60a0      	str	r0, [r4, #8]
 8008050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008054:	f7fd fb38 	bl	80056c8 <memset>
 8008058:	4620      	mov	r0, r4
 800805a:	bd70      	pop	{r4, r5, r6, pc}

0800805c <__sfp_lock_acquire>:
 800805c:	4801      	ldr	r0, [pc, #4]	; (8008064 <__sfp_lock_acquire+0x8>)
 800805e:	f000 b8b3 	b.w	80081c8 <__retarget_lock_acquire_recursive>
 8008062:	bf00      	nop
 8008064:	200006ad 	.word	0x200006ad

08008068 <__sfp_lock_release>:
 8008068:	4801      	ldr	r0, [pc, #4]	; (8008070 <__sfp_lock_release+0x8>)
 800806a:	f000 b8ae 	b.w	80081ca <__retarget_lock_release_recursive>
 800806e:	bf00      	nop
 8008070:	200006ad 	.word	0x200006ad

08008074 <__sinit_lock_acquire>:
 8008074:	4801      	ldr	r0, [pc, #4]	; (800807c <__sinit_lock_acquire+0x8>)
 8008076:	f000 b8a7 	b.w	80081c8 <__retarget_lock_acquire_recursive>
 800807a:	bf00      	nop
 800807c:	200006ae 	.word	0x200006ae

08008080 <__sinit_lock_release>:
 8008080:	4801      	ldr	r0, [pc, #4]	; (8008088 <__sinit_lock_release+0x8>)
 8008082:	f000 b8a2 	b.w	80081ca <__retarget_lock_release_recursive>
 8008086:	bf00      	nop
 8008088:	200006ae 	.word	0x200006ae

0800808c <__sinit>:
 800808c:	b510      	push	{r4, lr}
 800808e:	4604      	mov	r4, r0
 8008090:	f7ff fff0 	bl	8008074 <__sinit_lock_acquire>
 8008094:	69a3      	ldr	r3, [r4, #24]
 8008096:	b11b      	cbz	r3, 80080a0 <__sinit+0x14>
 8008098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809c:	f7ff bff0 	b.w	8008080 <__sinit_lock_release>
 80080a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080a4:	6523      	str	r3, [r4, #80]	; 0x50
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <__sinit+0x68>)
 80080a8:	4a13      	ldr	r2, [pc, #76]	; (80080f8 <__sinit+0x6c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80080ae:	42a3      	cmp	r3, r4
 80080b0:	bf08      	it	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	4620      	mov	r0, r4
 80080b6:	bf08      	it	eq
 80080b8:	61a3      	streq	r3, [r4, #24]
 80080ba:	f000 f81f 	bl	80080fc <__sfp>
 80080be:	6060      	str	r0, [r4, #4]
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 f81b 	bl	80080fc <__sfp>
 80080c6:	60a0      	str	r0, [r4, #8]
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 f817 	bl	80080fc <__sfp>
 80080ce:	2200      	movs	r2, #0
 80080d0:	2104      	movs	r1, #4
 80080d2:	60e0      	str	r0, [r4, #12]
 80080d4:	6860      	ldr	r0, [r4, #4]
 80080d6:	f7ff ff81 	bl	8007fdc <std>
 80080da:	2201      	movs	r2, #1
 80080dc:	2109      	movs	r1, #9
 80080de:	68a0      	ldr	r0, [r4, #8]
 80080e0:	f7ff ff7c 	bl	8007fdc <std>
 80080e4:	2202      	movs	r2, #2
 80080e6:	2112      	movs	r1, #18
 80080e8:	68e0      	ldr	r0, [r4, #12]
 80080ea:	f7ff ff77 	bl	8007fdc <std>
 80080ee:	2301      	movs	r3, #1
 80080f0:	61a3      	str	r3, [r4, #24]
 80080f2:	e7d1      	b.n	8008098 <__sinit+0xc>
 80080f4:	08008550 	.word	0x08008550
 80080f8:	08008025 	.word	0x08008025

080080fc <__sfp>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	4607      	mov	r7, r0
 8008100:	f7ff ffac 	bl	800805c <__sfp_lock_acquire>
 8008104:	4b1e      	ldr	r3, [pc, #120]	; (8008180 <__sfp+0x84>)
 8008106:	681e      	ldr	r6, [r3, #0]
 8008108:	69b3      	ldr	r3, [r6, #24]
 800810a:	b913      	cbnz	r3, 8008112 <__sfp+0x16>
 800810c:	4630      	mov	r0, r6
 800810e:	f7ff ffbd 	bl	800808c <__sinit>
 8008112:	3648      	adds	r6, #72	; 0x48
 8008114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008118:	3b01      	subs	r3, #1
 800811a:	d503      	bpl.n	8008124 <__sfp+0x28>
 800811c:	6833      	ldr	r3, [r6, #0]
 800811e:	b30b      	cbz	r3, 8008164 <__sfp+0x68>
 8008120:	6836      	ldr	r6, [r6, #0]
 8008122:	e7f7      	b.n	8008114 <__sfp+0x18>
 8008124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008128:	b9d5      	cbnz	r5, 8008160 <__sfp+0x64>
 800812a:	4b16      	ldr	r3, [pc, #88]	; (8008184 <__sfp+0x88>)
 800812c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008130:	60e3      	str	r3, [r4, #12]
 8008132:	6665      	str	r5, [r4, #100]	; 0x64
 8008134:	f000 f847 	bl	80081c6 <__retarget_lock_init_recursive>
 8008138:	f7ff ff96 	bl	8008068 <__sfp_lock_release>
 800813c:	2208      	movs	r2, #8
 800813e:	4629      	mov	r1, r5
 8008140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008148:	6025      	str	r5, [r4, #0]
 800814a:	61a5      	str	r5, [r4, #24]
 800814c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008150:	f7fd faba 	bl	80056c8 <memset>
 8008154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800815c:	4620      	mov	r0, r4
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	3468      	adds	r4, #104	; 0x68
 8008162:	e7d9      	b.n	8008118 <__sfp+0x1c>
 8008164:	2104      	movs	r1, #4
 8008166:	4638      	mov	r0, r7
 8008168:	f7ff ff62 	bl	8008030 <__sfmoreglue>
 800816c:	4604      	mov	r4, r0
 800816e:	6030      	str	r0, [r6, #0]
 8008170:	2800      	cmp	r0, #0
 8008172:	d1d5      	bne.n	8008120 <__sfp+0x24>
 8008174:	f7ff ff78 	bl	8008068 <__sfp_lock_release>
 8008178:	230c      	movs	r3, #12
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	e7ee      	b.n	800815c <__sfp+0x60>
 800817e:	bf00      	nop
 8008180:	08008550 	.word	0x08008550
 8008184:	ffff0001 	.word	0xffff0001

08008188 <_fwalk_reent>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	4606      	mov	r6, r0
 800818e:	4688      	mov	r8, r1
 8008190:	2700      	movs	r7, #0
 8008192:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800819a:	f1b9 0901 	subs.w	r9, r9, #1
 800819e:	d505      	bpl.n	80081ac <_fwalk_reent+0x24>
 80081a0:	6824      	ldr	r4, [r4, #0]
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	d1f7      	bne.n	8008196 <_fwalk_reent+0xe>
 80081a6:	4638      	mov	r0, r7
 80081a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ac:	89ab      	ldrh	r3, [r5, #12]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d907      	bls.n	80081c2 <_fwalk_reent+0x3a>
 80081b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081b6:	3301      	adds	r3, #1
 80081b8:	d003      	beq.n	80081c2 <_fwalk_reent+0x3a>
 80081ba:	4629      	mov	r1, r5
 80081bc:	4630      	mov	r0, r6
 80081be:	47c0      	blx	r8
 80081c0:	4307      	orrs	r7, r0
 80081c2:	3568      	adds	r5, #104	; 0x68
 80081c4:	e7e9      	b.n	800819a <_fwalk_reent+0x12>

080081c6 <__retarget_lock_init_recursive>:
 80081c6:	4770      	bx	lr

080081c8 <__retarget_lock_acquire_recursive>:
 80081c8:	4770      	bx	lr

080081ca <__retarget_lock_release_recursive>:
 80081ca:	4770      	bx	lr

080081cc <__swhatbuf_r>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	460e      	mov	r6, r1
 80081d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d4:	4614      	mov	r4, r2
 80081d6:	2900      	cmp	r1, #0
 80081d8:	461d      	mov	r5, r3
 80081da:	b096      	sub	sp, #88	; 0x58
 80081dc:	da08      	bge.n	80081f0 <__swhatbuf_r+0x24>
 80081de:	2200      	movs	r2, #0
 80081e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	061a      	lsls	r2, r3, #24
 80081e8:	d410      	bmi.n	800820c <__swhatbuf_r+0x40>
 80081ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ee:	e00e      	b.n	800820e <__swhatbuf_r+0x42>
 80081f0:	466a      	mov	r2, sp
 80081f2:	f000 f903 	bl	80083fc <_fstat_r>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	dbf1      	blt.n	80081de <__swhatbuf_r+0x12>
 80081fa:	9a01      	ldr	r2, [sp, #4]
 80081fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008204:	425a      	negs	r2, r3
 8008206:	415a      	adcs	r2, r3
 8008208:	602a      	str	r2, [r5, #0]
 800820a:	e7ee      	b.n	80081ea <__swhatbuf_r+0x1e>
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	2000      	movs	r0, #0
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	b016      	add	sp, #88	; 0x58
 8008214:	bd70      	pop	{r4, r5, r6, pc}
	...

08008218 <__smakebuf_r>:
 8008218:	898b      	ldrh	r3, [r1, #12]
 800821a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800821c:	079d      	lsls	r5, r3, #30
 800821e:	4606      	mov	r6, r0
 8008220:	460c      	mov	r4, r1
 8008222:	d507      	bpl.n	8008234 <__smakebuf_r+0x1c>
 8008224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	6123      	str	r3, [r4, #16]
 800822c:	2301      	movs	r3, #1
 800822e:	6163      	str	r3, [r4, #20]
 8008230:	b002      	add	sp, #8
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	466a      	mov	r2, sp
 8008236:	ab01      	add	r3, sp, #4
 8008238:	f7ff ffc8 	bl	80081cc <__swhatbuf_r>
 800823c:	9900      	ldr	r1, [sp, #0]
 800823e:	4605      	mov	r5, r0
 8008240:	4630      	mov	r0, r6
 8008242:	f7ff f969 	bl	8007518 <_malloc_r>
 8008246:	b948      	cbnz	r0, 800825c <__smakebuf_r+0x44>
 8008248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824c:	059a      	lsls	r2, r3, #22
 800824e:	d4ef      	bmi.n	8008230 <__smakebuf_r+0x18>
 8008250:	f023 0303 	bic.w	r3, r3, #3
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	e7e3      	b.n	8008224 <__smakebuf_r+0xc>
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <__smakebuf_r+0x7c>)
 800825e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	6020      	str	r0, [r4, #0]
 8008264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	9b00      	ldr	r3, [sp, #0]
 800826c:	6120      	str	r0, [r4, #16]
 800826e:	6163      	str	r3, [r4, #20]
 8008270:	9b01      	ldr	r3, [sp, #4]
 8008272:	b15b      	cbz	r3, 800828c <__smakebuf_r+0x74>
 8008274:	4630      	mov	r0, r6
 8008276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800827a:	f000 f8d1 	bl	8008420 <_isatty_r>
 800827e:	b128      	cbz	r0, 800828c <__smakebuf_r+0x74>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	89a0      	ldrh	r0, [r4, #12]
 800828e:	4305      	orrs	r5, r0
 8008290:	81a5      	strh	r5, [r4, #12]
 8008292:	e7cd      	b.n	8008230 <__smakebuf_r+0x18>
 8008294:	08008025 	.word	0x08008025

08008298 <_malloc_usable_size_r>:
 8008298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800829c:	1f18      	subs	r0, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfbc      	itt	lt
 80082a2:	580b      	ldrlt	r3, [r1, r0]
 80082a4:	18c0      	addlt	r0, r0, r3
 80082a6:	4770      	bx	lr

080082a8 <_raise_r>:
 80082a8:	291f      	cmp	r1, #31
 80082aa:	b538      	push	{r3, r4, r5, lr}
 80082ac:	4604      	mov	r4, r0
 80082ae:	460d      	mov	r5, r1
 80082b0:	d904      	bls.n	80082bc <_raise_r+0x14>
 80082b2:	2316      	movs	r3, #22
 80082b4:	6003      	str	r3, [r0, #0]
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082be:	b112      	cbz	r2, 80082c6 <_raise_r+0x1e>
 80082c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082c4:	b94b      	cbnz	r3, 80082da <_raise_r+0x32>
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 f830 	bl	800832c <_getpid_r>
 80082cc:	462a      	mov	r2, r5
 80082ce:	4601      	mov	r1, r0
 80082d0:	4620      	mov	r0, r4
 80082d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d6:	f000 b817 	b.w	8008308 <_kill_r>
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d00a      	beq.n	80082f4 <_raise_r+0x4c>
 80082de:	1c59      	adds	r1, r3, #1
 80082e0:	d103      	bne.n	80082ea <_raise_r+0x42>
 80082e2:	2316      	movs	r3, #22
 80082e4:	6003      	str	r3, [r0, #0]
 80082e6:	2001      	movs	r0, #1
 80082e8:	e7e7      	b.n	80082ba <_raise_r+0x12>
 80082ea:	2400      	movs	r4, #0
 80082ec:	4628      	mov	r0, r5
 80082ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082f2:	4798      	blx	r3
 80082f4:	2000      	movs	r0, #0
 80082f6:	e7e0      	b.n	80082ba <_raise_r+0x12>

080082f8 <raise>:
 80082f8:	4b02      	ldr	r3, [pc, #8]	; (8008304 <raise+0xc>)
 80082fa:	4601      	mov	r1, r0
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	f7ff bfd3 	b.w	80082a8 <_raise_r>
 8008302:	bf00      	nop
 8008304:	20000010 	.word	0x20000010

08008308 <_kill_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	2300      	movs	r3, #0
 800830c:	4d06      	ldr	r5, [pc, #24]	; (8008328 <_kill_r+0x20>)
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	4611      	mov	r1, r2
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	f7f9 ff50 	bl	80021ba <_kill>
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	d102      	bne.n	8008324 <_kill_r+0x1c>
 800831e:	682b      	ldr	r3, [r5, #0]
 8008320:	b103      	cbz	r3, 8008324 <_kill_r+0x1c>
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	bd38      	pop	{r3, r4, r5, pc}
 8008326:	bf00      	nop
 8008328:	200006a8 	.word	0x200006a8

0800832c <_getpid_r>:
 800832c:	f7f9 bf3e 	b.w	80021ac <_getpid>

08008330 <__sread>:
 8008330:	b510      	push	{r4, lr}
 8008332:	460c      	mov	r4, r1
 8008334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008338:	f000 f894 	bl	8008464 <_read_r>
 800833c:	2800      	cmp	r0, #0
 800833e:	bfab      	itete	ge
 8008340:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008342:	89a3      	ldrhlt	r3, [r4, #12]
 8008344:	181b      	addge	r3, r3, r0
 8008346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800834a:	bfac      	ite	ge
 800834c:	6563      	strge	r3, [r4, #84]	; 0x54
 800834e:	81a3      	strhlt	r3, [r4, #12]
 8008350:	bd10      	pop	{r4, pc}

08008352 <__swrite>:
 8008352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008356:	461f      	mov	r7, r3
 8008358:	898b      	ldrh	r3, [r1, #12]
 800835a:	4605      	mov	r5, r0
 800835c:	05db      	lsls	r3, r3, #23
 800835e:	460c      	mov	r4, r1
 8008360:	4616      	mov	r6, r2
 8008362:	d505      	bpl.n	8008370 <__swrite+0x1e>
 8008364:	2302      	movs	r3, #2
 8008366:	2200      	movs	r2, #0
 8008368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836c:	f000 f868 	bl	8008440 <_lseek_r>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	4632      	mov	r2, r6
 8008374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008378:	81a3      	strh	r3, [r4, #12]
 800837a:	4628      	mov	r0, r5
 800837c:	463b      	mov	r3, r7
 800837e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008386:	f000 b817 	b.w	80083b8 <_write_r>

0800838a <__sseek>:
 800838a:	b510      	push	{r4, lr}
 800838c:	460c      	mov	r4, r1
 800838e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008392:	f000 f855 	bl	8008440 <_lseek_r>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	bf15      	itete	ne
 800839c:	6560      	strne	r0, [r4, #84]	; 0x54
 800839e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083a6:	81a3      	strheq	r3, [r4, #12]
 80083a8:	bf18      	it	ne
 80083aa:	81a3      	strhne	r3, [r4, #12]
 80083ac:	bd10      	pop	{r4, pc}

080083ae <__sclose>:
 80083ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b2:	f000 b813 	b.w	80083dc <_close_r>
	...

080083b8 <_write_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	2200      	movs	r2, #0
 80083c2:	4d05      	ldr	r5, [pc, #20]	; (80083d8 <_write_r+0x20>)
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f7f9 ff2e 	bl	8002228 <_write>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_write_r+0x1e>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_write_r+0x1e>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	200006a8 	.word	0x200006a8

080083dc <_close_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	2300      	movs	r3, #0
 80083e0:	4d05      	ldr	r5, [pc, #20]	; (80083f8 <_close_r+0x1c>)
 80083e2:	4604      	mov	r4, r0
 80083e4:	4608      	mov	r0, r1
 80083e6:	602b      	str	r3, [r5, #0]
 80083e8:	f7f9 ff3a 	bl	8002260 <_close>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d102      	bne.n	80083f6 <_close_r+0x1a>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	b103      	cbz	r3, 80083f6 <_close_r+0x1a>
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	200006a8 	.word	0x200006a8

080083fc <_fstat_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	2300      	movs	r3, #0
 8008400:	4d06      	ldr	r5, [pc, #24]	; (800841c <_fstat_r+0x20>)
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	4611      	mov	r1, r2
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	f7f9 ff34 	bl	8002276 <_fstat>
 800840e:	1c43      	adds	r3, r0, #1
 8008410:	d102      	bne.n	8008418 <_fstat_r+0x1c>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	b103      	cbz	r3, 8008418 <_fstat_r+0x1c>
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	bd38      	pop	{r3, r4, r5, pc}
 800841a:	bf00      	nop
 800841c:	200006a8 	.word	0x200006a8

08008420 <_isatty_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	2300      	movs	r3, #0
 8008424:	4d05      	ldr	r5, [pc, #20]	; (800843c <_isatty_r+0x1c>)
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7f9 ff32 	bl	8002294 <_isatty>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_isatty_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_isatty_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	200006a8 	.word	0x200006a8

08008440 <_lseek_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	4611      	mov	r1, r2
 8008448:	2200      	movs	r2, #0
 800844a:	4d05      	ldr	r5, [pc, #20]	; (8008460 <_lseek_r+0x20>)
 800844c:	602a      	str	r2, [r5, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f7f9 ff2a 	bl	80022a8 <_lseek>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_lseek_r+0x1e>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_lseek_r+0x1e>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	200006a8 	.word	0x200006a8

08008464 <_read_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4604      	mov	r4, r0
 8008468:	4608      	mov	r0, r1
 800846a:	4611      	mov	r1, r2
 800846c:	2200      	movs	r2, #0
 800846e:	4d05      	ldr	r5, [pc, #20]	; (8008484 <_read_r+0x20>)
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7f9 febb 	bl	80021ee <_read>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_read_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_read_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	200006a8 	.word	0x200006a8

08008488 <_init>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	bf00      	nop
 800848c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848e:	bc08      	pop	{r3}
 8008490:	469e      	mov	lr, r3
 8008492:	4770      	bx	lr

08008494 <_fini>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	bf00      	nop
 8008498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849a:	bc08      	pop	{r3}
 800849c:	469e      	mov	lr, r3
 800849e:	4770      	bx	lr
